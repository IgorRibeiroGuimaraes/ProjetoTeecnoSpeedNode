
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Banco
 * 
 */
export type Banco = $Result.DefaultSelection<Prisma.$BancoPayload>
/**
 * Model PadraoVan
 * 
 */
export type PadraoVan = $Result.DefaultSelection<Prisma.$PadraoVanPayload>
/**
 * Model BancosPadroesVan
 * 
 */
export type BancosPadroesVan = $Result.DefaultSelection<Prisma.$BancosPadroesVanPayload>
/**
 * Model Cnab
 * 
 */
export type Cnab = $Result.DefaultSelection<Prisma.$CnabPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model BancosProdutos
 * 
 */
export type BancosProdutos = $Result.DefaultSelection<Prisma.$BancosProdutosPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bancos
 * const bancos = await prisma.banco.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bancos
   * const bancos = await prisma.banco.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.banco`: Exposes CRUD operations for the **Banco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bancos
    * const bancos = await prisma.banco.findMany()
    * ```
    */
  get banco(): Prisma.BancoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.padraoVan`: Exposes CRUD operations for the **PadraoVan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PadraoVans
    * const padraoVans = await prisma.padraoVan.findMany()
    * ```
    */
  get padraoVan(): Prisma.PadraoVanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bancosPadroesVan`: Exposes CRUD operations for the **BancosPadroesVan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BancosPadroesVans
    * const bancosPadroesVans = await prisma.bancosPadroesVan.findMany()
    * ```
    */
  get bancosPadroesVan(): Prisma.BancosPadroesVanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cnab`: Exposes CRUD operations for the **Cnab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cnabs
    * const cnabs = await prisma.cnab.findMany()
    * ```
    */
  get cnab(): Prisma.CnabDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bancosProdutos`: Exposes CRUD operations for the **BancosProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BancosProdutos
    * const bancosProdutos = await prisma.bancosProdutos.findMany()
    * ```
    */
  get bancosProdutos(): Prisma.BancosProdutosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Banco: 'Banco',
    PadraoVan: 'PadraoVan',
    BancosPadroesVan: 'BancosPadroesVan',
    Cnab: 'Cnab',
    Produto: 'Produto',
    BancosProdutos: 'BancosProdutos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "banco" | "padraoVan" | "bancosPadroesVan" | "cnab" | "produto" | "bancosProdutos"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Banco: {
        payload: Prisma.$BancoPayload<ExtArgs>
        fields: Prisma.BancoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          findFirst: {
            args: Prisma.BancoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          findMany: {
            args: Prisma.BancoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          create: {
            args: Prisma.BancoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          createMany: {
            args: Prisma.BancoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          delete: {
            args: Prisma.BancoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          update: {
            args: Prisma.BancoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          deleteMany: {
            args: Prisma.BancoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          upsert: {
            args: Prisma.BancoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          aggregate: {
            args: Prisma.BancoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanco>
          }
          groupBy: {
            args: Prisma.BancoGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancoGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancoCountArgs<ExtArgs>
            result: $Utils.Optional<BancoCountAggregateOutputType> | number
          }
        }
      }
      PadraoVan: {
        payload: Prisma.$PadraoVanPayload<ExtArgs>
        fields: Prisma.PadraoVanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PadraoVanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PadraoVanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          findFirst: {
            args: Prisma.PadraoVanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PadraoVanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          findMany: {
            args: Prisma.PadraoVanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>[]
          }
          create: {
            args: Prisma.PadraoVanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          createMany: {
            args: Prisma.PadraoVanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PadraoVanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>[]
          }
          delete: {
            args: Prisma.PadraoVanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          update: {
            args: Prisma.PadraoVanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          deleteMany: {
            args: Prisma.PadraoVanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PadraoVanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PadraoVanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>[]
          }
          upsert: {
            args: Prisma.PadraoVanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          aggregate: {
            args: Prisma.PadraoVanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePadraoVan>
          }
          groupBy: {
            args: Prisma.PadraoVanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PadraoVanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PadraoVanCountArgs<ExtArgs>
            result: $Utils.Optional<PadraoVanCountAggregateOutputType> | number
          }
        }
      }
      BancosPadroesVan: {
        payload: Prisma.$BancosPadroesVanPayload<ExtArgs>
        fields: Prisma.BancosPadroesVanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancosPadroesVanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancosPadroesVanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          findFirst: {
            args: Prisma.BancosPadroesVanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancosPadroesVanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          findMany: {
            args: Prisma.BancosPadroesVanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>[]
          }
          create: {
            args: Prisma.BancosPadroesVanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          createMany: {
            args: Prisma.BancosPadroesVanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancosPadroesVanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>[]
          }
          delete: {
            args: Prisma.BancosPadroesVanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          update: {
            args: Prisma.BancosPadroesVanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          deleteMany: {
            args: Prisma.BancosPadroesVanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancosPadroesVanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancosPadroesVanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>[]
          }
          upsert: {
            args: Prisma.BancosPadroesVanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          aggregate: {
            args: Prisma.BancosPadroesVanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBancosPadroesVan>
          }
          groupBy: {
            args: Prisma.BancosPadroesVanGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancosPadroesVanGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancosPadroesVanCountArgs<ExtArgs>
            result: $Utils.Optional<BancosPadroesVanCountAggregateOutputType> | number
          }
        }
      }
      Cnab: {
        payload: Prisma.$CnabPayload<ExtArgs>
        fields: Prisma.CnabFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CnabFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CnabFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>
          }
          findFirst: {
            args: Prisma.CnabFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CnabFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>
          }
          findMany: {
            args: Prisma.CnabFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>[]
          }
          create: {
            args: Prisma.CnabCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>
          }
          createMany: {
            args: Prisma.CnabCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CnabCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>[]
          }
          delete: {
            args: Prisma.CnabDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>
          }
          update: {
            args: Prisma.CnabUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>
          }
          deleteMany: {
            args: Prisma.CnabDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CnabUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CnabUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>[]
          }
          upsert: {
            args: Prisma.CnabUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CnabPayload>
          }
          aggregate: {
            args: Prisma.CnabAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCnab>
          }
          groupBy: {
            args: Prisma.CnabGroupByArgs<ExtArgs>
            result: $Utils.Optional<CnabGroupByOutputType>[]
          }
          count: {
            args: Prisma.CnabCountArgs<ExtArgs>
            result: $Utils.Optional<CnabCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProdutoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProdutoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      BancosProdutos: {
        payload: Prisma.$BancosProdutosPayload<ExtArgs>
        fields: Prisma.BancosProdutosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancosProdutosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancosProdutosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          findFirst: {
            args: Prisma.BancosProdutosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancosProdutosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          findMany: {
            args: Prisma.BancosProdutosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>[]
          }
          create: {
            args: Prisma.BancosProdutosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          createMany: {
            args: Prisma.BancosProdutosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancosProdutosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>[]
          }
          delete: {
            args: Prisma.BancosProdutosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          update: {
            args: Prisma.BancosProdutosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          deleteMany: {
            args: Prisma.BancosProdutosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancosProdutosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancosProdutosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>[]
          }
          upsert: {
            args: Prisma.BancosProdutosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          aggregate: {
            args: Prisma.BancosProdutosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBancosProdutos>
          }
          groupBy: {
            args: Prisma.BancosProdutosGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancosProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancosProdutosCountArgs<ExtArgs>
            result: $Utils.Optional<BancosProdutosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    banco?: BancoOmit
    padraoVan?: PadraoVanOmit
    bancosPadroesVan?: BancosPadroesVanOmit
    cnab?: CnabOmit
    produto?: ProdutoOmit
    bancosProdutos?: BancosProdutosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BancoCountOutputType
   */

  export type BancoCountOutputType = {
    padroesVan: number
    produtos: number
  }

  export type BancoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    padroesVan?: boolean | BancoCountOutputTypeCountPadroesVanArgs
    produtos?: boolean | BancoCountOutputTypeCountProdutosArgs
  }

  // Custom InputTypes
  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancoCountOutputType
     */
    select?: BancoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeCountPadroesVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosPadroesVanWhereInput
  }

  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosProdutosWhereInput
  }


  /**
   * Count Type PadraoVanCountOutputType
   */

  export type PadraoVanCountOutputType = {
    bancos: number
  }

  export type PadraoVanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | PadraoVanCountOutputTypeCountBancosArgs
  }

  // Custom InputTypes
  /**
   * PadraoVanCountOutputType without action
   */
  export type PadraoVanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVanCountOutputType
     */
    select?: PadraoVanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PadraoVanCountOutputType without action
   */
  export type PadraoVanCountOutputTypeCountBancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosPadroesVanWhereInput
  }


  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    bancos: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | ProdutoCountOutputTypeCountBancosArgs
  }

  // Custom InputTypes
  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountBancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosProdutosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Banco
   */

  export type AggregateBanco = {
    _count: BancoCountAggregateOutputType | null
    _avg: BancoAvgAggregateOutputType | null
    _sum: BancoSumAggregateOutputType | null
    _min: BancoMinAggregateOutputType | null
    _max: BancoMaxAggregateOutputType | null
  }

  export type BancoAvgAggregateOutputType = {
    id: number | null
  }

  export type BancoSumAggregateOutputType = {
    id: number | null
  }

  export type BancoMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type BancoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type BancoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type BancoAvgAggregateInputType = {
    id?: true
  }

  export type BancoSumAggregateInputType = {
    id?: true
  }

  export type BancoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type BancoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type BancoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type BancoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banco to aggregate.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bancos
    **/
    _count?: true | BancoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancoMaxAggregateInputType
  }

  export type GetBancoAggregateType<T extends BancoAggregateArgs> = {
        [P in keyof T & keyof AggregateBanco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanco[P]>
      : GetScalarType<T[P], AggregateBanco[P]>
  }




  export type BancoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancoWhereInput
    orderBy?: BancoOrderByWithAggregationInput | BancoOrderByWithAggregationInput[]
    by: BancoScalarFieldEnum[] | BancoScalarFieldEnum
    having?: BancoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancoCountAggregateInputType | true
    _avg?: BancoAvgAggregateInputType
    _sum?: BancoSumAggregateInputType
    _min?: BancoMinAggregateInputType
    _max?: BancoMaxAggregateInputType
  }

  export type BancoGroupByOutputType = {
    id: number
    nome: string
    _count: BancoCountAggregateOutputType | null
    _avg: BancoAvgAggregateOutputType | null
    _sum: BancoSumAggregateOutputType | null
    _min: BancoMinAggregateOutputType | null
    _max: BancoMaxAggregateOutputType | null
  }

  type GetBancoGroupByPayload<T extends BancoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancoGroupByOutputType[P]>
            : GetScalarType<T[P], BancoGroupByOutputType[P]>
        }
      >
    >


  export type BancoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    padroesVan?: boolean | Banco$padroesVanArgs<ExtArgs>
    cnabs?: boolean | Banco$cnabsArgs<ExtArgs>
    produtos?: boolean | Banco$produtosArgs<ExtArgs>
    _count?: boolean | BancoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["banco"]>

  export type BancoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["banco"]>

  export type BancoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["banco"]>

  export type BancoSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type BancoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["banco"]>
  export type BancoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    padroesVan?: boolean | Banco$padroesVanArgs<ExtArgs>
    cnabs?: boolean | Banco$cnabsArgs<ExtArgs>
    produtos?: boolean | Banco$produtosArgs<ExtArgs>
    _count?: boolean | BancoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BancoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BancoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BancoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Banco"
    objects: {
      padroesVan: Prisma.$BancosPadroesVanPayload<ExtArgs>[]
      cnabs: Prisma.$CnabPayload<ExtArgs> | null
      produtos: Prisma.$BancosProdutosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["banco"]>
    composites: {}
  }

  type BancoGetPayload<S extends boolean | null | undefined | BancoDefaultArgs> = $Result.GetResult<Prisma.$BancoPayload, S>

  type BancoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancoCountAggregateInputType | true
    }

  export interface BancoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Banco'], meta: { name: 'Banco' } }
    /**
     * Find zero or one Banco that matches the filter.
     * @param {BancoFindUniqueArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancoFindUniqueArgs>(args: SelectSubset<T, BancoFindUniqueArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Banco that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancoFindUniqueOrThrowArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancoFindUniqueOrThrowArgs>(args: SelectSubset<T, BancoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Banco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindFirstArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancoFindFirstArgs>(args?: SelectSubset<T, BancoFindFirstArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Banco that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindFirstOrThrowArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancoFindFirstOrThrowArgs>(args?: SelectSubset<T, BancoFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Bancos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bancos
     * const bancos = await prisma.banco.findMany()
     * 
     * // Get first 10 Bancos
     * const bancos = await prisma.banco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancoWithIdOnly = await prisma.banco.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancoFindManyArgs>(args?: SelectSubset<T, BancoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Banco.
     * @param {BancoCreateArgs} args - Arguments to create a Banco.
     * @example
     * // Create one Banco
     * const Banco = await prisma.banco.create({
     *   data: {
     *     // ... data to create a Banco
     *   }
     * })
     * 
     */
    create<T extends BancoCreateArgs>(args: SelectSubset<T, BancoCreateArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Bancos.
     * @param {BancoCreateManyArgs} args - Arguments to create many Bancos.
     * @example
     * // Create many Bancos
     * const banco = await prisma.banco.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancoCreateManyArgs>(args?: SelectSubset<T, BancoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bancos and returns the data saved in the database.
     * @param {BancoCreateManyAndReturnArgs} args - Arguments to create many Bancos.
     * @example
     * // Create many Bancos
     * const banco = await prisma.banco.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bancos and only return the `id`
     * const bancoWithIdOnly = await prisma.banco.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancoCreateManyAndReturnArgs>(args?: SelectSubset<T, BancoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Banco.
     * @param {BancoDeleteArgs} args - Arguments to delete one Banco.
     * @example
     * // Delete one Banco
     * const Banco = await prisma.banco.delete({
     *   where: {
     *     // ... filter to delete one Banco
     *   }
     * })
     * 
     */
    delete<T extends BancoDeleteArgs>(args: SelectSubset<T, BancoDeleteArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Banco.
     * @param {BancoUpdateArgs} args - Arguments to update one Banco.
     * @example
     * // Update one Banco
     * const banco = await prisma.banco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancoUpdateArgs>(args: SelectSubset<T, BancoUpdateArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Bancos.
     * @param {BancoDeleteManyArgs} args - Arguments to filter Bancos to delete.
     * @example
     * // Delete a few Bancos
     * const { count } = await prisma.banco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancoDeleteManyArgs>(args?: SelectSubset<T, BancoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bancos
     * const banco = await prisma.banco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancoUpdateManyArgs>(args: SelectSubset<T, BancoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bancos and returns the data updated in the database.
     * @param {BancoUpdateManyAndReturnArgs} args - Arguments to update many Bancos.
     * @example
     * // Update many Bancos
     * const banco = await prisma.banco.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bancos and only return the `id`
     * const bancoWithIdOnly = await prisma.banco.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancoUpdateManyAndReturnArgs>(args: SelectSubset<T, BancoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Banco.
     * @param {BancoUpsertArgs} args - Arguments to update or create a Banco.
     * @example
     * // Update or create a Banco
     * const banco = await prisma.banco.upsert({
     *   create: {
     *     // ... data to create a Banco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banco we want to update
     *   }
     * })
     */
    upsert<T extends BancoUpsertArgs>(args: SelectSubset<T, BancoUpsertArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoCountArgs} args - Arguments to filter Bancos to count.
     * @example
     * // Count the number of Bancos
     * const count = await prisma.banco.count({
     *   where: {
     *     // ... the filter for the Bancos we want to count
     *   }
     * })
    **/
    count<T extends BancoCountArgs>(
      args?: Subset<T, BancoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancoAggregateArgs>(args: Subset<T, BancoAggregateArgs>): Prisma.PrismaPromise<GetBancoAggregateType<T>>

    /**
     * Group by Banco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancoGroupByArgs['orderBy'] }
        : { orderBy?: BancoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Banco model
   */
  readonly fields: BancoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Banco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    padroesVan<T extends Banco$padroesVanArgs<ExtArgs> = {}>(args?: Subset<T, Banco$padroesVanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cnabs<T extends Banco$cnabsArgs<ExtArgs> = {}>(args?: Subset<T, Banco$cnabsArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    produtos<T extends Banco$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Banco$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Banco model
   */ 
  interface BancoFieldRefs {
    readonly id: FieldRef<"Banco", 'Int'>
    readonly nome: FieldRef<"Banco", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Banco findUnique
   */
  export type BancoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco findUniqueOrThrow
   */
  export type BancoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco findFirst
   */
  export type BancoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bancos.
     */
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco findFirstOrThrow
   */
  export type BancoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bancos.
     */
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco findMany
   */
  export type BancoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Bancos to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco create
   */
  export type BancoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The data needed to create a Banco.
     */
    data: XOR<BancoCreateInput, BancoUncheckedCreateInput>
  }

  /**
   * Banco createMany
   */
  export type BancoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bancos.
     */
    data: BancoCreateManyInput | BancoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Banco createManyAndReturn
   */
  export type BancoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * The data used to create many Bancos.
     */
    data: BancoCreateManyInput | BancoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Banco update
   */
  export type BancoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The data needed to update a Banco.
     */
    data: XOR<BancoUpdateInput, BancoUncheckedUpdateInput>
    /**
     * Choose, which Banco to update.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco updateMany
   */
  export type BancoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bancos.
     */
    data: XOR<BancoUpdateManyMutationInput, BancoUncheckedUpdateManyInput>
    /**
     * Filter which Bancos to update
     */
    where?: BancoWhereInput
    /**
     * Limit how many Bancos to update.
     */
    limit?: number
  }

  /**
   * Banco updateManyAndReturn
   */
  export type BancoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * The data used to update Bancos.
     */
    data: XOR<BancoUpdateManyMutationInput, BancoUncheckedUpdateManyInput>
    /**
     * Filter which Bancos to update
     */
    where?: BancoWhereInput
    /**
     * Limit how many Bancos to update.
     */
    limit?: number
  }

  /**
   * Banco upsert
   */
  export type BancoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The filter to search for the Banco to update in case it exists.
     */
    where: BancoWhereUniqueInput
    /**
     * In case the Banco found by the `where` argument doesn't exist, create a new Banco with this data.
     */
    create: XOR<BancoCreateInput, BancoUncheckedCreateInput>
    /**
     * In case the Banco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancoUpdateInput, BancoUncheckedUpdateInput>
  }

  /**
   * Banco delete
   */
  export type BancoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter which Banco to delete.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco deleteMany
   */
  export type BancoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bancos to delete
     */
    where?: BancoWhereInput
    /**
     * Limit how many Bancos to delete.
     */
    limit?: number
  }

  /**
   * Banco.padroesVan
   */
  export type Banco$padroesVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    where?: BancosPadroesVanWhereInput
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    cursor?: BancosPadroesVanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * Banco.cnabs
   */
  export type Banco$cnabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    where?: CnabWhereInput
  }

  /**
   * Banco.produtos
   */
  export type Banco$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    where?: BancosProdutosWhereInput
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    cursor?: BancosProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * Banco without action
   */
  export type BancoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
  }


  /**
   * Model PadraoVan
   */

  export type AggregatePadraoVan = {
    _count: PadraoVanCountAggregateOutputType | null
    _avg: PadraoVanAvgAggregateOutputType | null
    _sum: PadraoVanSumAggregateOutputType | null
    _min: PadraoVanMinAggregateOutputType | null
    _max: PadraoVanMaxAggregateOutputType | null
  }

  export type PadraoVanAvgAggregateOutputType = {
    id: number | null
  }

  export type PadraoVanSumAggregateOutputType = {
    id: number | null
  }

  export type PadraoVanMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type PadraoVanMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type PadraoVanCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type PadraoVanAvgAggregateInputType = {
    id?: true
  }

  export type PadraoVanSumAggregateInputType = {
    id?: true
  }

  export type PadraoVanMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type PadraoVanMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type PadraoVanCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type PadraoVanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PadraoVan to aggregate.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PadraoVans
    **/
    _count?: true | PadraoVanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PadraoVanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PadraoVanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PadraoVanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PadraoVanMaxAggregateInputType
  }

  export type GetPadraoVanAggregateType<T extends PadraoVanAggregateArgs> = {
        [P in keyof T & keyof AggregatePadraoVan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePadraoVan[P]>
      : GetScalarType<T[P], AggregatePadraoVan[P]>
  }




  export type PadraoVanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PadraoVanWhereInput
    orderBy?: PadraoVanOrderByWithAggregationInput | PadraoVanOrderByWithAggregationInput[]
    by: PadraoVanScalarFieldEnum[] | PadraoVanScalarFieldEnum
    having?: PadraoVanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PadraoVanCountAggregateInputType | true
    _avg?: PadraoVanAvgAggregateInputType
    _sum?: PadraoVanSumAggregateInputType
    _min?: PadraoVanMinAggregateInputType
    _max?: PadraoVanMaxAggregateInputType
  }

  export type PadraoVanGroupByOutputType = {
    id: number
    descricao: string
    _count: PadraoVanCountAggregateOutputType | null
    _avg: PadraoVanAvgAggregateOutputType | null
    _sum: PadraoVanSumAggregateOutputType | null
    _min: PadraoVanMinAggregateOutputType | null
    _max: PadraoVanMaxAggregateOutputType | null
  }

  type GetPadraoVanGroupByPayload<T extends PadraoVanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PadraoVanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PadraoVanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PadraoVanGroupByOutputType[P]>
            : GetScalarType<T[P], PadraoVanGroupByOutputType[P]>
        }
      >
    >


  export type PadraoVanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    bancos?: boolean | PadraoVan$bancosArgs<ExtArgs>
    _count?: boolean | PadraoVanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["padraoVan"]>

  export type PadraoVanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["padraoVan"]>

  export type PadraoVanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["padraoVan"]>

  export type PadraoVanSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type PadraoVanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao", ExtArgs["result"]["padraoVan"]>
  export type PadraoVanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | PadraoVan$bancosArgs<ExtArgs>
    _count?: boolean | PadraoVanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PadraoVanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PadraoVanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PadraoVanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PadraoVan"
    objects: {
      bancos: Prisma.$BancosPadroesVanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["padraoVan"]>
    composites: {}
  }

  type PadraoVanGetPayload<S extends boolean | null | undefined | PadraoVanDefaultArgs> = $Result.GetResult<Prisma.$PadraoVanPayload, S>

  type PadraoVanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PadraoVanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PadraoVanCountAggregateInputType | true
    }

  export interface PadraoVanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PadraoVan'], meta: { name: 'PadraoVan' } }
    /**
     * Find zero or one PadraoVan that matches the filter.
     * @param {PadraoVanFindUniqueArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PadraoVanFindUniqueArgs>(args: SelectSubset<T, PadraoVanFindUniqueArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PadraoVan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PadraoVanFindUniqueOrThrowArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PadraoVanFindUniqueOrThrowArgs>(args: SelectSubset<T, PadraoVanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PadraoVan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanFindFirstArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PadraoVanFindFirstArgs>(args?: SelectSubset<T, PadraoVanFindFirstArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PadraoVan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanFindFirstOrThrowArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PadraoVanFindFirstOrThrowArgs>(args?: SelectSubset<T, PadraoVanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PadraoVans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PadraoVans
     * const padraoVans = await prisma.padraoVan.findMany()
     * 
     * // Get first 10 PadraoVans
     * const padraoVans = await prisma.padraoVan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const padraoVanWithIdOnly = await prisma.padraoVan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PadraoVanFindManyArgs>(args?: SelectSubset<T, PadraoVanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PadraoVan.
     * @param {PadraoVanCreateArgs} args - Arguments to create a PadraoVan.
     * @example
     * // Create one PadraoVan
     * const PadraoVan = await prisma.padraoVan.create({
     *   data: {
     *     // ... data to create a PadraoVan
     *   }
     * })
     * 
     */
    create<T extends PadraoVanCreateArgs>(args: SelectSubset<T, PadraoVanCreateArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PadraoVans.
     * @param {PadraoVanCreateManyArgs} args - Arguments to create many PadraoVans.
     * @example
     * // Create many PadraoVans
     * const padraoVan = await prisma.padraoVan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PadraoVanCreateManyArgs>(args?: SelectSubset<T, PadraoVanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PadraoVans and returns the data saved in the database.
     * @param {PadraoVanCreateManyAndReturnArgs} args - Arguments to create many PadraoVans.
     * @example
     * // Create many PadraoVans
     * const padraoVan = await prisma.padraoVan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PadraoVans and only return the `id`
     * const padraoVanWithIdOnly = await prisma.padraoVan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PadraoVanCreateManyAndReturnArgs>(args?: SelectSubset<T, PadraoVanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PadraoVan.
     * @param {PadraoVanDeleteArgs} args - Arguments to delete one PadraoVan.
     * @example
     * // Delete one PadraoVan
     * const PadraoVan = await prisma.padraoVan.delete({
     *   where: {
     *     // ... filter to delete one PadraoVan
     *   }
     * })
     * 
     */
    delete<T extends PadraoVanDeleteArgs>(args: SelectSubset<T, PadraoVanDeleteArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PadraoVan.
     * @param {PadraoVanUpdateArgs} args - Arguments to update one PadraoVan.
     * @example
     * // Update one PadraoVan
     * const padraoVan = await prisma.padraoVan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PadraoVanUpdateArgs>(args: SelectSubset<T, PadraoVanUpdateArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PadraoVans.
     * @param {PadraoVanDeleteManyArgs} args - Arguments to filter PadraoVans to delete.
     * @example
     * // Delete a few PadraoVans
     * const { count } = await prisma.padraoVan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PadraoVanDeleteManyArgs>(args?: SelectSubset<T, PadraoVanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PadraoVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PadraoVans
     * const padraoVan = await prisma.padraoVan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PadraoVanUpdateManyArgs>(args: SelectSubset<T, PadraoVanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PadraoVans and returns the data updated in the database.
     * @param {PadraoVanUpdateManyAndReturnArgs} args - Arguments to update many PadraoVans.
     * @example
     * // Update many PadraoVans
     * const padraoVan = await prisma.padraoVan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PadraoVans and only return the `id`
     * const padraoVanWithIdOnly = await prisma.padraoVan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PadraoVanUpdateManyAndReturnArgs>(args: SelectSubset<T, PadraoVanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PadraoVan.
     * @param {PadraoVanUpsertArgs} args - Arguments to update or create a PadraoVan.
     * @example
     * // Update or create a PadraoVan
     * const padraoVan = await prisma.padraoVan.upsert({
     *   create: {
     *     // ... data to create a PadraoVan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PadraoVan we want to update
     *   }
     * })
     */
    upsert<T extends PadraoVanUpsertArgs>(args: SelectSubset<T, PadraoVanUpsertArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PadraoVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanCountArgs} args - Arguments to filter PadraoVans to count.
     * @example
     * // Count the number of PadraoVans
     * const count = await prisma.padraoVan.count({
     *   where: {
     *     // ... the filter for the PadraoVans we want to count
     *   }
     * })
    **/
    count<T extends PadraoVanCountArgs>(
      args?: Subset<T, PadraoVanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PadraoVanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PadraoVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PadraoVanAggregateArgs>(args: Subset<T, PadraoVanAggregateArgs>): Prisma.PrismaPromise<GetPadraoVanAggregateType<T>>

    /**
     * Group by PadraoVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PadraoVanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PadraoVanGroupByArgs['orderBy'] }
        : { orderBy?: PadraoVanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PadraoVanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPadraoVanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PadraoVan model
   */
  readonly fields: PadraoVanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PadraoVan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PadraoVanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bancos<T extends PadraoVan$bancosArgs<ExtArgs> = {}>(args?: Subset<T, PadraoVan$bancosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PadraoVan model
   */ 
  interface PadraoVanFieldRefs {
    readonly id: FieldRef<"PadraoVan", 'Int'>
    readonly descricao: FieldRef<"PadraoVan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PadraoVan findUnique
   */
  export type PadraoVanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan findUniqueOrThrow
   */
  export type PadraoVanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan findFirst
   */
  export type PadraoVanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PadraoVans.
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PadraoVans.
     */
    distinct?: PadraoVanScalarFieldEnum | PadraoVanScalarFieldEnum[]
  }

  /**
   * PadraoVan findFirstOrThrow
   */
  export type PadraoVanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PadraoVans.
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PadraoVans.
     */
    distinct?: PadraoVanScalarFieldEnum | PadraoVanScalarFieldEnum[]
  }

  /**
   * PadraoVan findMany
   */
  export type PadraoVanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVans to fetch.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PadraoVans.
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    distinct?: PadraoVanScalarFieldEnum | PadraoVanScalarFieldEnum[]
  }

  /**
   * PadraoVan create
   */
  export type PadraoVanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * The data needed to create a PadraoVan.
     */
    data: XOR<PadraoVanCreateInput, PadraoVanUncheckedCreateInput>
  }

  /**
   * PadraoVan createMany
   */
  export type PadraoVanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PadraoVans.
     */
    data: PadraoVanCreateManyInput | PadraoVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PadraoVan createManyAndReturn
   */
  export type PadraoVanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * The data used to create many PadraoVans.
     */
    data: PadraoVanCreateManyInput | PadraoVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PadraoVan update
   */
  export type PadraoVanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * The data needed to update a PadraoVan.
     */
    data: XOR<PadraoVanUpdateInput, PadraoVanUncheckedUpdateInput>
    /**
     * Choose, which PadraoVan to update.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan updateMany
   */
  export type PadraoVanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PadraoVans.
     */
    data: XOR<PadraoVanUpdateManyMutationInput, PadraoVanUncheckedUpdateManyInput>
    /**
     * Filter which PadraoVans to update
     */
    where?: PadraoVanWhereInput
    /**
     * Limit how many PadraoVans to update.
     */
    limit?: number
  }

  /**
   * PadraoVan updateManyAndReturn
   */
  export type PadraoVanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * The data used to update PadraoVans.
     */
    data: XOR<PadraoVanUpdateManyMutationInput, PadraoVanUncheckedUpdateManyInput>
    /**
     * Filter which PadraoVans to update
     */
    where?: PadraoVanWhereInput
    /**
     * Limit how many PadraoVans to update.
     */
    limit?: number
  }

  /**
   * PadraoVan upsert
   */
  export type PadraoVanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * The filter to search for the PadraoVan to update in case it exists.
     */
    where: PadraoVanWhereUniqueInput
    /**
     * In case the PadraoVan found by the `where` argument doesn't exist, create a new PadraoVan with this data.
     */
    create: XOR<PadraoVanCreateInput, PadraoVanUncheckedCreateInput>
    /**
     * In case the PadraoVan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PadraoVanUpdateInput, PadraoVanUncheckedUpdateInput>
  }

  /**
   * PadraoVan delete
   */
  export type PadraoVanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter which PadraoVan to delete.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan deleteMany
   */
  export type PadraoVanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PadraoVans to delete
     */
    where?: PadraoVanWhereInput
    /**
     * Limit how many PadraoVans to delete.
     */
    limit?: number
  }

  /**
   * PadraoVan.bancos
   */
  export type PadraoVan$bancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    where?: BancosPadroesVanWhereInput
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    cursor?: BancosPadroesVanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * PadraoVan without action
   */
  export type PadraoVanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
  }


  /**
   * Model BancosPadroesVan
   */

  export type AggregateBancosPadroesVan = {
    _count: BancosPadroesVanCountAggregateOutputType | null
    _avg: BancosPadroesVanAvgAggregateOutputType | null
    _sum: BancosPadroesVanSumAggregateOutputType | null
    _min: BancosPadroesVanMinAggregateOutputType | null
    _max: BancosPadroesVanMaxAggregateOutputType | null
  }

  export type BancosPadroesVanAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanMinAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanMaxAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanCountAggregateOutputType = {
    id: number
    bancoId: number
    padraoVanId: number
    _all: number
  }


  export type BancosPadroesVanAvgAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanSumAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanMinAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanMaxAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanCountAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
    _all?: true
  }

  export type BancosPadroesVanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosPadroesVan to aggregate.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BancosPadroesVans
    **/
    _count?: true | BancosPadroesVanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancosPadroesVanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancosPadroesVanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancosPadroesVanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancosPadroesVanMaxAggregateInputType
  }

  export type GetBancosPadroesVanAggregateType<T extends BancosPadroesVanAggregateArgs> = {
        [P in keyof T & keyof AggregateBancosPadroesVan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBancosPadroesVan[P]>
      : GetScalarType<T[P], AggregateBancosPadroesVan[P]>
  }




  export type BancosPadroesVanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosPadroesVanWhereInput
    orderBy?: BancosPadroesVanOrderByWithAggregationInput | BancosPadroesVanOrderByWithAggregationInput[]
    by: BancosPadroesVanScalarFieldEnum[] | BancosPadroesVanScalarFieldEnum
    having?: BancosPadroesVanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancosPadroesVanCountAggregateInputType | true
    _avg?: BancosPadroesVanAvgAggregateInputType
    _sum?: BancosPadroesVanSumAggregateInputType
    _min?: BancosPadroesVanMinAggregateInputType
    _max?: BancosPadroesVanMaxAggregateInputType
  }

  export type BancosPadroesVanGroupByOutputType = {
    id: number
    bancoId: number
    padraoVanId: number
    _count: BancosPadroesVanCountAggregateOutputType | null
    _avg: BancosPadroesVanAvgAggregateOutputType | null
    _sum: BancosPadroesVanSumAggregateOutputType | null
    _min: BancosPadroesVanMinAggregateOutputType | null
    _max: BancosPadroesVanMaxAggregateOutputType | null
  }

  type GetBancosPadroesVanGroupByPayload<T extends BancosPadroesVanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancosPadroesVanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancosPadroesVanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancosPadroesVanGroupByOutputType[P]>
            : GetScalarType<T[P], BancosPadroesVanGroupByOutputType[P]>
        }
      >
    >


  export type BancosPadroesVanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosPadroesVan"]>

  export type BancosPadroesVanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosPadroesVan"]>

  export type BancosPadroesVanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosPadroesVan"]>

  export type BancosPadroesVanSelectScalar = {
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
  }

  export type BancosPadroesVanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bancoId" | "padraoVanId", ExtArgs["result"]["bancosPadroesVan"]>
  export type BancosPadroesVanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }
  export type BancosPadroesVanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }
  export type BancosPadroesVanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }

  export type $BancosPadroesVanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BancosPadroesVan"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
      padraoVan: Prisma.$PadraoVanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bancoId: number
      padraoVanId: number
    }, ExtArgs["result"]["bancosPadroesVan"]>
    composites: {}
  }

  type BancosPadroesVanGetPayload<S extends boolean | null | undefined | BancosPadroesVanDefaultArgs> = $Result.GetResult<Prisma.$BancosPadroesVanPayload, S>

  type BancosPadroesVanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancosPadroesVanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancosPadroesVanCountAggregateInputType | true
    }

  export interface BancosPadroesVanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BancosPadroesVan'], meta: { name: 'BancosPadroesVan' } }
    /**
     * Find zero or one BancosPadroesVan that matches the filter.
     * @param {BancosPadroesVanFindUniqueArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancosPadroesVanFindUniqueArgs>(args: SelectSubset<T, BancosPadroesVanFindUniqueArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BancosPadroesVan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancosPadroesVanFindUniqueOrThrowArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancosPadroesVanFindUniqueOrThrowArgs>(args: SelectSubset<T, BancosPadroesVanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BancosPadroesVan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanFindFirstArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancosPadroesVanFindFirstArgs>(args?: SelectSubset<T, BancosPadroesVanFindFirstArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BancosPadroesVan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanFindFirstOrThrowArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancosPadroesVanFindFirstOrThrowArgs>(args?: SelectSubset<T, BancosPadroesVanFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BancosPadroesVans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BancosPadroesVans
     * const bancosPadroesVans = await prisma.bancosPadroesVan.findMany()
     * 
     * // Get first 10 BancosPadroesVans
     * const bancosPadroesVans = await prisma.bancosPadroesVan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancosPadroesVanWithIdOnly = await prisma.bancosPadroesVan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancosPadroesVanFindManyArgs>(args?: SelectSubset<T, BancosPadroesVanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BancosPadroesVan.
     * @param {BancosPadroesVanCreateArgs} args - Arguments to create a BancosPadroesVan.
     * @example
     * // Create one BancosPadroesVan
     * const BancosPadroesVan = await prisma.bancosPadroesVan.create({
     *   data: {
     *     // ... data to create a BancosPadroesVan
     *   }
     * })
     * 
     */
    create<T extends BancosPadroesVanCreateArgs>(args: SelectSubset<T, BancosPadroesVanCreateArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BancosPadroesVans.
     * @param {BancosPadroesVanCreateManyArgs} args - Arguments to create many BancosPadroesVans.
     * @example
     * // Create many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancosPadroesVanCreateManyArgs>(args?: SelectSubset<T, BancosPadroesVanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BancosPadroesVans and returns the data saved in the database.
     * @param {BancosPadroesVanCreateManyAndReturnArgs} args - Arguments to create many BancosPadroesVans.
     * @example
     * // Create many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BancosPadroesVans and only return the `id`
     * const bancosPadroesVanWithIdOnly = await prisma.bancosPadroesVan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancosPadroesVanCreateManyAndReturnArgs>(args?: SelectSubset<T, BancosPadroesVanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BancosPadroesVan.
     * @param {BancosPadroesVanDeleteArgs} args - Arguments to delete one BancosPadroesVan.
     * @example
     * // Delete one BancosPadroesVan
     * const BancosPadroesVan = await prisma.bancosPadroesVan.delete({
     *   where: {
     *     // ... filter to delete one BancosPadroesVan
     *   }
     * })
     * 
     */
    delete<T extends BancosPadroesVanDeleteArgs>(args: SelectSubset<T, BancosPadroesVanDeleteArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BancosPadroesVan.
     * @param {BancosPadroesVanUpdateArgs} args - Arguments to update one BancosPadroesVan.
     * @example
     * // Update one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancosPadroesVanUpdateArgs>(args: SelectSubset<T, BancosPadroesVanUpdateArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BancosPadroesVans.
     * @param {BancosPadroesVanDeleteManyArgs} args - Arguments to filter BancosPadroesVans to delete.
     * @example
     * // Delete a few BancosPadroesVans
     * const { count } = await prisma.bancosPadroesVan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancosPadroesVanDeleteManyArgs>(args?: SelectSubset<T, BancosPadroesVanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosPadroesVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancosPadroesVanUpdateManyArgs>(args: SelectSubset<T, BancosPadroesVanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosPadroesVans and returns the data updated in the database.
     * @param {BancosPadroesVanUpdateManyAndReturnArgs} args - Arguments to update many BancosPadroesVans.
     * @example
     * // Update many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BancosPadroesVans and only return the `id`
     * const bancosPadroesVanWithIdOnly = await prisma.bancosPadroesVan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancosPadroesVanUpdateManyAndReturnArgs>(args: SelectSubset<T, BancosPadroesVanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BancosPadroesVan.
     * @param {BancosPadroesVanUpsertArgs} args - Arguments to update or create a BancosPadroesVan.
     * @example
     * // Update or create a BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.upsert({
     *   create: {
     *     // ... data to create a BancosPadroesVan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BancosPadroesVan we want to update
     *   }
     * })
     */
    upsert<T extends BancosPadroesVanUpsertArgs>(args: SelectSubset<T, BancosPadroesVanUpsertArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BancosPadroesVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanCountArgs} args - Arguments to filter BancosPadroesVans to count.
     * @example
     * // Count the number of BancosPadroesVans
     * const count = await prisma.bancosPadroesVan.count({
     *   where: {
     *     // ... the filter for the BancosPadroesVans we want to count
     *   }
     * })
    **/
    count<T extends BancosPadroesVanCountArgs>(
      args?: Subset<T, BancosPadroesVanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancosPadroesVanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BancosPadroesVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancosPadroesVanAggregateArgs>(args: Subset<T, BancosPadroesVanAggregateArgs>): Prisma.PrismaPromise<GetBancosPadroesVanAggregateType<T>>

    /**
     * Group by BancosPadroesVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancosPadroesVanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancosPadroesVanGroupByArgs['orderBy'] }
        : { orderBy?: BancosPadroesVanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancosPadroesVanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancosPadroesVanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BancosPadroesVan model
   */
  readonly fields: BancosPadroesVanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BancosPadroesVan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancosPadroesVanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    padraoVan<T extends PadraoVanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PadraoVanDefaultArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BancosPadroesVan model
   */ 
  interface BancosPadroesVanFieldRefs {
    readonly id: FieldRef<"BancosPadroesVan", 'Int'>
    readonly bancoId: FieldRef<"BancosPadroesVan", 'Int'>
    readonly padraoVanId: FieldRef<"BancosPadroesVan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BancosPadroesVan findUnique
   */
  export type BancosPadroesVanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan findUniqueOrThrow
   */
  export type BancosPadroesVanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan findFirst
   */
  export type BancosPadroesVanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosPadroesVans.
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosPadroesVans.
     */
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * BancosPadroesVan findFirstOrThrow
   */
  export type BancosPadroesVanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosPadroesVans.
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosPadroesVans.
     */
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * BancosPadroesVan findMany
   */
  export type BancosPadroesVanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVans to fetch.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BancosPadroesVans.
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * BancosPadroesVan create
   */
  export type BancosPadroesVanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * The data needed to create a BancosPadroesVan.
     */
    data: XOR<BancosPadroesVanCreateInput, BancosPadroesVanUncheckedCreateInput>
  }

  /**
   * BancosPadroesVan createMany
   */
  export type BancosPadroesVanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BancosPadroesVans.
     */
    data: BancosPadroesVanCreateManyInput | BancosPadroesVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BancosPadroesVan createManyAndReturn
   */
  export type BancosPadroesVanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * The data used to create many BancosPadroesVans.
     */
    data: BancosPadroesVanCreateManyInput | BancosPadroesVanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosPadroesVan update
   */
  export type BancosPadroesVanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * The data needed to update a BancosPadroesVan.
     */
    data: XOR<BancosPadroesVanUpdateInput, BancosPadroesVanUncheckedUpdateInput>
    /**
     * Choose, which BancosPadroesVan to update.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan updateMany
   */
  export type BancosPadroesVanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BancosPadroesVans.
     */
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyInput>
    /**
     * Filter which BancosPadroesVans to update
     */
    where?: BancosPadroesVanWhereInput
    /**
     * Limit how many BancosPadroesVans to update.
     */
    limit?: number
  }

  /**
   * BancosPadroesVan updateManyAndReturn
   */
  export type BancosPadroesVanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * The data used to update BancosPadroesVans.
     */
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyInput>
    /**
     * Filter which BancosPadroesVans to update
     */
    where?: BancosPadroesVanWhereInput
    /**
     * Limit how many BancosPadroesVans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosPadroesVan upsert
   */
  export type BancosPadroesVanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * The filter to search for the BancosPadroesVan to update in case it exists.
     */
    where: BancosPadroesVanWhereUniqueInput
    /**
     * In case the BancosPadroesVan found by the `where` argument doesn't exist, create a new BancosPadroesVan with this data.
     */
    create: XOR<BancosPadroesVanCreateInput, BancosPadroesVanUncheckedCreateInput>
    /**
     * In case the BancosPadroesVan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancosPadroesVanUpdateInput, BancosPadroesVanUncheckedUpdateInput>
  }

  /**
   * BancosPadroesVan delete
   */
  export type BancosPadroesVanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter which BancosPadroesVan to delete.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan deleteMany
   */
  export type BancosPadroesVanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosPadroesVans to delete
     */
    where?: BancosPadroesVanWhereInput
    /**
     * Limit how many BancosPadroesVans to delete.
     */
    limit?: number
  }

  /**
   * BancosPadroesVan without action
   */
  export type BancosPadroesVanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
  }


  /**
   * Model Cnab
   */

  export type AggregateCnab = {
    _count: CnabCountAggregateOutputType | null
    _avg: CnabAvgAggregateOutputType | null
    _sum: CnabSumAggregateOutputType | null
    _min: CnabMinAggregateOutputType | null
    _max: CnabMaxAggregateOutputType | null
  }

  export type CnabAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
  }

  export type CnabSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
  }

  export type CnabMinAggregateOutputType = {
    id: number | null
    bancoId: number | null
    cnab240: boolean | null
    cnab400: boolean | null
    cnab444: boolean | null
  }

  export type CnabMaxAggregateOutputType = {
    id: number | null
    bancoId: number | null
    cnab240: boolean | null
    cnab400: boolean | null
    cnab444: boolean | null
  }

  export type CnabCountAggregateOutputType = {
    id: number
    bancoId: number
    cnab240: number
    cnab400: number
    cnab444: number
    _all: number
  }


  export type CnabAvgAggregateInputType = {
    id?: true
    bancoId?: true
  }

  export type CnabSumAggregateInputType = {
    id?: true
    bancoId?: true
  }

  export type CnabMinAggregateInputType = {
    id?: true
    bancoId?: true
    cnab240?: true
    cnab400?: true
    cnab444?: true
  }

  export type CnabMaxAggregateInputType = {
    id?: true
    bancoId?: true
    cnab240?: true
    cnab400?: true
    cnab444?: true
  }

  export type CnabCountAggregateInputType = {
    id?: true
    bancoId?: true
    cnab240?: true
    cnab400?: true
    cnab444?: true
    _all?: true
  }

  export type CnabAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cnab to aggregate.
     */
    where?: CnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cnabs to fetch.
     */
    orderBy?: CnabOrderByWithRelationInput | CnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cnabs
    **/
    _count?: true | CnabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CnabAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CnabSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CnabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CnabMaxAggregateInputType
  }

  export type GetCnabAggregateType<T extends CnabAggregateArgs> = {
        [P in keyof T & keyof AggregateCnab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCnab[P]>
      : GetScalarType<T[P], AggregateCnab[P]>
  }




  export type CnabGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CnabWhereInput
    orderBy?: CnabOrderByWithAggregationInput | CnabOrderByWithAggregationInput[]
    by: CnabScalarFieldEnum[] | CnabScalarFieldEnum
    having?: CnabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CnabCountAggregateInputType | true
    _avg?: CnabAvgAggregateInputType
    _sum?: CnabSumAggregateInputType
    _min?: CnabMinAggregateInputType
    _max?: CnabMaxAggregateInputType
  }

  export type CnabGroupByOutputType = {
    id: number
    bancoId: number
    cnab240: boolean
    cnab400: boolean
    cnab444: boolean
    _count: CnabCountAggregateOutputType | null
    _avg: CnabAvgAggregateOutputType | null
    _sum: CnabSumAggregateOutputType | null
    _min: CnabMinAggregateOutputType | null
    _max: CnabMaxAggregateOutputType | null
  }

  type GetCnabGroupByPayload<T extends CnabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CnabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CnabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CnabGroupByOutputType[P]>
            : GetScalarType<T[P], CnabGroupByOutputType[P]>
        }
      >
    >


  export type CnabSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cnab"]>

  export type CnabSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cnab"]>

  export type CnabSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cnab"]>

  export type CnabSelectScalar = {
    id?: boolean
    bancoId?: boolean
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
  }

  export type CnabOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bancoId" | "cnab240" | "cnab400" | "cnab444", ExtArgs["result"]["cnab"]>
  export type CnabInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
  }
  export type CnabIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
  }
  export type CnabIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
  }

  export type $CnabPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cnab"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bancoId: number
      cnab240: boolean
      cnab400: boolean
      cnab444: boolean
    }, ExtArgs["result"]["cnab"]>
    composites: {}
  }

  type CnabGetPayload<S extends boolean | null | undefined | CnabDefaultArgs> = $Result.GetResult<Prisma.$CnabPayload, S>

  type CnabCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CnabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CnabCountAggregateInputType | true
    }

  export interface CnabDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cnab'], meta: { name: 'Cnab' } }
    /**
     * Find zero or one Cnab that matches the filter.
     * @param {CnabFindUniqueArgs} args - Arguments to find a Cnab
     * @example
     * // Get one Cnab
     * const cnab = await prisma.cnab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CnabFindUniqueArgs>(args: SelectSubset<T, CnabFindUniqueArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Cnab that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CnabFindUniqueOrThrowArgs} args - Arguments to find a Cnab
     * @example
     * // Get one Cnab
     * const cnab = await prisma.cnab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CnabFindUniqueOrThrowArgs>(args: SelectSubset<T, CnabFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Cnab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabFindFirstArgs} args - Arguments to find a Cnab
     * @example
     * // Get one Cnab
     * const cnab = await prisma.cnab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CnabFindFirstArgs>(args?: SelectSubset<T, CnabFindFirstArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Cnab that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabFindFirstOrThrowArgs} args - Arguments to find a Cnab
     * @example
     * // Get one Cnab
     * const cnab = await prisma.cnab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CnabFindFirstOrThrowArgs>(args?: SelectSubset<T, CnabFindFirstOrThrowArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Cnabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cnabs
     * const cnabs = await prisma.cnab.findMany()
     * 
     * // Get first 10 Cnabs
     * const cnabs = await prisma.cnab.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cnabWithIdOnly = await prisma.cnab.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CnabFindManyArgs>(args?: SelectSubset<T, CnabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Cnab.
     * @param {CnabCreateArgs} args - Arguments to create a Cnab.
     * @example
     * // Create one Cnab
     * const Cnab = await prisma.cnab.create({
     *   data: {
     *     // ... data to create a Cnab
     *   }
     * })
     * 
     */
    create<T extends CnabCreateArgs>(args: SelectSubset<T, CnabCreateArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Cnabs.
     * @param {CnabCreateManyArgs} args - Arguments to create many Cnabs.
     * @example
     * // Create many Cnabs
     * const cnab = await prisma.cnab.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CnabCreateManyArgs>(args?: SelectSubset<T, CnabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cnabs and returns the data saved in the database.
     * @param {CnabCreateManyAndReturnArgs} args - Arguments to create many Cnabs.
     * @example
     * // Create many Cnabs
     * const cnab = await prisma.cnab.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cnabs and only return the `id`
     * const cnabWithIdOnly = await prisma.cnab.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CnabCreateManyAndReturnArgs>(args?: SelectSubset<T, CnabCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Cnab.
     * @param {CnabDeleteArgs} args - Arguments to delete one Cnab.
     * @example
     * // Delete one Cnab
     * const Cnab = await prisma.cnab.delete({
     *   where: {
     *     // ... filter to delete one Cnab
     *   }
     * })
     * 
     */
    delete<T extends CnabDeleteArgs>(args: SelectSubset<T, CnabDeleteArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Cnab.
     * @param {CnabUpdateArgs} args - Arguments to update one Cnab.
     * @example
     * // Update one Cnab
     * const cnab = await prisma.cnab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CnabUpdateArgs>(args: SelectSubset<T, CnabUpdateArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Cnabs.
     * @param {CnabDeleteManyArgs} args - Arguments to filter Cnabs to delete.
     * @example
     * // Delete a few Cnabs
     * const { count } = await prisma.cnab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CnabDeleteManyArgs>(args?: SelectSubset<T, CnabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cnabs
     * const cnab = await prisma.cnab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CnabUpdateManyArgs>(args: SelectSubset<T, CnabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cnabs and returns the data updated in the database.
     * @param {CnabUpdateManyAndReturnArgs} args - Arguments to update many Cnabs.
     * @example
     * // Update many Cnabs
     * const cnab = await prisma.cnab.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cnabs and only return the `id`
     * const cnabWithIdOnly = await prisma.cnab.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CnabUpdateManyAndReturnArgs>(args: SelectSubset<T, CnabUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Cnab.
     * @param {CnabUpsertArgs} args - Arguments to update or create a Cnab.
     * @example
     * // Update or create a Cnab
     * const cnab = await prisma.cnab.upsert({
     *   create: {
     *     // ... data to create a Cnab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cnab we want to update
     *   }
     * })
     */
    upsert<T extends CnabUpsertArgs>(args: SelectSubset<T, CnabUpsertArgs<ExtArgs>>): Prisma__CnabClient<$Result.GetResult<Prisma.$CnabPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Cnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabCountArgs} args - Arguments to filter Cnabs to count.
     * @example
     * // Count the number of Cnabs
     * const count = await prisma.cnab.count({
     *   where: {
     *     // ... the filter for the Cnabs we want to count
     *   }
     * })
    **/
    count<T extends CnabCountArgs>(
      args?: Subset<T, CnabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CnabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cnab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CnabAggregateArgs>(args: Subset<T, CnabAggregateArgs>): Prisma.PrismaPromise<GetCnabAggregateType<T>>

    /**
     * Group by Cnab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CnabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CnabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CnabGroupByArgs['orderBy'] }
        : { orderBy?: CnabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CnabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCnabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cnab model
   */
  readonly fields: CnabFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cnab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CnabClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cnab model
   */ 
  interface CnabFieldRefs {
    readonly id: FieldRef<"Cnab", 'Int'>
    readonly bancoId: FieldRef<"Cnab", 'Int'>
    readonly cnab240: FieldRef<"Cnab", 'Boolean'>
    readonly cnab400: FieldRef<"Cnab", 'Boolean'>
    readonly cnab444: FieldRef<"Cnab", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Cnab findUnique
   */
  export type CnabFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * Filter, which Cnab to fetch.
     */
    where: CnabWhereUniqueInput
  }

  /**
   * Cnab findUniqueOrThrow
   */
  export type CnabFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * Filter, which Cnab to fetch.
     */
    where: CnabWhereUniqueInput
  }

  /**
   * Cnab findFirst
   */
  export type CnabFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * Filter, which Cnab to fetch.
     */
    where?: CnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cnabs to fetch.
     */
    orderBy?: CnabOrderByWithRelationInput | CnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cnabs.
     */
    cursor?: CnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cnabs.
     */
    distinct?: CnabScalarFieldEnum | CnabScalarFieldEnum[]
  }

  /**
   * Cnab findFirstOrThrow
   */
  export type CnabFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * Filter, which Cnab to fetch.
     */
    where?: CnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cnabs to fetch.
     */
    orderBy?: CnabOrderByWithRelationInput | CnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cnabs.
     */
    cursor?: CnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cnabs.
     */
    distinct?: CnabScalarFieldEnum | CnabScalarFieldEnum[]
  }

  /**
   * Cnab findMany
   */
  export type CnabFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * Filter, which Cnabs to fetch.
     */
    where?: CnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cnabs to fetch.
     */
    orderBy?: CnabOrderByWithRelationInput | CnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cnabs.
     */
    cursor?: CnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cnabs.
     */
    skip?: number
    distinct?: CnabScalarFieldEnum | CnabScalarFieldEnum[]
  }

  /**
   * Cnab create
   */
  export type CnabCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * The data needed to create a Cnab.
     */
    data: XOR<CnabCreateInput, CnabUncheckedCreateInput>
  }

  /**
   * Cnab createMany
   */
  export type CnabCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cnabs.
     */
    data: CnabCreateManyInput | CnabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cnab createManyAndReturn
   */
  export type CnabCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * The data used to create many Cnabs.
     */
    data: CnabCreateManyInput | CnabCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cnab update
   */
  export type CnabUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * The data needed to update a Cnab.
     */
    data: XOR<CnabUpdateInput, CnabUncheckedUpdateInput>
    /**
     * Choose, which Cnab to update.
     */
    where: CnabWhereUniqueInput
  }

  /**
   * Cnab updateMany
   */
  export type CnabUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cnabs.
     */
    data: XOR<CnabUpdateManyMutationInput, CnabUncheckedUpdateManyInput>
    /**
     * Filter which Cnabs to update
     */
    where?: CnabWhereInput
    /**
     * Limit how many Cnabs to update.
     */
    limit?: number
  }

  /**
   * Cnab updateManyAndReturn
   */
  export type CnabUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * The data used to update Cnabs.
     */
    data: XOR<CnabUpdateManyMutationInput, CnabUncheckedUpdateManyInput>
    /**
     * Filter which Cnabs to update
     */
    where?: CnabWhereInput
    /**
     * Limit how many Cnabs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cnab upsert
   */
  export type CnabUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * The filter to search for the Cnab to update in case it exists.
     */
    where: CnabWhereUniqueInput
    /**
     * In case the Cnab found by the `where` argument doesn't exist, create a new Cnab with this data.
     */
    create: XOR<CnabCreateInput, CnabUncheckedCreateInput>
    /**
     * In case the Cnab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CnabUpdateInput, CnabUncheckedUpdateInput>
  }

  /**
   * Cnab delete
   */
  export type CnabDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
    /**
     * Filter which Cnab to delete.
     */
    where: CnabWhereUniqueInput
  }

  /**
   * Cnab deleteMany
   */
  export type CnabDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cnabs to delete
     */
    where?: CnabWhereInput
    /**
     * Limit how many Cnabs to delete.
     */
    limit?: number
  }

  /**
   * Cnab without action
   */
  export type CnabDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cnab
     */
    select?: CnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cnab
     */
    omit?: CnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CnabInclude<ExtArgs> | null
  }


  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: number
    descricao: string
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    bancos?: boolean | Produto$bancosArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type ProdutoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao", ExtArgs["result"]["produto"]>
  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | Produto$bancosArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProdutoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProdutoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      bancos: Prisma.$BancosProdutosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }

  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoFindUniqueArgs>(args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Produto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoFindFirstArgs>(args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoFindManyArgs>(args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
     */
    create<T extends ProdutoCreateArgs>(args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Produtos.
     * @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCreateManyArgs>(args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produtos and returns the data saved in the database.
     * @param {ProdutoCreateManyAndReturnArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProdutoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProdutoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
     */
    delete<T extends ProdutoDeleteArgs>(args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoUpdateArgs>(args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoDeleteManyArgs>(args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoUpdateManyArgs>(args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos and returns the data updated in the database.
     * @param {ProdutoUpdateManyAndReturnArgs} args - Arguments to update many Produtos.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProdutoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProdutoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoUpsertArgs>(args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bancos<T extends Produto$bancosArgs<ExtArgs> = {}>(args?: Subset<T, Produto$bancosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produto model
   */ 
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'Int'>
    readonly descricao: FieldRef<"Produto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }

  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto createManyAndReturn
   */
  export type ProdutoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
  }

  /**
   * Produto updateManyAndReturn
   */
  export type ProdutoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
  }

  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }

  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to delete.
     */
    limit?: number
  }

  /**
   * Produto.bancos
   */
  export type Produto$bancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    where?: BancosProdutosWhereInput
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    cursor?: BancosProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
  }


  /**
   * Model BancosProdutos
   */

  export type AggregateBancosProdutos = {
    _count: BancosProdutosCountAggregateOutputType | null
    _avg: BancosProdutosAvgAggregateOutputType | null
    _sum: BancosProdutosSumAggregateOutputType | null
    _min: BancosProdutosMinAggregateOutputType | null
    _max: BancosProdutosMaxAggregateOutputType | null
  }

  export type BancosProdutosAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosMinAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosMaxAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosCountAggregateOutputType = {
    id: number
    bancoId: number
    produtoId: number
    _all: number
  }


  export type BancosProdutosAvgAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosSumAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosMinAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosMaxAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosCountAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
    _all?: true
  }

  export type BancosProdutosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosProdutos to aggregate.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BancosProdutos
    **/
    _count?: true | BancosProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancosProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancosProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancosProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancosProdutosMaxAggregateInputType
  }

  export type GetBancosProdutosAggregateType<T extends BancosProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateBancosProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBancosProdutos[P]>
      : GetScalarType<T[P], AggregateBancosProdutos[P]>
  }




  export type BancosProdutosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosProdutosWhereInput
    orderBy?: BancosProdutosOrderByWithAggregationInput | BancosProdutosOrderByWithAggregationInput[]
    by: BancosProdutosScalarFieldEnum[] | BancosProdutosScalarFieldEnum
    having?: BancosProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancosProdutosCountAggregateInputType | true
    _avg?: BancosProdutosAvgAggregateInputType
    _sum?: BancosProdutosSumAggregateInputType
    _min?: BancosProdutosMinAggregateInputType
    _max?: BancosProdutosMaxAggregateInputType
  }

  export type BancosProdutosGroupByOutputType = {
    id: number
    bancoId: number
    produtoId: number
    _count: BancosProdutosCountAggregateOutputType | null
    _avg: BancosProdutosAvgAggregateOutputType | null
    _sum: BancosProdutosSumAggregateOutputType | null
    _min: BancosProdutosMinAggregateOutputType | null
    _max: BancosProdutosMaxAggregateOutputType | null
  }

  type GetBancosProdutosGroupByPayload<T extends BancosProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancosProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancosProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancosProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], BancosProdutosGroupByOutputType[P]>
        }
      >
    >


  export type BancosProdutosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosProdutos"]>

  export type BancosProdutosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosProdutos"]>

  export type BancosProdutosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosProdutos"]>

  export type BancosProdutosSelectScalar = {
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
  }

  export type BancosProdutosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bancoId" | "produtoId", ExtArgs["result"]["bancosProdutos"]>
  export type BancosProdutosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }
  export type BancosProdutosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }
  export type BancosProdutosIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }

  export type $BancosProdutosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BancosProdutos"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
      produto: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bancoId: number
      produtoId: number
    }, ExtArgs["result"]["bancosProdutos"]>
    composites: {}
  }

  type BancosProdutosGetPayload<S extends boolean | null | undefined | BancosProdutosDefaultArgs> = $Result.GetResult<Prisma.$BancosProdutosPayload, S>

  type BancosProdutosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancosProdutosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancosProdutosCountAggregateInputType | true
    }

  export interface BancosProdutosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BancosProdutos'], meta: { name: 'BancosProdutos' } }
    /**
     * Find zero or one BancosProdutos that matches the filter.
     * @param {BancosProdutosFindUniqueArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancosProdutosFindUniqueArgs>(args: SelectSubset<T, BancosProdutosFindUniqueArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BancosProdutos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancosProdutosFindUniqueOrThrowArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancosProdutosFindUniqueOrThrowArgs>(args: SelectSubset<T, BancosProdutosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BancosProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosFindFirstArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancosProdutosFindFirstArgs>(args?: SelectSubset<T, BancosProdutosFindFirstArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BancosProdutos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosFindFirstOrThrowArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancosProdutosFindFirstOrThrowArgs>(args?: SelectSubset<T, BancosProdutosFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BancosProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findMany()
     * 
     * // Get first 10 BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancosProdutosWithIdOnly = await prisma.bancosProdutos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancosProdutosFindManyArgs>(args?: SelectSubset<T, BancosProdutosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BancosProdutos.
     * @param {BancosProdutosCreateArgs} args - Arguments to create a BancosProdutos.
     * @example
     * // Create one BancosProdutos
     * const BancosProdutos = await prisma.bancosProdutos.create({
     *   data: {
     *     // ... data to create a BancosProdutos
     *   }
     * })
     * 
     */
    create<T extends BancosProdutosCreateArgs>(args: SelectSubset<T, BancosProdutosCreateArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BancosProdutos.
     * @param {BancosProdutosCreateManyArgs} args - Arguments to create many BancosProdutos.
     * @example
     * // Create many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancosProdutosCreateManyArgs>(args?: SelectSubset<T, BancosProdutosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BancosProdutos and returns the data saved in the database.
     * @param {BancosProdutosCreateManyAndReturnArgs} args - Arguments to create many BancosProdutos.
     * @example
     * // Create many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BancosProdutos and only return the `id`
     * const bancosProdutosWithIdOnly = await prisma.bancosProdutos.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancosProdutosCreateManyAndReturnArgs>(args?: SelectSubset<T, BancosProdutosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BancosProdutos.
     * @param {BancosProdutosDeleteArgs} args - Arguments to delete one BancosProdutos.
     * @example
     * // Delete one BancosProdutos
     * const BancosProdutos = await prisma.bancosProdutos.delete({
     *   where: {
     *     // ... filter to delete one BancosProdutos
     *   }
     * })
     * 
     */
    delete<T extends BancosProdutosDeleteArgs>(args: SelectSubset<T, BancosProdutosDeleteArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BancosProdutos.
     * @param {BancosProdutosUpdateArgs} args - Arguments to update one BancosProdutos.
     * @example
     * // Update one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancosProdutosUpdateArgs>(args: SelectSubset<T, BancosProdutosUpdateArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BancosProdutos.
     * @param {BancosProdutosDeleteManyArgs} args - Arguments to filter BancosProdutos to delete.
     * @example
     * // Delete a few BancosProdutos
     * const { count } = await prisma.bancosProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancosProdutosDeleteManyArgs>(args?: SelectSubset<T, BancosProdutosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancosProdutosUpdateManyArgs>(args: SelectSubset<T, BancosProdutosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosProdutos and returns the data updated in the database.
     * @param {BancosProdutosUpdateManyAndReturnArgs} args - Arguments to update many BancosProdutos.
     * @example
     * // Update many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BancosProdutos and only return the `id`
     * const bancosProdutosWithIdOnly = await prisma.bancosProdutos.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancosProdutosUpdateManyAndReturnArgs>(args: SelectSubset<T, BancosProdutosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BancosProdutos.
     * @param {BancosProdutosUpsertArgs} args - Arguments to update or create a BancosProdutos.
     * @example
     * // Update or create a BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.upsert({
     *   create: {
     *     // ... data to create a BancosProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BancosProdutos we want to update
     *   }
     * })
     */
    upsert<T extends BancosProdutosUpsertArgs>(args: SelectSubset<T, BancosProdutosUpsertArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosCountArgs} args - Arguments to filter BancosProdutos to count.
     * @example
     * // Count the number of BancosProdutos
     * const count = await prisma.bancosProdutos.count({
     *   where: {
     *     // ... the filter for the BancosProdutos we want to count
     *   }
     * })
    **/
    count<T extends BancosProdutosCountArgs>(
      args?: Subset<T, BancosProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancosProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancosProdutosAggregateArgs>(args: Subset<T, BancosProdutosAggregateArgs>): Prisma.PrismaPromise<GetBancosProdutosAggregateType<T>>

    /**
     * Group by BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancosProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancosProdutosGroupByArgs['orderBy'] }
        : { orderBy?: BancosProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancosProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancosProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BancosProdutos model
   */
  readonly fields: BancosProdutosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BancosProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancosProdutosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    produto<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BancosProdutos model
   */ 
  interface BancosProdutosFieldRefs {
    readonly id: FieldRef<"BancosProdutos", 'Int'>
    readonly bancoId: FieldRef<"BancosProdutos", 'Int'>
    readonly produtoId: FieldRef<"BancosProdutos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BancosProdutos findUnique
   */
  export type BancosProdutosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos findUniqueOrThrow
   */
  export type BancosProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos findFirst
   */
  export type BancosProdutosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosProdutos.
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosProdutos.
     */
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * BancosProdutos findFirstOrThrow
   */
  export type BancosProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosProdutos.
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosProdutos.
     */
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * BancosProdutos findMany
   */
  export type BancosProdutosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BancosProdutos.
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * BancosProdutos create
   */
  export type BancosProdutosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * The data needed to create a BancosProdutos.
     */
    data: XOR<BancosProdutosCreateInput, BancosProdutosUncheckedCreateInput>
  }

  /**
   * BancosProdutos createMany
   */
  export type BancosProdutosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BancosProdutos.
     */
    data: BancosProdutosCreateManyInput | BancosProdutosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BancosProdutos createManyAndReturn
   */
  export type BancosProdutosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * The data used to create many BancosProdutos.
     */
    data: BancosProdutosCreateManyInput | BancosProdutosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosProdutos update
   */
  export type BancosProdutosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * The data needed to update a BancosProdutos.
     */
    data: XOR<BancosProdutosUpdateInput, BancosProdutosUncheckedUpdateInput>
    /**
     * Choose, which BancosProdutos to update.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos updateMany
   */
  export type BancosProdutosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BancosProdutos.
     */
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyInput>
    /**
     * Filter which BancosProdutos to update
     */
    where?: BancosProdutosWhereInput
    /**
     * Limit how many BancosProdutos to update.
     */
    limit?: number
  }

  /**
   * BancosProdutos updateManyAndReturn
   */
  export type BancosProdutosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * The data used to update BancosProdutos.
     */
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyInput>
    /**
     * Filter which BancosProdutos to update
     */
    where?: BancosProdutosWhereInput
    /**
     * Limit how many BancosProdutos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosProdutos upsert
   */
  export type BancosProdutosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * The filter to search for the BancosProdutos to update in case it exists.
     */
    where: BancosProdutosWhereUniqueInput
    /**
     * In case the BancosProdutos found by the `where` argument doesn't exist, create a new BancosProdutos with this data.
     */
    create: XOR<BancosProdutosCreateInput, BancosProdutosUncheckedCreateInput>
    /**
     * In case the BancosProdutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancosProdutosUpdateInput, BancosProdutosUncheckedUpdateInput>
  }

  /**
   * BancosProdutos delete
   */
  export type BancosProdutosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter which BancosProdutos to delete.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos deleteMany
   */
  export type BancosProdutosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosProdutos to delete
     */
    where?: BancosProdutosWhereInput
    /**
     * Limit how many BancosProdutos to delete.
     */
    limit?: number
  }

  /**
   * BancosProdutos without action
   */
  export type BancosProdutosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BancoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type BancoScalarFieldEnum = (typeof BancoScalarFieldEnum)[keyof typeof BancoScalarFieldEnum]


  export const PadraoVanScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type PadraoVanScalarFieldEnum = (typeof PadraoVanScalarFieldEnum)[keyof typeof PadraoVanScalarFieldEnum]


  export const BancosPadroesVanScalarFieldEnum: {
    id: 'id',
    bancoId: 'bancoId',
    padraoVanId: 'padraoVanId'
  };

  export type BancosPadroesVanScalarFieldEnum = (typeof BancosPadroesVanScalarFieldEnum)[keyof typeof BancosPadroesVanScalarFieldEnum]


  export const CnabScalarFieldEnum: {
    id: 'id',
    bancoId: 'bancoId',
    cnab240: 'cnab240',
    cnab400: 'cnab400',
    cnab444: 'cnab444'
  };

  export type CnabScalarFieldEnum = (typeof CnabScalarFieldEnum)[keyof typeof CnabScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const BancosProdutosScalarFieldEnum: {
    id: 'id',
    bancoId: 'bancoId',
    produtoId: 'produtoId'
  };

  export type BancosProdutosScalarFieldEnum = (typeof BancosProdutosScalarFieldEnum)[keyof typeof BancosProdutosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type BancoWhereInput = {
    AND?: BancoWhereInput | BancoWhereInput[]
    OR?: BancoWhereInput[]
    NOT?: BancoWhereInput | BancoWhereInput[]
    id?: IntFilter<"Banco"> | number
    nome?: StringFilter<"Banco"> | string
    padroesVan?: BancosPadroesVanListRelationFilter
    cnabs?: XOR<CnabNullableScalarRelationFilter, CnabWhereInput> | null
    produtos?: BancosProdutosListRelationFilter
  }

  export type BancoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    padroesVan?: BancosPadroesVanOrderByRelationAggregateInput
    cnabs?: CnabOrderByWithRelationInput
    produtos?: BancosProdutosOrderByRelationAggregateInput
  }

  export type BancoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BancoWhereInput | BancoWhereInput[]
    OR?: BancoWhereInput[]
    NOT?: BancoWhereInput | BancoWhereInput[]
    nome?: StringFilter<"Banco"> | string
    padroesVan?: BancosPadroesVanListRelationFilter
    cnabs?: XOR<CnabNullableScalarRelationFilter, CnabWhereInput> | null
    produtos?: BancosProdutosListRelationFilter
  }, "id">

  export type BancoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: BancoCountOrderByAggregateInput
    _avg?: BancoAvgOrderByAggregateInput
    _max?: BancoMaxOrderByAggregateInput
    _min?: BancoMinOrderByAggregateInput
    _sum?: BancoSumOrderByAggregateInput
  }

  export type BancoScalarWhereWithAggregatesInput = {
    AND?: BancoScalarWhereWithAggregatesInput | BancoScalarWhereWithAggregatesInput[]
    OR?: BancoScalarWhereWithAggregatesInput[]
    NOT?: BancoScalarWhereWithAggregatesInput | BancoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Banco"> | number
    nome?: StringWithAggregatesFilter<"Banco"> | string
  }

  export type PadraoVanWhereInput = {
    AND?: PadraoVanWhereInput | PadraoVanWhereInput[]
    OR?: PadraoVanWhereInput[]
    NOT?: PadraoVanWhereInput | PadraoVanWhereInput[]
    id?: IntFilter<"PadraoVan"> | number
    descricao?: StringFilter<"PadraoVan"> | string
    bancos?: BancosPadroesVanListRelationFilter
  }

  export type PadraoVanOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    bancos?: BancosPadroesVanOrderByRelationAggregateInput
  }

  export type PadraoVanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    descricao?: string
    AND?: PadraoVanWhereInput | PadraoVanWhereInput[]
    OR?: PadraoVanWhereInput[]
    NOT?: PadraoVanWhereInput | PadraoVanWhereInput[]
    bancos?: BancosPadroesVanListRelationFilter
  }, "id" | "descricao">

  export type PadraoVanOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: PadraoVanCountOrderByAggregateInput
    _avg?: PadraoVanAvgOrderByAggregateInput
    _max?: PadraoVanMaxOrderByAggregateInput
    _min?: PadraoVanMinOrderByAggregateInput
    _sum?: PadraoVanSumOrderByAggregateInput
  }

  export type PadraoVanScalarWhereWithAggregatesInput = {
    AND?: PadraoVanScalarWhereWithAggregatesInput | PadraoVanScalarWhereWithAggregatesInput[]
    OR?: PadraoVanScalarWhereWithAggregatesInput[]
    NOT?: PadraoVanScalarWhereWithAggregatesInput | PadraoVanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PadraoVan"> | number
    descricao?: StringWithAggregatesFilter<"PadraoVan"> | string
  }

  export type BancosPadroesVanWhereInput = {
    AND?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    OR?: BancosPadroesVanWhereInput[]
    NOT?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    id?: IntFilter<"BancosPadroesVan"> | number
    bancoId?: IntFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntFilter<"BancosPadroesVan"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    padraoVan?: XOR<PadraoVanScalarRelationFilter, PadraoVanWhereInput>
  }

  export type BancosPadroesVanOrderByWithRelationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
    banco?: BancoOrderByWithRelationInput
    padraoVan?: PadraoVanOrderByWithRelationInput
  }

  export type BancosPadroesVanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bancoId_padraoVanId?: BancosPadroesVanBancoIdPadraoVanIdCompoundUniqueInput
    AND?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    OR?: BancosPadroesVanWhereInput[]
    NOT?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    bancoId?: IntFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntFilter<"BancosPadroesVan"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    padraoVan?: XOR<PadraoVanScalarRelationFilter, PadraoVanWhereInput>
  }, "id" | "bancoId_padraoVanId">

  export type BancosPadroesVanOrderByWithAggregationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
    _count?: BancosPadroesVanCountOrderByAggregateInput
    _avg?: BancosPadroesVanAvgOrderByAggregateInput
    _max?: BancosPadroesVanMaxOrderByAggregateInput
    _min?: BancosPadroesVanMinOrderByAggregateInput
    _sum?: BancosPadroesVanSumOrderByAggregateInput
  }

  export type BancosPadroesVanScalarWhereWithAggregatesInput = {
    AND?: BancosPadroesVanScalarWhereWithAggregatesInput | BancosPadroesVanScalarWhereWithAggregatesInput[]
    OR?: BancosPadroesVanScalarWhereWithAggregatesInput[]
    NOT?: BancosPadroesVanScalarWhereWithAggregatesInput | BancosPadroesVanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BancosPadroesVan"> | number
    bancoId?: IntWithAggregatesFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntWithAggregatesFilter<"BancosPadroesVan"> | number
  }

  export type CnabWhereInput = {
    AND?: CnabWhereInput | CnabWhereInput[]
    OR?: CnabWhereInput[]
    NOT?: CnabWhereInput | CnabWhereInput[]
    id?: IntFilter<"Cnab"> | number
    bancoId?: IntFilter<"Cnab"> | number
    cnab240?: BoolFilter<"Cnab"> | boolean
    cnab400?: BoolFilter<"Cnab"> | boolean
    cnab444?: BoolFilter<"Cnab"> | boolean
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
  }

  export type CnabOrderByWithRelationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnab240?: SortOrder
    cnab400?: SortOrder
    cnab444?: SortOrder
    banco?: BancoOrderByWithRelationInput
  }

  export type CnabWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bancoId?: number
    AND?: CnabWhereInput | CnabWhereInput[]
    OR?: CnabWhereInput[]
    NOT?: CnabWhereInput | CnabWhereInput[]
    cnab240?: BoolFilter<"Cnab"> | boolean
    cnab400?: BoolFilter<"Cnab"> | boolean
    cnab444?: BoolFilter<"Cnab"> | boolean
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
  }, "id" | "bancoId">

  export type CnabOrderByWithAggregationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnab240?: SortOrder
    cnab400?: SortOrder
    cnab444?: SortOrder
    _count?: CnabCountOrderByAggregateInput
    _avg?: CnabAvgOrderByAggregateInput
    _max?: CnabMaxOrderByAggregateInput
    _min?: CnabMinOrderByAggregateInput
    _sum?: CnabSumOrderByAggregateInput
  }

  export type CnabScalarWhereWithAggregatesInput = {
    AND?: CnabScalarWhereWithAggregatesInput | CnabScalarWhereWithAggregatesInput[]
    OR?: CnabScalarWhereWithAggregatesInput[]
    NOT?: CnabScalarWhereWithAggregatesInput | CnabScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cnab"> | number
    bancoId?: IntWithAggregatesFilter<"Cnab"> | number
    cnab240?: BoolWithAggregatesFilter<"Cnab"> | boolean
    cnab400?: BoolWithAggregatesFilter<"Cnab"> | boolean
    cnab444?: BoolWithAggregatesFilter<"Cnab"> | boolean
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: IntFilter<"Produto"> | number
    descricao?: StringFilter<"Produto"> | string
    bancos?: BancosProdutosListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    bancos?: BancosProdutosOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    descricao?: string
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    bancos?: BancosProdutosListRelationFilter
  }, "id" | "descricao">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produto"> | number
    descricao?: StringWithAggregatesFilter<"Produto"> | string
  }

  export type BancosProdutosWhereInput = {
    AND?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    OR?: BancosProdutosWhereInput[]
    NOT?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    id?: IntFilter<"BancosProdutos"> | number
    bancoId?: IntFilter<"BancosProdutos"> | number
    produtoId?: IntFilter<"BancosProdutos"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    produto?: XOR<ProdutoScalarRelationFilter, ProdutoWhereInput>
  }

  export type BancosProdutosOrderByWithRelationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
    banco?: BancoOrderByWithRelationInput
    produto?: ProdutoOrderByWithRelationInput
  }

  export type BancosProdutosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bancoId_produtoId?: BancosProdutosBancoIdProdutoIdCompoundUniqueInput
    AND?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    OR?: BancosProdutosWhereInput[]
    NOT?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    bancoId?: IntFilter<"BancosProdutos"> | number
    produtoId?: IntFilter<"BancosProdutos"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    produto?: XOR<ProdutoScalarRelationFilter, ProdutoWhereInput>
  }, "id" | "bancoId_produtoId">

  export type BancosProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
    _count?: BancosProdutosCountOrderByAggregateInput
    _avg?: BancosProdutosAvgOrderByAggregateInput
    _max?: BancosProdutosMaxOrderByAggregateInput
    _min?: BancosProdutosMinOrderByAggregateInput
    _sum?: BancosProdutosSumOrderByAggregateInput
  }

  export type BancosProdutosScalarWhereWithAggregatesInput = {
    AND?: BancosProdutosScalarWhereWithAggregatesInput | BancosProdutosScalarWhereWithAggregatesInput[]
    OR?: BancosProdutosScalarWhereWithAggregatesInput[]
    NOT?: BancosProdutosScalarWhereWithAggregatesInput | BancosProdutosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BancosProdutos"> | number
    bancoId?: IntWithAggregatesFilter<"BancosProdutos"> | number
    produtoId?: IntWithAggregatesFilter<"BancosProdutos"> | number
  }

  export type BancoCreateInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    cnabs?: CnabCreateNestedOneWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    cnabs?: CnabUncheckedCreateNestedOneWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    cnabs?: CnabUpdateOneWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    cnabs?: CnabUncheckedUpdateOneWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type BancoCreateManyInput = {
    id?: number
    nome: string
  }

  export type BancoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type BancoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PadraoVanCreateInput = {
    descricao: string
    bancos?: BancosPadroesVanCreateNestedManyWithoutPadraoVanInput
  }

  export type PadraoVanUncheckedCreateInput = {
    id?: number
    descricao: string
    bancos?: BancosPadroesVanUncheckedCreateNestedManyWithoutPadraoVanInput
  }

  export type PadraoVanUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosPadroesVanUpdateManyWithoutPadraoVanNestedInput
  }

  export type PadraoVanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanNestedInput
  }

  export type PadraoVanCreateManyInput = {
    id?: number
    descricao: string
  }

  export type PadraoVanUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type PadraoVanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosPadroesVanCreateInput = {
    banco: BancoCreateNestedOneWithoutPadroesVanInput
    padraoVan: PadraoVanCreateNestedOneWithoutBancosInput
  }

  export type BancosPadroesVanUncheckedCreateInput = {
    id?: number
    bancoId: number
    padraoVanId: number
  }

  export type BancosPadroesVanUpdateInput = {
    banco?: BancoUpdateOneRequiredWithoutPadroesVanNestedInput
    padraoVan?: PadraoVanUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosPadroesVanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanCreateManyInput = {
    id?: number
    bancoId: number
    padraoVanId: number
  }

  export type BancosPadroesVanUpdateManyMutationInput = {

  }

  export type BancosPadroesVanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type CnabCreateInput = {
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
    banco: BancoCreateNestedOneWithoutCnabsInput
  }

  export type CnabUncheckedCreateInput = {
    id?: number
    bancoId: number
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
  }

  export type CnabUpdateInput = {
    cnab240?: BoolFieldUpdateOperationsInput | boolean
    cnab400?: BoolFieldUpdateOperationsInput | boolean
    cnab444?: BoolFieldUpdateOperationsInput | boolean
    banco?: BancoUpdateOneRequiredWithoutCnabsNestedInput
  }

  export type CnabUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    cnab240?: BoolFieldUpdateOperationsInput | boolean
    cnab400?: BoolFieldUpdateOperationsInput | boolean
    cnab444?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CnabCreateManyInput = {
    id?: number
    bancoId: number
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
  }

  export type CnabUpdateManyMutationInput = {
    cnab240?: BoolFieldUpdateOperationsInput | boolean
    cnab400?: BoolFieldUpdateOperationsInput | boolean
    cnab444?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CnabUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    cnab240?: BoolFieldUpdateOperationsInput | boolean
    cnab400?: BoolFieldUpdateOperationsInput | boolean
    cnab444?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoCreateInput = {
    descricao: string
    bancos?: BancosProdutosCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: number
    descricao: string
    bancos?: BancosProdutosUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosProdutosUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosProdutosUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoCreateManyInput = {
    id?: number
    descricao: string
  }

  export type ProdutoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosProdutosCreateInput = {
    banco: BancoCreateNestedOneWithoutProdutosInput
    produto: ProdutoCreateNestedOneWithoutBancosInput
  }

  export type BancosProdutosUncheckedCreateInput = {
    id?: number
    bancoId: number
    produtoId: number
  }

  export type BancosProdutosUpdateInput = {
    banco?: BancoUpdateOneRequiredWithoutProdutosNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosCreateManyInput = {
    id?: number
    bancoId: number
    produtoId: number
  }

  export type BancosProdutosUpdateManyMutationInput = {

  }

  export type BancosProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BancosPadroesVanListRelationFilter = {
    every?: BancosPadroesVanWhereInput
    some?: BancosPadroesVanWhereInput
    none?: BancosPadroesVanWhereInput
  }

  export type CnabNullableScalarRelationFilter = {
    is?: CnabWhereInput | null
    isNot?: CnabWhereInput | null
  }

  export type BancosProdutosListRelationFilter = {
    every?: BancosProdutosWhereInput
    some?: BancosProdutosWhereInput
    none?: BancosProdutosWhereInput
  }

  export type BancosPadroesVanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BancosProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BancoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type BancoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type BancoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type BancoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type PadraoVanCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type PadraoVanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PadraoVanMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type PadraoVanMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type PadraoVanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancoScalarRelationFilter = {
    is?: BancoWhereInput
    isNot?: BancoWhereInput
  }

  export type PadraoVanScalarRelationFilter = {
    is?: PadraoVanWhereInput
    isNot?: PadraoVanWhereInput
  }

  export type BancosPadroesVanBancoIdPadraoVanIdCompoundUniqueInput = {
    bancoId: number
    padraoVanId: number
  }

  export type BancosPadroesVanCountOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanMaxOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanMinOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CnabCountOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnab240?: SortOrder
    cnab400?: SortOrder
    cnab444?: SortOrder
  }

  export type CnabAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
  }

  export type CnabMaxOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnab240?: SortOrder
    cnab400?: SortOrder
    cnab444?: SortOrder
  }

  export type CnabMinOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnab240?: SortOrder
    cnab400?: SortOrder
    cnab444?: SortOrder
  }

  export type CnabSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutoScalarRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type BancosProdutosBancoIdProdutoIdCompoundUniqueInput = {
    bancoId: number
    produtoId: number
  }

  export type BancosProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosPadroesVanCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type CnabCreateNestedOneWithoutBancoInput = {
    create?: XOR<CnabCreateWithoutBancoInput, CnabUncheckedCreateWithoutBancoInput>
    connectOrCreate?: CnabCreateOrConnectWithoutBancoInput
    connect?: CnabWhereUniqueInput
  }

  export type BancosProdutosCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type CnabUncheckedCreateNestedOneWithoutBancoInput = {
    create?: XOR<CnabCreateWithoutBancoInput, CnabUncheckedCreateWithoutBancoInput>
    connectOrCreate?: CnabCreateOrConnectWithoutBancoInput
    connect?: CnabWhereUniqueInput
  }

  export type BancosProdutosUncheckedCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BancosPadroesVanUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutBancoInput | BancosPadroesVanUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type CnabUpdateOneWithoutBancoNestedInput = {
    create?: XOR<CnabCreateWithoutBancoInput, CnabUncheckedCreateWithoutBancoInput>
    connectOrCreate?: CnabCreateOrConnectWithoutBancoInput
    upsert?: CnabUpsertWithoutBancoInput
    disconnect?: CnabWhereInput | boolean
    delete?: CnabWhereInput | boolean
    connect?: CnabWhereUniqueInput
    update?: XOR<XOR<CnabUpdateToOneWithWhereWithoutBancoInput, CnabUpdateWithoutBancoInput>, CnabUncheckedUpdateWithoutBancoInput>
  }

  export type BancosProdutosUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutBancoInput | BancosProdutosUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutBancoInput | BancosProdutosUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutBancoInput | BancosProdutosUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutBancoInput | BancosPadroesVanUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type CnabUncheckedUpdateOneWithoutBancoNestedInput = {
    create?: XOR<CnabCreateWithoutBancoInput, CnabUncheckedCreateWithoutBancoInput>
    connectOrCreate?: CnabCreateOrConnectWithoutBancoInput
    upsert?: CnabUpsertWithoutBancoInput
    disconnect?: CnabWhereInput | boolean
    delete?: CnabWhereInput | boolean
    connect?: CnabWhereUniqueInput
    update?: XOR<XOR<CnabUpdateToOneWithWhereWithoutBancoInput, CnabUpdateWithoutBancoInput>, CnabUncheckedUpdateWithoutBancoInput>
  }

  export type BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutBancoInput | BancosProdutosUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutBancoInput | BancosProdutosUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutBancoInput | BancosProdutosUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type BancosPadroesVanCreateNestedManyWithoutPadraoVanInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type BancosPadroesVanUncheckedCreateNestedManyWithoutPadraoVanInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type BancosPadroesVanUpdateManyWithoutPadraoVanNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput | BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput | BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type BancoCreateNestedOneWithoutPadroesVanInput = {
    create?: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
    connectOrCreate?: BancoCreateOrConnectWithoutPadroesVanInput
    connect?: BancoWhereUniqueInput
  }

  export type PadraoVanCreateNestedOneWithoutBancosInput = {
    create?: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
    connectOrCreate?: PadraoVanCreateOrConnectWithoutBancosInput
    connect?: PadraoVanWhereUniqueInput
  }

  export type BancoUpdateOneRequiredWithoutPadroesVanNestedInput = {
    create?: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
    connectOrCreate?: BancoCreateOrConnectWithoutPadroesVanInput
    upsert?: BancoUpsertWithoutPadroesVanInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutPadroesVanInput, BancoUpdateWithoutPadroesVanInput>, BancoUncheckedUpdateWithoutPadroesVanInput>
  }

  export type PadraoVanUpdateOneRequiredWithoutBancosNestedInput = {
    create?: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
    connectOrCreate?: PadraoVanCreateOrConnectWithoutBancosInput
    upsert?: PadraoVanUpsertWithoutBancosInput
    connect?: PadraoVanWhereUniqueInput
    update?: XOR<XOR<PadraoVanUpdateToOneWithWhereWithoutBancosInput, PadraoVanUpdateWithoutBancosInput>, PadraoVanUncheckedUpdateWithoutBancosInput>
  }

  export type BancoCreateNestedOneWithoutCnabsInput = {
    create?: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
    connectOrCreate?: BancoCreateOrConnectWithoutCnabsInput
    connect?: BancoWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BancoUpdateOneRequiredWithoutCnabsNestedInput = {
    create?: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
    connectOrCreate?: BancoCreateOrConnectWithoutCnabsInput
    upsert?: BancoUpsertWithoutCnabsInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutCnabsInput, BancoUpdateWithoutCnabsInput>, BancoUncheckedUpdateWithoutCnabsInput>
  }

  export type BancosProdutosCreateNestedManyWithoutProdutoInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type BancosProdutosUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type BancosProdutosUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput | BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput | BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutProdutoInput | BancosProdutosUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type BancosProdutosUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput | BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput | BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutProdutoInput | BancosProdutosUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type BancoCreateNestedOneWithoutProdutosInput = {
    create?: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: BancoCreateOrConnectWithoutProdutosInput
    connect?: BancoWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutBancosInput = {
    create?: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutBancosInput
    connect?: ProdutoWhereUniqueInput
  }

  export type BancoUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: BancoCreateOrConnectWithoutProdutosInput
    upsert?: BancoUpsertWithoutProdutosInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutProdutosInput, BancoUpdateWithoutProdutosInput>, BancoUncheckedUpdateWithoutProdutosInput>
  }

  export type ProdutoUpdateOneRequiredWithoutBancosNestedInput = {
    create?: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutBancosInput
    upsert?: ProdutoUpsertWithoutBancosInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutBancosInput, ProdutoUpdateWithoutBancosInput>, ProdutoUncheckedUpdateWithoutBancosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BancosPadroesVanCreateWithoutBancoInput = {
    padraoVan: PadraoVanCreateNestedOneWithoutBancosInput
  }

  export type BancosPadroesVanUncheckedCreateWithoutBancoInput = {
    id?: number
    padraoVanId: number
  }

  export type BancosPadroesVanCreateOrConnectWithoutBancoInput = {
    where: BancosPadroesVanWhereUniqueInput
    create: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput>
  }

  export type BancosPadroesVanCreateManyBancoInputEnvelope = {
    data: BancosPadroesVanCreateManyBancoInput | BancosPadroesVanCreateManyBancoInput[]
    skipDuplicates?: boolean
  }

  export type CnabCreateWithoutBancoInput = {
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
  }

  export type CnabUncheckedCreateWithoutBancoInput = {
    id?: number
    cnab240?: boolean
    cnab400?: boolean
    cnab444?: boolean
  }

  export type CnabCreateOrConnectWithoutBancoInput = {
    where: CnabWhereUniqueInput
    create: XOR<CnabCreateWithoutBancoInput, CnabUncheckedCreateWithoutBancoInput>
  }

  export type BancosProdutosCreateWithoutBancoInput = {
    produto: ProdutoCreateNestedOneWithoutBancosInput
  }

  export type BancosProdutosUncheckedCreateWithoutBancoInput = {
    id?: number
    produtoId: number
  }

  export type BancosProdutosCreateOrConnectWithoutBancoInput = {
    where: BancosProdutosWhereUniqueInput
    create: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput>
  }

  export type BancosProdutosCreateManyBancoInputEnvelope = {
    data: BancosProdutosCreateManyBancoInput | BancosProdutosCreateManyBancoInput[]
    skipDuplicates?: boolean
  }

  export type BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput = {
    where: BancosPadroesVanWhereUniqueInput
    update: XOR<BancosPadroesVanUpdateWithoutBancoInput, BancosPadroesVanUncheckedUpdateWithoutBancoInput>
    create: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput>
  }

  export type BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput = {
    where: BancosPadroesVanWhereUniqueInput
    data: XOR<BancosPadroesVanUpdateWithoutBancoInput, BancosPadroesVanUncheckedUpdateWithoutBancoInput>
  }

  export type BancosPadroesVanUpdateManyWithWhereWithoutBancoInput = {
    where: BancosPadroesVanScalarWhereInput
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyWithoutBancoInput>
  }

  export type BancosPadroesVanScalarWhereInput = {
    AND?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
    OR?: BancosPadroesVanScalarWhereInput[]
    NOT?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
    id?: IntFilter<"BancosPadroesVan"> | number
    bancoId?: IntFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntFilter<"BancosPadroesVan"> | number
  }

  export type CnabUpsertWithoutBancoInput = {
    update: XOR<CnabUpdateWithoutBancoInput, CnabUncheckedUpdateWithoutBancoInput>
    create: XOR<CnabCreateWithoutBancoInput, CnabUncheckedCreateWithoutBancoInput>
    where?: CnabWhereInput
  }

  export type CnabUpdateToOneWithWhereWithoutBancoInput = {
    where?: CnabWhereInput
    data: XOR<CnabUpdateWithoutBancoInput, CnabUncheckedUpdateWithoutBancoInput>
  }

  export type CnabUpdateWithoutBancoInput = {
    cnab240?: BoolFieldUpdateOperationsInput | boolean
    cnab400?: BoolFieldUpdateOperationsInput | boolean
    cnab444?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CnabUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnab240?: BoolFieldUpdateOperationsInput | boolean
    cnab400?: BoolFieldUpdateOperationsInput | boolean
    cnab444?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BancosProdutosUpsertWithWhereUniqueWithoutBancoInput = {
    where: BancosProdutosWhereUniqueInput
    update: XOR<BancosProdutosUpdateWithoutBancoInput, BancosProdutosUncheckedUpdateWithoutBancoInput>
    create: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput>
  }

  export type BancosProdutosUpdateWithWhereUniqueWithoutBancoInput = {
    where: BancosProdutosWhereUniqueInput
    data: XOR<BancosProdutosUpdateWithoutBancoInput, BancosProdutosUncheckedUpdateWithoutBancoInput>
  }

  export type BancosProdutosUpdateManyWithWhereWithoutBancoInput = {
    where: BancosProdutosScalarWhereInput
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyWithoutBancoInput>
  }

  export type BancosProdutosScalarWhereInput = {
    AND?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
    OR?: BancosProdutosScalarWhereInput[]
    NOT?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
    id?: IntFilter<"BancosProdutos"> | number
    bancoId?: IntFilter<"BancosProdutos"> | number
    produtoId?: IntFilter<"BancosProdutos"> | number
  }

  export type BancosPadroesVanCreateWithoutPadraoVanInput = {
    banco: BancoCreateNestedOneWithoutPadroesVanInput
  }

  export type BancosPadroesVanUncheckedCreateWithoutPadraoVanInput = {
    id?: number
    bancoId: number
  }

  export type BancosPadroesVanCreateOrConnectWithoutPadraoVanInput = {
    where: BancosPadroesVanWhereUniqueInput
    create: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput>
  }

  export type BancosPadroesVanCreateManyPadraoVanInputEnvelope = {
    data: BancosPadroesVanCreateManyPadraoVanInput | BancosPadroesVanCreateManyPadraoVanInput[]
    skipDuplicates?: boolean
  }

  export type BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput = {
    where: BancosPadroesVanWhereUniqueInput
    update: XOR<BancosPadroesVanUpdateWithoutPadraoVanInput, BancosPadroesVanUncheckedUpdateWithoutPadraoVanInput>
    create: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput>
  }

  export type BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput = {
    where: BancosPadroesVanWhereUniqueInput
    data: XOR<BancosPadroesVanUpdateWithoutPadraoVanInput, BancosPadroesVanUncheckedUpdateWithoutPadraoVanInput>
  }

  export type BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput = {
    where: BancosPadroesVanScalarWhereInput
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanInput>
  }

  export type BancoCreateWithoutPadroesVanInput = {
    nome: string
    cnabs?: CnabCreateNestedOneWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutPadroesVanInput = {
    id?: number
    nome: string
    cnabs?: CnabUncheckedCreateNestedOneWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutPadroesVanInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
  }

  export type PadraoVanCreateWithoutBancosInput = {
    descricao: string
  }

  export type PadraoVanUncheckedCreateWithoutBancosInput = {
    id?: number
    descricao: string
  }

  export type PadraoVanCreateOrConnectWithoutBancosInput = {
    where: PadraoVanWhereUniqueInput
    create: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
  }

  export type BancoUpsertWithoutPadroesVanInput = {
    update: XOR<BancoUpdateWithoutPadroesVanInput, BancoUncheckedUpdateWithoutPadroesVanInput>
    create: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutPadroesVanInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutPadroesVanInput, BancoUncheckedUpdateWithoutPadroesVanInput>
  }

  export type BancoUpdateWithoutPadroesVanInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cnabs?: CnabUpdateOneWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutPadroesVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cnabs?: CnabUncheckedUpdateOneWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type PadraoVanUpsertWithoutBancosInput = {
    update: XOR<PadraoVanUpdateWithoutBancosInput, PadraoVanUncheckedUpdateWithoutBancosInput>
    create: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
    where?: PadraoVanWhereInput
  }

  export type PadraoVanUpdateToOneWithWhereWithoutBancosInput = {
    where?: PadraoVanWhereInput
    data: XOR<PadraoVanUpdateWithoutBancosInput, PadraoVanUncheckedUpdateWithoutBancosInput>
  }

  export type PadraoVanUpdateWithoutBancosInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type PadraoVanUncheckedUpdateWithoutBancosInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancoCreateWithoutCnabsInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutCnabsInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutCnabsInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
  }

  export type BancoUpsertWithoutCnabsInput = {
    update: XOR<BancoUpdateWithoutCnabsInput, BancoUncheckedUpdateWithoutCnabsInput>
    create: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutCnabsInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutCnabsInput, BancoUncheckedUpdateWithoutCnabsInput>
  }

  export type BancoUpdateWithoutCnabsInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutCnabsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type BancosProdutosCreateWithoutProdutoInput = {
    banco: BancoCreateNestedOneWithoutProdutosInput
  }

  export type BancosProdutosUncheckedCreateWithoutProdutoInput = {
    id?: number
    bancoId: number
  }

  export type BancosProdutosCreateOrConnectWithoutProdutoInput = {
    where: BancosProdutosWhereUniqueInput
    create: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput>
  }

  export type BancosProdutosCreateManyProdutoInputEnvelope = {
    data: BancosProdutosCreateManyProdutoInput | BancosProdutosCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput = {
    where: BancosProdutosWhereUniqueInput
    update: XOR<BancosProdutosUpdateWithoutProdutoInput, BancosProdutosUncheckedUpdateWithoutProdutoInput>
    create: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput>
  }

  export type BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput = {
    where: BancosProdutosWhereUniqueInput
    data: XOR<BancosProdutosUpdateWithoutProdutoInput, BancosProdutosUncheckedUpdateWithoutProdutoInput>
  }

  export type BancosProdutosUpdateManyWithWhereWithoutProdutoInput = {
    where: BancosProdutosScalarWhereInput
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyWithoutProdutoInput>
  }

  export type BancoCreateWithoutProdutosInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    cnabs?: CnabCreateNestedOneWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutProdutosInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    cnabs?: CnabUncheckedCreateNestedOneWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutProdutosInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoCreateWithoutBancosInput = {
    descricao: string
  }

  export type ProdutoUncheckedCreateWithoutBancosInput = {
    id?: number
    descricao: string
  }

  export type ProdutoCreateOrConnectWithoutBancosInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
  }

  export type BancoUpsertWithoutProdutosInput = {
    update: XOR<BancoUpdateWithoutProdutosInput, BancoUncheckedUpdateWithoutProdutosInput>
    create: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutProdutosInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutProdutosInput, BancoUncheckedUpdateWithoutProdutosInput>
  }

  export type BancoUpdateWithoutProdutosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    cnabs?: CnabUpdateOneWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    cnabs?: CnabUncheckedUpdateOneWithoutBancoNestedInput
  }

  export type ProdutoUpsertWithoutBancosInput = {
    update: XOR<ProdutoUpdateWithoutBancosInput, ProdutoUncheckedUpdateWithoutBancosInput>
    create: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutBancosInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutBancosInput, ProdutoUncheckedUpdateWithoutBancosInput>
  }

  export type ProdutoUpdateWithoutBancosInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUncheckedUpdateWithoutBancosInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosPadroesVanCreateManyBancoInput = {
    id?: number
    padraoVanId: number
  }

  export type BancosProdutosCreateManyBancoInput = {
    id?: number
    produtoId: number
  }

  export type BancosPadroesVanUpdateWithoutBancoInput = {
    padraoVan?: PadraoVanUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosPadroesVanUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosUpdateWithoutBancoInput = {
    produto?: ProdutoUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosProdutosUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosUncheckedUpdateManyWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanCreateManyPadraoVanInput = {
    id?: number
    bancoId: number
  }

  export type BancosPadroesVanUpdateWithoutPadraoVanInput = {
    banco?: BancoUpdateOneRequiredWithoutPadroesVanNestedInput
  }

  export type BancosPadroesVanUncheckedUpdateWithoutPadraoVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosCreateManyProdutoInput = {
    id?: number
    bancoId: number
  }

  export type BancosProdutosUpdateWithoutProdutoInput = {
    banco?: BancoUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type BancosProdutosUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosUncheckedUpdateManyWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}