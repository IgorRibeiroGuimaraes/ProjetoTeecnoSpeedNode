
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Banco
 * 
 */
export type Banco = $Result.DefaultSelection<Prisma.$BancoPayload>
/**
 * Model PadraoVan
 * 
 */
export type PadraoVan = $Result.DefaultSelection<Prisma.$PadraoVanPayload>
/**
 * Model BancosPadroesVan
 * 
 */
export type BancosPadroesVan = $Result.DefaultSelection<Prisma.$BancosPadroesVanPayload>
/**
 * Model TipoCnab
 * 
 */
export type TipoCnab = $Result.DefaultSelection<Prisma.$TipoCnabPayload>
/**
 * Model BancosCnabs
 * 
 */
export type BancosCnabs = $Result.DefaultSelection<Prisma.$BancosCnabsPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model BancosProdutos
 * 
 */
export type BancosProdutos = $Result.DefaultSelection<Prisma.$BancosProdutosPayload>
/**
 * Model CartaVan
 * 
 */
export type CartaVan = $Result.DefaultSelection<Prisma.$CartaVanPayload>
/**
 * Model CartaStatus
 * 
 */
export type CartaStatus = $Result.DefaultSelection<Prisma.$CartaStatusPayload>
/**
 * Model StatusCarta
 * 
 */
export type StatusCarta = $Result.DefaultSelection<Prisma.$StatusCartaPayload>
/**
 * Model Empresa
 * 
 */
export type Empresa = $Result.DefaultSelection<Prisma.$EmpresaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bancos
 * const bancos = await prisma.banco.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bancos
   * const bancos = await prisma.banco.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.banco`: Exposes CRUD operations for the **Banco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bancos
    * const bancos = await prisma.banco.findMany()
    * ```
    */
  get banco(): Prisma.BancoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.padraoVan`: Exposes CRUD operations for the **PadraoVan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PadraoVans
    * const padraoVans = await prisma.padraoVan.findMany()
    * ```
    */
  get padraoVan(): Prisma.PadraoVanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bancosPadroesVan`: Exposes CRUD operations for the **BancosPadroesVan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BancosPadroesVans
    * const bancosPadroesVans = await prisma.bancosPadroesVan.findMany()
    * ```
    */
  get bancosPadroesVan(): Prisma.BancosPadroesVanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tipoCnab`: Exposes CRUD operations for the **TipoCnab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoCnabs
    * const tipoCnabs = await prisma.tipoCnab.findMany()
    * ```
    */
  get tipoCnab(): Prisma.TipoCnabDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bancosCnabs`: Exposes CRUD operations for the **BancosCnabs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BancosCnabs
    * const bancosCnabs = await prisma.bancosCnabs.findMany()
    * ```
    */
  get bancosCnabs(): Prisma.BancosCnabsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bancosProdutos`: Exposes CRUD operations for the **BancosProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BancosProdutos
    * const bancosProdutos = await prisma.bancosProdutos.findMany()
    * ```
    */
  get bancosProdutos(): Prisma.BancosProdutosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartaVan`: Exposes CRUD operations for the **CartaVan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartaVans
    * const cartaVans = await prisma.cartaVan.findMany()
    * ```
    */
  get cartaVan(): Prisma.CartaVanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartaStatus`: Exposes CRUD operations for the **CartaStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartaStatuses
    * const cartaStatuses = await prisma.cartaStatus.findMany()
    * ```
    */
  get cartaStatus(): Prisma.CartaStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusCarta`: Exposes CRUD operations for the **StatusCarta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusCartas
    * const statusCartas = await prisma.statusCarta.findMany()
    * ```
    */
  get statusCarta(): Prisma.StatusCartaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.empresa`: Exposes CRUD operations for the **Empresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresa.findMany()
    * ```
    */
  get empresa(): Prisma.EmpresaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Banco: 'Banco',
    PadraoVan: 'PadraoVan',
    BancosPadroesVan: 'BancosPadroesVan',
    TipoCnab: 'TipoCnab',
    BancosCnabs: 'BancosCnabs',
    Produto: 'Produto',
    BancosProdutos: 'BancosProdutos',
    CartaVan: 'CartaVan',
    CartaStatus: 'CartaStatus',
    StatusCarta: 'StatusCarta',
    Empresa: 'Empresa'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "banco" | "padraoVan" | "bancosPadroesVan" | "tipoCnab" | "bancosCnabs" | "produto" | "bancosProdutos" | "cartaVan" | "cartaStatus" | "statusCarta" | "empresa"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Banco: {
        payload: Prisma.$BancoPayload<ExtArgs>
        fields: Prisma.BancoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          findFirst: {
            args: Prisma.BancoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          findMany: {
            args: Prisma.BancoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          create: {
            args: Prisma.BancoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          createMany: {
            args: Prisma.BancoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          delete: {
            args: Prisma.BancoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          update: {
            args: Prisma.BancoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          deleteMany: {
            args: Prisma.BancoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          upsert: {
            args: Prisma.BancoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          aggregate: {
            args: Prisma.BancoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanco>
          }
          groupBy: {
            args: Prisma.BancoGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancoGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancoCountArgs<ExtArgs>
            result: $Utils.Optional<BancoCountAggregateOutputType> | number
          }
        }
      }
      PadraoVan: {
        payload: Prisma.$PadraoVanPayload<ExtArgs>
        fields: Prisma.PadraoVanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PadraoVanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PadraoVanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          findFirst: {
            args: Prisma.PadraoVanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PadraoVanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          findMany: {
            args: Prisma.PadraoVanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>[]
          }
          create: {
            args: Prisma.PadraoVanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          createMany: {
            args: Prisma.PadraoVanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PadraoVanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>[]
          }
          delete: {
            args: Prisma.PadraoVanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          update: {
            args: Prisma.PadraoVanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          deleteMany: {
            args: Prisma.PadraoVanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PadraoVanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PadraoVanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>[]
          }
          upsert: {
            args: Prisma.PadraoVanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PadraoVanPayload>
          }
          aggregate: {
            args: Prisma.PadraoVanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePadraoVan>
          }
          groupBy: {
            args: Prisma.PadraoVanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PadraoVanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PadraoVanCountArgs<ExtArgs>
            result: $Utils.Optional<PadraoVanCountAggregateOutputType> | number
          }
        }
      }
      BancosPadroesVan: {
        payload: Prisma.$BancosPadroesVanPayload<ExtArgs>
        fields: Prisma.BancosPadroesVanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancosPadroesVanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancosPadroesVanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          findFirst: {
            args: Prisma.BancosPadroesVanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancosPadroesVanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          findMany: {
            args: Prisma.BancosPadroesVanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>[]
          }
          create: {
            args: Prisma.BancosPadroesVanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          createMany: {
            args: Prisma.BancosPadroesVanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancosPadroesVanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>[]
          }
          delete: {
            args: Prisma.BancosPadroesVanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          update: {
            args: Prisma.BancosPadroesVanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          deleteMany: {
            args: Prisma.BancosPadroesVanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancosPadroesVanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancosPadroesVanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>[]
          }
          upsert: {
            args: Prisma.BancosPadroesVanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosPadroesVanPayload>
          }
          aggregate: {
            args: Prisma.BancosPadroesVanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBancosPadroesVan>
          }
          groupBy: {
            args: Prisma.BancosPadroesVanGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancosPadroesVanGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancosPadroesVanCountArgs<ExtArgs>
            result: $Utils.Optional<BancosPadroesVanCountAggregateOutputType> | number
          }
        }
      }
      TipoCnab: {
        payload: Prisma.$TipoCnabPayload<ExtArgs>
        fields: Prisma.TipoCnabFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoCnabFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoCnabFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>
          }
          findFirst: {
            args: Prisma.TipoCnabFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoCnabFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>
          }
          findMany: {
            args: Prisma.TipoCnabFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>[]
          }
          create: {
            args: Prisma.TipoCnabCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>
          }
          createMany: {
            args: Prisma.TipoCnabCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TipoCnabCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>[]
          }
          delete: {
            args: Prisma.TipoCnabDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>
          }
          update: {
            args: Prisma.TipoCnabUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>
          }
          deleteMany: {
            args: Prisma.TipoCnabDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipoCnabUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TipoCnabUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>[]
          }
          upsert: {
            args: Prisma.TipoCnabUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoCnabPayload>
          }
          aggregate: {
            args: Prisma.TipoCnabAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipoCnab>
          }
          groupBy: {
            args: Prisma.TipoCnabGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipoCnabGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoCnabCountArgs<ExtArgs>
            result: $Utils.Optional<TipoCnabCountAggregateOutputType> | number
          }
        }
      }
      BancosCnabs: {
        payload: Prisma.$BancosCnabsPayload<ExtArgs>
        fields: Prisma.BancosCnabsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancosCnabsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancosCnabsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>
          }
          findFirst: {
            args: Prisma.BancosCnabsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancosCnabsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>
          }
          findMany: {
            args: Prisma.BancosCnabsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>[]
          }
          create: {
            args: Prisma.BancosCnabsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>
          }
          createMany: {
            args: Prisma.BancosCnabsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancosCnabsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>[]
          }
          delete: {
            args: Prisma.BancosCnabsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>
          }
          update: {
            args: Prisma.BancosCnabsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>
          }
          deleteMany: {
            args: Prisma.BancosCnabsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancosCnabsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancosCnabsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>[]
          }
          upsert: {
            args: Prisma.BancosCnabsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosCnabsPayload>
          }
          aggregate: {
            args: Prisma.BancosCnabsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBancosCnabs>
          }
          groupBy: {
            args: Prisma.BancosCnabsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancosCnabsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancosCnabsCountArgs<ExtArgs>
            result: $Utils.Optional<BancosCnabsCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProdutoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProdutoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      BancosProdutos: {
        payload: Prisma.$BancosProdutosPayload<ExtArgs>
        fields: Prisma.BancosProdutosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancosProdutosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancosProdutosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          findFirst: {
            args: Prisma.BancosProdutosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancosProdutosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          findMany: {
            args: Prisma.BancosProdutosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>[]
          }
          create: {
            args: Prisma.BancosProdutosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          createMany: {
            args: Prisma.BancosProdutosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BancosProdutosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>[]
          }
          delete: {
            args: Prisma.BancosProdutosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          update: {
            args: Prisma.BancosProdutosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          deleteMany: {
            args: Prisma.BancosProdutosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancosProdutosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BancosProdutosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>[]
          }
          upsert: {
            args: Prisma.BancosProdutosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancosProdutosPayload>
          }
          aggregate: {
            args: Prisma.BancosProdutosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBancosProdutos>
          }
          groupBy: {
            args: Prisma.BancosProdutosGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancosProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancosProdutosCountArgs<ExtArgs>
            result: $Utils.Optional<BancosProdutosCountAggregateOutputType> | number
          }
        }
      }
      CartaVan: {
        payload: Prisma.$CartaVanPayload<ExtArgs>
        fields: Prisma.CartaVanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartaVanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartaVanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>
          }
          findFirst: {
            args: Prisma.CartaVanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartaVanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>
          }
          findMany: {
            args: Prisma.CartaVanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>[]
          }
          create: {
            args: Prisma.CartaVanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>
          }
          createMany: {
            args: Prisma.CartaVanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartaVanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>[]
          }
          delete: {
            args: Prisma.CartaVanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>
          }
          update: {
            args: Prisma.CartaVanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>
          }
          deleteMany: {
            args: Prisma.CartaVanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartaVanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartaVanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>[]
          }
          upsert: {
            args: Prisma.CartaVanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaVanPayload>
          }
          aggregate: {
            args: Prisma.CartaVanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartaVan>
          }
          groupBy: {
            args: Prisma.CartaVanGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartaVanGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartaVanCountArgs<ExtArgs>
            result: $Utils.Optional<CartaVanCountAggregateOutputType> | number
          }
        }
      }
      CartaStatus: {
        payload: Prisma.$CartaStatusPayload<ExtArgs>
        fields: Prisma.CartaStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartaStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartaStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>
          }
          findFirst: {
            args: Prisma.CartaStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartaStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>
          }
          findMany: {
            args: Prisma.CartaStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>[]
          }
          create: {
            args: Prisma.CartaStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>
          }
          createMany: {
            args: Prisma.CartaStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartaStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>[]
          }
          delete: {
            args: Prisma.CartaStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>
          }
          update: {
            args: Prisma.CartaStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>
          }
          deleteMany: {
            args: Prisma.CartaStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartaStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartaStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>[]
          }
          upsert: {
            args: Prisma.CartaStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaStatusPayload>
          }
          aggregate: {
            args: Prisma.CartaStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartaStatus>
          }
          groupBy: {
            args: Prisma.CartaStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartaStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartaStatusCountArgs<ExtArgs>
            result: $Utils.Optional<CartaStatusCountAggregateOutputType> | number
          }
        }
      }
      StatusCarta: {
        payload: Prisma.$StatusCartaPayload<ExtArgs>
        fields: Prisma.StatusCartaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusCartaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusCartaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>
          }
          findFirst: {
            args: Prisma.StatusCartaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusCartaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>
          }
          findMany: {
            args: Prisma.StatusCartaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>[]
          }
          create: {
            args: Prisma.StatusCartaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>
          }
          createMany: {
            args: Prisma.StatusCartaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusCartaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>[]
          }
          delete: {
            args: Prisma.StatusCartaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>
          }
          update: {
            args: Prisma.StatusCartaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>
          }
          deleteMany: {
            args: Prisma.StatusCartaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusCartaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusCartaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>[]
          }
          upsert: {
            args: Prisma.StatusCartaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusCartaPayload>
          }
          aggregate: {
            args: Prisma.StatusCartaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusCarta>
          }
          groupBy: {
            args: Prisma.StatusCartaGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusCartaGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCartaCountArgs<ExtArgs>
            result: $Utils.Optional<StatusCartaCountAggregateOutputType> | number
          }
        }
      }
      Empresa: {
        payload: Prisma.$EmpresaPayload<ExtArgs>
        fields: Prisma.EmpresaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmpresaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmpresaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findFirst: {
            args: Prisma.EmpresaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmpresaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findMany: {
            args: Prisma.EmpresaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          create: {
            args: Prisma.EmpresaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          createMany: {
            args: Prisma.EmpresaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmpresaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          delete: {
            args: Prisma.EmpresaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          update: {
            args: Prisma.EmpresaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          deleteMany: {
            args: Prisma.EmpresaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmpresaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmpresaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          upsert: {
            args: Prisma.EmpresaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          aggregate: {
            args: Prisma.EmpresaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmpresa>
          }
          groupBy: {
            args: Prisma.EmpresaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmpresaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmpresaCountArgs<ExtArgs>
            result: $Utils.Optional<EmpresaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    banco?: BancoOmit
    padraoVan?: PadraoVanOmit
    bancosPadroesVan?: BancosPadroesVanOmit
    tipoCnab?: TipoCnabOmit
    bancosCnabs?: BancosCnabsOmit
    produto?: ProdutoOmit
    bancosProdutos?: BancosProdutosOmit
    cartaVan?: CartaVanOmit
    cartaStatus?: CartaStatusOmit
    statusCarta?: StatusCartaOmit
    empresa?: EmpresaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BancoCountOutputType
   */

  export type BancoCountOutputType = {
    padroesVan: number
    cnabs: number
    produtos: number
    cartasVan: number
  }

  export type BancoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    padroesVan?: boolean | BancoCountOutputTypeCountPadroesVanArgs
    cnabs?: boolean | BancoCountOutputTypeCountCnabsArgs
    produtos?: boolean | BancoCountOutputTypeCountProdutosArgs
    cartasVan?: boolean | BancoCountOutputTypeCountCartasVanArgs
  }

  // Custom InputTypes
  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancoCountOutputType
     */
    select?: BancoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeCountPadroesVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosPadroesVanWhereInput
  }

  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeCountCnabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosCnabsWhereInput
  }

  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosProdutosWhereInput
  }

  /**
   * BancoCountOutputType without action
   */
  export type BancoCountOutputTypeCountCartasVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaVanWhereInput
  }


  /**
   * Count Type PadraoVanCountOutputType
   */

  export type PadraoVanCountOutputType = {
    bancos: number
  }

  export type PadraoVanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | PadraoVanCountOutputTypeCountBancosArgs
  }

  // Custom InputTypes
  /**
   * PadraoVanCountOutputType without action
   */
  export type PadraoVanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVanCountOutputType
     */
    select?: PadraoVanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PadraoVanCountOutputType without action
   */
  export type PadraoVanCountOutputTypeCountBancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosPadroesVanWhereInput
  }


  /**
   * Count Type TipoCnabCountOutputType
   */

  export type TipoCnabCountOutputType = {
    bancosCnabs: number
    cartasVan: number
  }

  export type TipoCnabCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancosCnabs?: boolean | TipoCnabCountOutputTypeCountBancosCnabsArgs
    cartasVan?: boolean | TipoCnabCountOutputTypeCountCartasVanArgs
  }

  // Custom InputTypes
  /**
   * TipoCnabCountOutputType without action
   */
  export type TipoCnabCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnabCountOutputType
     */
    select?: TipoCnabCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TipoCnabCountOutputType without action
   */
  export type TipoCnabCountOutputTypeCountBancosCnabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosCnabsWhereInput
  }

  /**
   * TipoCnabCountOutputType without action
   */
  export type TipoCnabCountOutputTypeCountCartasVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaVanWhereInput
  }


  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    bancos: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | ProdutoCountOutputTypeCountBancosArgs
  }

  // Custom InputTypes
  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountBancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosProdutosWhereInput
  }


  /**
   * Count Type CartaVanCountOutputType
   */

  export type CartaVanCountOutputType = {
    status: number
  }

  export type CartaVanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | CartaVanCountOutputTypeCountStatusArgs
  }

  // Custom InputTypes
  /**
   * CartaVanCountOutputType without action
   */
  export type CartaVanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVanCountOutputType
     */
    select?: CartaVanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CartaVanCountOutputType without action
   */
  export type CartaVanCountOutputTypeCountStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaStatusWhereInput
  }


  /**
   * Count Type StatusCartaCountOutputType
   */

  export type StatusCartaCountOutputType = {
    cartaStatus: number
  }

  export type StatusCartaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartaStatus?: boolean | StatusCartaCountOutputTypeCountCartaStatusArgs
  }

  // Custom InputTypes
  /**
   * StatusCartaCountOutputType without action
   */
  export type StatusCartaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCartaCountOutputType
     */
    select?: StatusCartaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusCartaCountOutputType without action
   */
  export type StatusCartaCountOutputTypeCountCartaStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaStatusWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Banco
   */

  export type AggregateBanco = {
    _count: BancoCountAggregateOutputType | null
    _avg: BancoAvgAggregateOutputType | null
    _sum: BancoSumAggregateOutputType | null
    _min: BancoMinAggregateOutputType | null
    _max: BancoMaxAggregateOutputType | null
  }

  export type BancoAvgAggregateOutputType = {
    id: number | null
  }

  export type BancoSumAggregateOutputType = {
    id: number | null
  }

  export type BancoMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type BancoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type BancoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type BancoAvgAggregateInputType = {
    id?: true
  }

  export type BancoSumAggregateInputType = {
    id?: true
  }

  export type BancoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type BancoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type BancoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type BancoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banco to aggregate.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bancos
    **/
    _count?: true | BancoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancoMaxAggregateInputType
  }

  export type GetBancoAggregateType<T extends BancoAggregateArgs> = {
        [P in keyof T & keyof AggregateBanco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanco[P]>
      : GetScalarType<T[P], AggregateBanco[P]>
  }




  export type BancoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancoWhereInput
    orderBy?: BancoOrderByWithAggregationInput | BancoOrderByWithAggregationInput[]
    by: BancoScalarFieldEnum[] | BancoScalarFieldEnum
    having?: BancoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancoCountAggregateInputType | true
    _avg?: BancoAvgAggregateInputType
    _sum?: BancoSumAggregateInputType
    _min?: BancoMinAggregateInputType
    _max?: BancoMaxAggregateInputType
  }

  export type BancoGroupByOutputType = {
    id: number
    nome: string
    _count: BancoCountAggregateOutputType | null
    _avg: BancoAvgAggregateOutputType | null
    _sum: BancoSumAggregateOutputType | null
    _min: BancoMinAggregateOutputType | null
    _max: BancoMaxAggregateOutputType | null
  }

  type GetBancoGroupByPayload<T extends BancoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancoGroupByOutputType[P]>
            : GetScalarType<T[P], BancoGroupByOutputType[P]>
        }
      >
    >


  export type BancoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    padroesVan?: boolean | Banco$padroesVanArgs<ExtArgs>
    cnabs?: boolean | Banco$cnabsArgs<ExtArgs>
    produtos?: boolean | Banco$produtosArgs<ExtArgs>
    cartasVan?: boolean | Banco$cartasVanArgs<ExtArgs>
    _count?: boolean | BancoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["banco"]>

  export type BancoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["banco"]>

  export type BancoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["banco"]>

  export type BancoSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type BancoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["banco"]>
  export type BancoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    padroesVan?: boolean | Banco$padroesVanArgs<ExtArgs>
    cnabs?: boolean | Banco$cnabsArgs<ExtArgs>
    produtos?: boolean | Banco$produtosArgs<ExtArgs>
    cartasVan?: boolean | Banco$cartasVanArgs<ExtArgs>
    _count?: boolean | BancoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BancoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BancoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BancoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Banco"
    objects: {
      padroesVan: Prisma.$BancosPadroesVanPayload<ExtArgs>[]
      cnabs: Prisma.$BancosCnabsPayload<ExtArgs>[]
      produtos: Prisma.$BancosProdutosPayload<ExtArgs>[]
      cartasVan: Prisma.$CartaVanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["banco"]>
    composites: {}
  }

  type BancoGetPayload<S extends boolean | null | undefined | BancoDefaultArgs> = $Result.GetResult<Prisma.$BancoPayload, S>

  type BancoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancoCountAggregateInputType | true
    }

  export interface BancoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Banco'], meta: { name: 'Banco' } }
    /**
     * Find zero or one Banco that matches the filter.
     * @param {BancoFindUniqueArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancoFindUniqueArgs>(args: SelectSubset<T, BancoFindUniqueArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Banco that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancoFindUniqueOrThrowArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancoFindUniqueOrThrowArgs>(args: SelectSubset<T, BancoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Banco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindFirstArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancoFindFirstArgs>(args?: SelectSubset<T, BancoFindFirstArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Banco that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindFirstOrThrowArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancoFindFirstOrThrowArgs>(args?: SelectSubset<T, BancoFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Bancos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bancos
     * const bancos = await prisma.banco.findMany()
     * 
     * // Get first 10 Bancos
     * const bancos = await prisma.banco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancoWithIdOnly = await prisma.banco.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancoFindManyArgs>(args?: SelectSubset<T, BancoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Banco.
     * @param {BancoCreateArgs} args - Arguments to create a Banco.
     * @example
     * // Create one Banco
     * const Banco = await prisma.banco.create({
     *   data: {
     *     // ... data to create a Banco
     *   }
     * })
     * 
     */
    create<T extends BancoCreateArgs>(args: SelectSubset<T, BancoCreateArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Bancos.
     * @param {BancoCreateManyArgs} args - Arguments to create many Bancos.
     * @example
     * // Create many Bancos
     * const banco = await prisma.banco.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancoCreateManyArgs>(args?: SelectSubset<T, BancoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bancos and returns the data saved in the database.
     * @param {BancoCreateManyAndReturnArgs} args - Arguments to create many Bancos.
     * @example
     * // Create many Bancos
     * const banco = await prisma.banco.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bancos and only return the `id`
     * const bancoWithIdOnly = await prisma.banco.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancoCreateManyAndReturnArgs>(args?: SelectSubset<T, BancoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Banco.
     * @param {BancoDeleteArgs} args - Arguments to delete one Banco.
     * @example
     * // Delete one Banco
     * const Banco = await prisma.banco.delete({
     *   where: {
     *     // ... filter to delete one Banco
     *   }
     * })
     * 
     */
    delete<T extends BancoDeleteArgs>(args: SelectSubset<T, BancoDeleteArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Banco.
     * @param {BancoUpdateArgs} args - Arguments to update one Banco.
     * @example
     * // Update one Banco
     * const banco = await prisma.banco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancoUpdateArgs>(args: SelectSubset<T, BancoUpdateArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Bancos.
     * @param {BancoDeleteManyArgs} args - Arguments to filter Bancos to delete.
     * @example
     * // Delete a few Bancos
     * const { count } = await prisma.banco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancoDeleteManyArgs>(args?: SelectSubset<T, BancoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bancos
     * const banco = await prisma.banco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancoUpdateManyArgs>(args: SelectSubset<T, BancoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bancos and returns the data updated in the database.
     * @param {BancoUpdateManyAndReturnArgs} args - Arguments to update many Bancos.
     * @example
     * // Update many Bancos
     * const banco = await prisma.banco.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bancos and only return the `id`
     * const bancoWithIdOnly = await prisma.banco.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancoUpdateManyAndReturnArgs>(args: SelectSubset<T, BancoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Banco.
     * @param {BancoUpsertArgs} args - Arguments to update or create a Banco.
     * @example
     * // Update or create a Banco
     * const banco = await prisma.banco.upsert({
     *   create: {
     *     // ... data to create a Banco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banco we want to update
     *   }
     * })
     */
    upsert<T extends BancoUpsertArgs>(args: SelectSubset<T, BancoUpsertArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoCountArgs} args - Arguments to filter Bancos to count.
     * @example
     * // Count the number of Bancos
     * const count = await prisma.banco.count({
     *   where: {
     *     // ... the filter for the Bancos we want to count
     *   }
     * })
    **/
    count<T extends BancoCountArgs>(
      args?: Subset<T, BancoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancoAggregateArgs>(args: Subset<T, BancoAggregateArgs>): Prisma.PrismaPromise<GetBancoAggregateType<T>>

    /**
     * Group by Banco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancoGroupByArgs['orderBy'] }
        : { orderBy?: BancoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Banco model
   */
  readonly fields: BancoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Banco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    padroesVan<T extends Banco$padroesVanArgs<ExtArgs> = {}>(args?: Subset<T, Banco$padroesVanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cnabs<T extends Banco$cnabsArgs<ExtArgs> = {}>(args?: Subset<T, Banco$cnabsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    produtos<T extends Banco$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Banco$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cartasVan<T extends Banco$cartasVanArgs<ExtArgs> = {}>(args?: Subset<T, Banco$cartasVanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Banco model
   */ 
  interface BancoFieldRefs {
    readonly id: FieldRef<"Banco", 'Int'>
    readonly nome: FieldRef<"Banco", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Banco findUnique
   */
  export type BancoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco findUniqueOrThrow
   */
  export type BancoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco findFirst
   */
  export type BancoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bancos.
     */
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco findFirstOrThrow
   */
  export type BancoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bancos.
     */
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco findMany
   */
  export type BancoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Bancos to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco create
   */
  export type BancoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The data needed to create a Banco.
     */
    data: XOR<BancoCreateInput, BancoUncheckedCreateInput>
  }

  /**
   * Banco createMany
   */
  export type BancoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bancos.
     */
    data: BancoCreateManyInput | BancoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Banco createManyAndReturn
   */
  export type BancoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * The data used to create many Bancos.
     */
    data: BancoCreateManyInput | BancoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Banco update
   */
  export type BancoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The data needed to update a Banco.
     */
    data: XOR<BancoUpdateInput, BancoUncheckedUpdateInput>
    /**
     * Choose, which Banco to update.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco updateMany
   */
  export type BancoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bancos.
     */
    data: XOR<BancoUpdateManyMutationInput, BancoUncheckedUpdateManyInput>
    /**
     * Filter which Bancos to update
     */
    where?: BancoWhereInput
    /**
     * Limit how many Bancos to update.
     */
    limit?: number
  }

  /**
   * Banco updateManyAndReturn
   */
  export type BancoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * The data used to update Bancos.
     */
    data: XOR<BancoUpdateManyMutationInput, BancoUncheckedUpdateManyInput>
    /**
     * Filter which Bancos to update
     */
    where?: BancoWhereInput
    /**
     * Limit how many Bancos to update.
     */
    limit?: number
  }

  /**
   * Banco upsert
   */
  export type BancoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The filter to search for the Banco to update in case it exists.
     */
    where: BancoWhereUniqueInput
    /**
     * In case the Banco found by the `where` argument doesn't exist, create a new Banco with this data.
     */
    create: XOR<BancoCreateInput, BancoUncheckedCreateInput>
    /**
     * In case the Banco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancoUpdateInput, BancoUncheckedUpdateInput>
  }

  /**
   * Banco delete
   */
  export type BancoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter which Banco to delete.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco deleteMany
   */
  export type BancoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bancos to delete
     */
    where?: BancoWhereInput
    /**
     * Limit how many Bancos to delete.
     */
    limit?: number
  }

  /**
   * Banco.padroesVan
   */
  export type Banco$padroesVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    where?: BancosPadroesVanWhereInput
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    cursor?: BancosPadroesVanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * Banco.cnabs
   */
  export type Banco$cnabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    where?: BancosCnabsWhereInput
    orderBy?: BancosCnabsOrderByWithRelationInput | BancosCnabsOrderByWithRelationInput[]
    cursor?: BancosCnabsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosCnabsScalarFieldEnum | BancosCnabsScalarFieldEnum[]
  }

  /**
   * Banco.produtos
   */
  export type Banco$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    where?: BancosProdutosWhereInput
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    cursor?: BancosProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * Banco.cartasVan
   */
  export type Banco$cartasVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    where?: CartaVanWhereInput
    orderBy?: CartaVanOrderByWithRelationInput | CartaVanOrderByWithRelationInput[]
    cursor?: CartaVanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartaVanScalarFieldEnum | CartaVanScalarFieldEnum[]
  }

  /**
   * Banco without action
   */
  export type BancoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Banco
     */
    omit?: BancoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
  }


  /**
   * Model PadraoVan
   */

  export type AggregatePadraoVan = {
    _count: PadraoVanCountAggregateOutputType | null
    _avg: PadraoVanAvgAggregateOutputType | null
    _sum: PadraoVanSumAggregateOutputType | null
    _min: PadraoVanMinAggregateOutputType | null
    _max: PadraoVanMaxAggregateOutputType | null
  }

  export type PadraoVanAvgAggregateOutputType = {
    id: number | null
  }

  export type PadraoVanSumAggregateOutputType = {
    id: number | null
  }

  export type PadraoVanMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type PadraoVanMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type PadraoVanCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type PadraoVanAvgAggregateInputType = {
    id?: true
  }

  export type PadraoVanSumAggregateInputType = {
    id?: true
  }

  export type PadraoVanMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type PadraoVanMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type PadraoVanCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type PadraoVanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PadraoVan to aggregate.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PadraoVans
    **/
    _count?: true | PadraoVanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PadraoVanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PadraoVanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PadraoVanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PadraoVanMaxAggregateInputType
  }

  export type GetPadraoVanAggregateType<T extends PadraoVanAggregateArgs> = {
        [P in keyof T & keyof AggregatePadraoVan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePadraoVan[P]>
      : GetScalarType<T[P], AggregatePadraoVan[P]>
  }




  export type PadraoVanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PadraoVanWhereInput
    orderBy?: PadraoVanOrderByWithAggregationInput | PadraoVanOrderByWithAggregationInput[]
    by: PadraoVanScalarFieldEnum[] | PadraoVanScalarFieldEnum
    having?: PadraoVanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PadraoVanCountAggregateInputType | true
    _avg?: PadraoVanAvgAggregateInputType
    _sum?: PadraoVanSumAggregateInputType
    _min?: PadraoVanMinAggregateInputType
    _max?: PadraoVanMaxAggregateInputType
  }

  export type PadraoVanGroupByOutputType = {
    id: number
    descricao: string
    _count: PadraoVanCountAggregateOutputType | null
    _avg: PadraoVanAvgAggregateOutputType | null
    _sum: PadraoVanSumAggregateOutputType | null
    _min: PadraoVanMinAggregateOutputType | null
    _max: PadraoVanMaxAggregateOutputType | null
  }

  type GetPadraoVanGroupByPayload<T extends PadraoVanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PadraoVanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PadraoVanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PadraoVanGroupByOutputType[P]>
            : GetScalarType<T[P], PadraoVanGroupByOutputType[P]>
        }
      >
    >


  export type PadraoVanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    bancos?: boolean | PadraoVan$bancosArgs<ExtArgs>
    _count?: boolean | PadraoVanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["padraoVan"]>

  export type PadraoVanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["padraoVan"]>

  export type PadraoVanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["padraoVan"]>

  export type PadraoVanSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type PadraoVanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao", ExtArgs["result"]["padraoVan"]>
  export type PadraoVanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | PadraoVan$bancosArgs<ExtArgs>
    _count?: boolean | PadraoVanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PadraoVanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PadraoVanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PadraoVanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PadraoVan"
    objects: {
      bancos: Prisma.$BancosPadroesVanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["padraoVan"]>
    composites: {}
  }

  type PadraoVanGetPayload<S extends boolean | null | undefined | PadraoVanDefaultArgs> = $Result.GetResult<Prisma.$PadraoVanPayload, S>

  type PadraoVanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PadraoVanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PadraoVanCountAggregateInputType | true
    }

  export interface PadraoVanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PadraoVan'], meta: { name: 'PadraoVan' } }
    /**
     * Find zero or one PadraoVan that matches the filter.
     * @param {PadraoVanFindUniqueArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PadraoVanFindUniqueArgs>(args: SelectSubset<T, PadraoVanFindUniqueArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PadraoVan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PadraoVanFindUniqueOrThrowArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PadraoVanFindUniqueOrThrowArgs>(args: SelectSubset<T, PadraoVanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PadraoVan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanFindFirstArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PadraoVanFindFirstArgs>(args?: SelectSubset<T, PadraoVanFindFirstArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PadraoVan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanFindFirstOrThrowArgs} args - Arguments to find a PadraoVan
     * @example
     * // Get one PadraoVan
     * const padraoVan = await prisma.padraoVan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PadraoVanFindFirstOrThrowArgs>(args?: SelectSubset<T, PadraoVanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PadraoVans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PadraoVans
     * const padraoVans = await prisma.padraoVan.findMany()
     * 
     * // Get first 10 PadraoVans
     * const padraoVans = await prisma.padraoVan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const padraoVanWithIdOnly = await prisma.padraoVan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PadraoVanFindManyArgs>(args?: SelectSubset<T, PadraoVanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PadraoVan.
     * @param {PadraoVanCreateArgs} args - Arguments to create a PadraoVan.
     * @example
     * // Create one PadraoVan
     * const PadraoVan = await prisma.padraoVan.create({
     *   data: {
     *     // ... data to create a PadraoVan
     *   }
     * })
     * 
     */
    create<T extends PadraoVanCreateArgs>(args: SelectSubset<T, PadraoVanCreateArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PadraoVans.
     * @param {PadraoVanCreateManyArgs} args - Arguments to create many PadraoVans.
     * @example
     * // Create many PadraoVans
     * const padraoVan = await prisma.padraoVan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PadraoVanCreateManyArgs>(args?: SelectSubset<T, PadraoVanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PadraoVans and returns the data saved in the database.
     * @param {PadraoVanCreateManyAndReturnArgs} args - Arguments to create many PadraoVans.
     * @example
     * // Create many PadraoVans
     * const padraoVan = await prisma.padraoVan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PadraoVans and only return the `id`
     * const padraoVanWithIdOnly = await prisma.padraoVan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PadraoVanCreateManyAndReturnArgs>(args?: SelectSubset<T, PadraoVanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PadraoVan.
     * @param {PadraoVanDeleteArgs} args - Arguments to delete one PadraoVan.
     * @example
     * // Delete one PadraoVan
     * const PadraoVan = await prisma.padraoVan.delete({
     *   where: {
     *     // ... filter to delete one PadraoVan
     *   }
     * })
     * 
     */
    delete<T extends PadraoVanDeleteArgs>(args: SelectSubset<T, PadraoVanDeleteArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PadraoVan.
     * @param {PadraoVanUpdateArgs} args - Arguments to update one PadraoVan.
     * @example
     * // Update one PadraoVan
     * const padraoVan = await prisma.padraoVan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PadraoVanUpdateArgs>(args: SelectSubset<T, PadraoVanUpdateArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PadraoVans.
     * @param {PadraoVanDeleteManyArgs} args - Arguments to filter PadraoVans to delete.
     * @example
     * // Delete a few PadraoVans
     * const { count } = await prisma.padraoVan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PadraoVanDeleteManyArgs>(args?: SelectSubset<T, PadraoVanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PadraoVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PadraoVans
     * const padraoVan = await prisma.padraoVan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PadraoVanUpdateManyArgs>(args: SelectSubset<T, PadraoVanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PadraoVans and returns the data updated in the database.
     * @param {PadraoVanUpdateManyAndReturnArgs} args - Arguments to update many PadraoVans.
     * @example
     * // Update many PadraoVans
     * const padraoVan = await prisma.padraoVan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PadraoVans and only return the `id`
     * const padraoVanWithIdOnly = await prisma.padraoVan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PadraoVanUpdateManyAndReturnArgs>(args: SelectSubset<T, PadraoVanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PadraoVan.
     * @param {PadraoVanUpsertArgs} args - Arguments to update or create a PadraoVan.
     * @example
     * // Update or create a PadraoVan
     * const padraoVan = await prisma.padraoVan.upsert({
     *   create: {
     *     // ... data to create a PadraoVan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PadraoVan we want to update
     *   }
     * })
     */
    upsert<T extends PadraoVanUpsertArgs>(args: SelectSubset<T, PadraoVanUpsertArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PadraoVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanCountArgs} args - Arguments to filter PadraoVans to count.
     * @example
     * // Count the number of PadraoVans
     * const count = await prisma.padraoVan.count({
     *   where: {
     *     // ... the filter for the PadraoVans we want to count
     *   }
     * })
    **/
    count<T extends PadraoVanCountArgs>(
      args?: Subset<T, PadraoVanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PadraoVanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PadraoVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PadraoVanAggregateArgs>(args: Subset<T, PadraoVanAggregateArgs>): Prisma.PrismaPromise<GetPadraoVanAggregateType<T>>

    /**
     * Group by PadraoVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PadraoVanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PadraoVanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PadraoVanGroupByArgs['orderBy'] }
        : { orderBy?: PadraoVanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PadraoVanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPadraoVanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PadraoVan model
   */
  readonly fields: PadraoVanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PadraoVan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PadraoVanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bancos<T extends PadraoVan$bancosArgs<ExtArgs> = {}>(args?: Subset<T, PadraoVan$bancosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PadraoVan model
   */ 
  interface PadraoVanFieldRefs {
    readonly id: FieldRef<"PadraoVan", 'Int'>
    readonly descricao: FieldRef<"PadraoVan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PadraoVan findUnique
   */
  export type PadraoVanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan findUniqueOrThrow
   */
  export type PadraoVanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan findFirst
   */
  export type PadraoVanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PadraoVans.
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PadraoVans.
     */
    distinct?: PadraoVanScalarFieldEnum | PadraoVanScalarFieldEnum[]
  }

  /**
   * PadraoVan findFirstOrThrow
   */
  export type PadraoVanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVan to fetch.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PadraoVans.
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PadraoVans.
     */
    distinct?: PadraoVanScalarFieldEnum | PadraoVanScalarFieldEnum[]
  }

  /**
   * PadraoVan findMany
   */
  export type PadraoVanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter, which PadraoVans to fetch.
     */
    where?: PadraoVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PadraoVans to fetch.
     */
    orderBy?: PadraoVanOrderByWithRelationInput | PadraoVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PadraoVans.
     */
    cursor?: PadraoVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PadraoVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PadraoVans.
     */
    skip?: number
    distinct?: PadraoVanScalarFieldEnum | PadraoVanScalarFieldEnum[]
  }

  /**
   * PadraoVan create
   */
  export type PadraoVanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * The data needed to create a PadraoVan.
     */
    data: XOR<PadraoVanCreateInput, PadraoVanUncheckedCreateInput>
  }

  /**
   * PadraoVan createMany
   */
  export type PadraoVanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PadraoVans.
     */
    data: PadraoVanCreateManyInput | PadraoVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PadraoVan createManyAndReturn
   */
  export type PadraoVanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * The data used to create many PadraoVans.
     */
    data: PadraoVanCreateManyInput | PadraoVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PadraoVan update
   */
  export type PadraoVanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * The data needed to update a PadraoVan.
     */
    data: XOR<PadraoVanUpdateInput, PadraoVanUncheckedUpdateInput>
    /**
     * Choose, which PadraoVan to update.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan updateMany
   */
  export type PadraoVanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PadraoVans.
     */
    data: XOR<PadraoVanUpdateManyMutationInput, PadraoVanUncheckedUpdateManyInput>
    /**
     * Filter which PadraoVans to update
     */
    where?: PadraoVanWhereInput
    /**
     * Limit how many PadraoVans to update.
     */
    limit?: number
  }

  /**
   * PadraoVan updateManyAndReturn
   */
  export type PadraoVanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * The data used to update PadraoVans.
     */
    data: XOR<PadraoVanUpdateManyMutationInput, PadraoVanUncheckedUpdateManyInput>
    /**
     * Filter which PadraoVans to update
     */
    where?: PadraoVanWhereInput
    /**
     * Limit how many PadraoVans to update.
     */
    limit?: number
  }

  /**
   * PadraoVan upsert
   */
  export type PadraoVanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * The filter to search for the PadraoVan to update in case it exists.
     */
    where: PadraoVanWhereUniqueInput
    /**
     * In case the PadraoVan found by the `where` argument doesn't exist, create a new PadraoVan with this data.
     */
    create: XOR<PadraoVanCreateInput, PadraoVanUncheckedCreateInput>
    /**
     * In case the PadraoVan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PadraoVanUpdateInput, PadraoVanUncheckedUpdateInput>
  }

  /**
   * PadraoVan delete
   */
  export type PadraoVanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
    /**
     * Filter which PadraoVan to delete.
     */
    where: PadraoVanWhereUniqueInput
  }

  /**
   * PadraoVan deleteMany
   */
  export type PadraoVanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PadraoVans to delete
     */
    where?: PadraoVanWhereInput
    /**
     * Limit how many PadraoVans to delete.
     */
    limit?: number
  }

  /**
   * PadraoVan.bancos
   */
  export type PadraoVan$bancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    where?: BancosPadroesVanWhereInput
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    cursor?: BancosPadroesVanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * PadraoVan without action
   */
  export type PadraoVanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PadraoVan
     */
    select?: PadraoVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PadraoVan
     */
    omit?: PadraoVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PadraoVanInclude<ExtArgs> | null
  }


  /**
   * Model BancosPadroesVan
   */

  export type AggregateBancosPadroesVan = {
    _count: BancosPadroesVanCountAggregateOutputType | null
    _avg: BancosPadroesVanAvgAggregateOutputType | null
    _sum: BancosPadroesVanSumAggregateOutputType | null
    _min: BancosPadroesVanMinAggregateOutputType | null
    _max: BancosPadroesVanMaxAggregateOutputType | null
  }

  export type BancosPadroesVanAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanMinAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanMaxAggregateOutputType = {
    id: number | null
    bancoId: number | null
    padraoVanId: number | null
  }

  export type BancosPadroesVanCountAggregateOutputType = {
    id: number
    bancoId: number
    padraoVanId: number
    _all: number
  }


  export type BancosPadroesVanAvgAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanSumAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanMinAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanMaxAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
  }

  export type BancosPadroesVanCountAggregateInputType = {
    id?: true
    bancoId?: true
    padraoVanId?: true
    _all?: true
  }

  export type BancosPadroesVanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosPadroesVan to aggregate.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BancosPadroesVans
    **/
    _count?: true | BancosPadroesVanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancosPadroesVanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancosPadroesVanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancosPadroesVanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancosPadroesVanMaxAggregateInputType
  }

  export type GetBancosPadroesVanAggregateType<T extends BancosPadroesVanAggregateArgs> = {
        [P in keyof T & keyof AggregateBancosPadroesVan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBancosPadroesVan[P]>
      : GetScalarType<T[P], AggregateBancosPadroesVan[P]>
  }




  export type BancosPadroesVanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosPadroesVanWhereInput
    orderBy?: BancosPadroesVanOrderByWithAggregationInput | BancosPadroesVanOrderByWithAggregationInput[]
    by: BancosPadroesVanScalarFieldEnum[] | BancosPadroesVanScalarFieldEnum
    having?: BancosPadroesVanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancosPadroesVanCountAggregateInputType | true
    _avg?: BancosPadroesVanAvgAggregateInputType
    _sum?: BancosPadroesVanSumAggregateInputType
    _min?: BancosPadroesVanMinAggregateInputType
    _max?: BancosPadroesVanMaxAggregateInputType
  }

  export type BancosPadroesVanGroupByOutputType = {
    id: number
    bancoId: number
    padraoVanId: number
    _count: BancosPadroesVanCountAggregateOutputType | null
    _avg: BancosPadroesVanAvgAggregateOutputType | null
    _sum: BancosPadroesVanSumAggregateOutputType | null
    _min: BancosPadroesVanMinAggregateOutputType | null
    _max: BancosPadroesVanMaxAggregateOutputType | null
  }

  type GetBancosPadroesVanGroupByPayload<T extends BancosPadroesVanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancosPadroesVanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancosPadroesVanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancosPadroesVanGroupByOutputType[P]>
            : GetScalarType<T[P], BancosPadroesVanGroupByOutputType[P]>
        }
      >
    >


  export type BancosPadroesVanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosPadroesVan"]>

  export type BancosPadroesVanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosPadroesVan"]>

  export type BancosPadroesVanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosPadroesVan"]>

  export type BancosPadroesVanSelectScalar = {
    id?: boolean
    bancoId?: boolean
    padraoVanId?: boolean
  }

  export type BancosPadroesVanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bancoId" | "padraoVanId", ExtArgs["result"]["bancosPadroesVan"]>
  export type BancosPadroesVanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }
  export type BancosPadroesVanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }
  export type BancosPadroesVanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    padraoVan?: boolean | PadraoVanDefaultArgs<ExtArgs>
  }

  export type $BancosPadroesVanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BancosPadroesVan"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
      padraoVan: Prisma.$PadraoVanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bancoId: number
      padraoVanId: number
    }, ExtArgs["result"]["bancosPadroesVan"]>
    composites: {}
  }

  type BancosPadroesVanGetPayload<S extends boolean | null | undefined | BancosPadroesVanDefaultArgs> = $Result.GetResult<Prisma.$BancosPadroesVanPayload, S>

  type BancosPadroesVanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancosPadroesVanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancosPadroesVanCountAggregateInputType | true
    }

  export interface BancosPadroesVanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BancosPadroesVan'], meta: { name: 'BancosPadroesVan' } }
    /**
     * Find zero or one BancosPadroesVan that matches the filter.
     * @param {BancosPadroesVanFindUniqueArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancosPadroesVanFindUniqueArgs>(args: SelectSubset<T, BancosPadroesVanFindUniqueArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BancosPadroesVan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancosPadroesVanFindUniqueOrThrowArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancosPadroesVanFindUniqueOrThrowArgs>(args: SelectSubset<T, BancosPadroesVanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BancosPadroesVan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanFindFirstArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancosPadroesVanFindFirstArgs>(args?: SelectSubset<T, BancosPadroesVanFindFirstArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BancosPadroesVan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanFindFirstOrThrowArgs} args - Arguments to find a BancosPadroesVan
     * @example
     * // Get one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancosPadroesVanFindFirstOrThrowArgs>(args?: SelectSubset<T, BancosPadroesVanFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BancosPadroesVans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BancosPadroesVans
     * const bancosPadroesVans = await prisma.bancosPadroesVan.findMany()
     * 
     * // Get first 10 BancosPadroesVans
     * const bancosPadroesVans = await prisma.bancosPadroesVan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancosPadroesVanWithIdOnly = await prisma.bancosPadroesVan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancosPadroesVanFindManyArgs>(args?: SelectSubset<T, BancosPadroesVanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BancosPadroesVan.
     * @param {BancosPadroesVanCreateArgs} args - Arguments to create a BancosPadroesVan.
     * @example
     * // Create one BancosPadroesVan
     * const BancosPadroesVan = await prisma.bancosPadroesVan.create({
     *   data: {
     *     // ... data to create a BancosPadroesVan
     *   }
     * })
     * 
     */
    create<T extends BancosPadroesVanCreateArgs>(args: SelectSubset<T, BancosPadroesVanCreateArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BancosPadroesVans.
     * @param {BancosPadroesVanCreateManyArgs} args - Arguments to create many BancosPadroesVans.
     * @example
     * // Create many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancosPadroesVanCreateManyArgs>(args?: SelectSubset<T, BancosPadroesVanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BancosPadroesVans and returns the data saved in the database.
     * @param {BancosPadroesVanCreateManyAndReturnArgs} args - Arguments to create many BancosPadroesVans.
     * @example
     * // Create many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BancosPadroesVans and only return the `id`
     * const bancosPadroesVanWithIdOnly = await prisma.bancosPadroesVan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancosPadroesVanCreateManyAndReturnArgs>(args?: SelectSubset<T, BancosPadroesVanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BancosPadroesVan.
     * @param {BancosPadroesVanDeleteArgs} args - Arguments to delete one BancosPadroesVan.
     * @example
     * // Delete one BancosPadroesVan
     * const BancosPadroesVan = await prisma.bancosPadroesVan.delete({
     *   where: {
     *     // ... filter to delete one BancosPadroesVan
     *   }
     * })
     * 
     */
    delete<T extends BancosPadroesVanDeleteArgs>(args: SelectSubset<T, BancosPadroesVanDeleteArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BancosPadroesVan.
     * @param {BancosPadroesVanUpdateArgs} args - Arguments to update one BancosPadroesVan.
     * @example
     * // Update one BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancosPadroesVanUpdateArgs>(args: SelectSubset<T, BancosPadroesVanUpdateArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BancosPadroesVans.
     * @param {BancosPadroesVanDeleteManyArgs} args - Arguments to filter BancosPadroesVans to delete.
     * @example
     * // Delete a few BancosPadroesVans
     * const { count } = await prisma.bancosPadroesVan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancosPadroesVanDeleteManyArgs>(args?: SelectSubset<T, BancosPadroesVanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosPadroesVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancosPadroesVanUpdateManyArgs>(args: SelectSubset<T, BancosPadroesVanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosPadroesVans and returns the data updated in the database.
     * @param {BancosPadroesVanUpdateManyAndReturnArgs} args - Arguments to update many BancosPadroesVans.
     * @example
     * // Update many BancosPadroesVans
     * const bancosPadroesVan = await prisma.bancosPadroesVan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BancosPadroesVans and only return the `id`
     * const bancosPadroesVanWithIdOnly = await prisma.bancosPadroesVan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancosPadroesVanUpdateManyAndReturnArgs>(args: SelectSubset<T, BancosPadroesVanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BancosPadroesVan.
     * @param {BancosPadroesVanUpsertArgs} args - Arguments to update or create a BancosPadroesVan.
     * @example
     * // Update or create a BancosPadroesVan
     * const bancosPadroesVan = await prisma.bancosPadroesVan.upsert({
     *   create: {
     *     // ... data to create a BancosPadroesVan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BancosPadroesVan we want to update
     *   }
     * })
     */
    upsert<T extends BancosPadroesVanUpsertArgs>(args: SelectSubset<T, BancosPadroesVanUpsertArgs<ExtArgs>>): Prisma__BancosPadroesVanClient<$Result.GetResult<Prisma.$BancosPadroesVanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BancosPadroesVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanCountArgs} args - Arguments to filter BancosPadroesVans to count.
     * @example
     * // Count the number of BancosPadroesVans
     * const count = await prisma.bancosPadroesVan.count({
     *   where: {
     *     // ... the filter for the BancosPadroesVans we want to count
     *   }
     * })
    **/
    count<T extends BancosPadroesVanCountArgs>(
      args?: Subset<T, BancosPadroesVanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancosPadroesVanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BancosPadroesVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancosPadroesVanAggregateArgs>(args: Subset<T, BancosPadroesVanAggregateArgs>): Prisma.PrismaPromise<GetBancosPadroesVanAggregateType<T>>

    /**
     * Group by BancosPadroesVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosPadroesVanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancosPadroesVanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancosPadroesVanGroupByArgs['orderBy'] }
        : { orderBy?: BancosPadroesVanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancosPadroesVanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancosPadroesVanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BancosPadroesVan model
   */
  readonly fields: BancosPadroesVanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BancosPadroesVan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancosPadroesVanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    padraoVan<T extends PadraoVanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PadraoVanDefaultArgs<ExtArgs>>): Prisma__PadraoVanClient<$Result.GetResult<Prisma.$PadraoVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BancosPadroesVan model
   */ 
  interface BancosPadroesVanFieldRefs {
    readonly id: FieldRef<"BancosPadroesVan", 'Int'>
    readonly bancoId: FieldRef<"BancosPadroesVan", 'Int'>
    readonly padraoVanId: FieldRef<"BancosPadroesVan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BancosPadroesVan findUnique
   */
  export type BancosPadroesVanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan findUniqueOrThrow
   */
  export type BancosPadroesVanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan findFirst
   */
  export type BancosPadroesVanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosPadroesVans.
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosPadroesVans.
     */
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * BancosPadroesVan findFirstOrThrow
   */
  export type BancosPadroesVanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVan to fetch.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosPadroesVans.
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosPadroesVans.
     */
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * BancosPadroesVan findMany
   */
  export type BancosPadroesVanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter, which BancosPadroesVans to fetch.
     */
    where?: BancosPadroesVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosPadroesVans to fetch.
     */
    orderBy?: BancosPadroesVanOrderByWithRelationInput | BancosPadroesVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BancosPadroesVans.
     */
    cursor?: BancosPadroesVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosPadroesVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosPadroesVans.
     */
    skip?: number
    distinct?: BancosPadroesVanScalarFieldEnum | BancosPadroesVanScalarFieldEnum[]
  }

  /**
   * BancosPadroesVan create
   */
  export type BancosPadroesVanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * The data needed to create a BancosPadroesVan.
     */
    data: XOR<BancosPadroesVanCreateInput, BancosPadroesVanUncheckedCreateInput>
  }

  /**
   * BancosPadroesVan createMany
   */
  export type BancosPadroesVanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BancosPadroesVans.
     */
    data: BancosPadroesVanCreateManyInput | BancosPadroesVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BancosPadroesVan createManyAndReturn
   */
  export type BancosPadroesVanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * The data used to create many BancosPadroesVans.
     */
    data: BancosPadroesVanCreateManyInput | BancosPadroesVanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosPadroesVan update
   */
  export type BancosPadroesVanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * The data needed to update a BancosPadroesVan.
     */
    data: XOR<BancosPadroesVanUpdateInput, BancosPadroesVanUncheckedUpdateInput>
    /**
     * Choose, which BancosPadroesVan to update.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan updateMany
   */
  export type BancosPadroesVanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BancosPadroesVans.
     */
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyInput>
    /**
     * Filter which BancosPadroesVans to update
     */
    where?: BancosPadroesVanWhereInput
    /**
     * Limit how many BancosPadroesVans to update.
     */
    limit?: number
  }

  /**
   * BancosPadroesVan updateManyAndReturn
   */
  export type BancosPadroesVanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * The data used to update BancosPadroesVans.
     */
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyInput>
    /**
     * Filter which BancosPadroesVans to update
     */
    where?: BancosPadroesVanWhereInput
    /**
     * Limit how many BancosPadroesVans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosPadroesVan upsert
   */
  export type BancosPadroesVanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * The filter to search for the BancosPadroesVan to update in case it exists.
     */
    where: BancosPadroesVanWhereUniqueInput
    /**
     * In case the BancosPadroesVan found by the `where` argument doesn't exist, create a new BancosPadroesVan with this data.
     */
    create: XOR<BancosPadroesVanCreateInput, BancosPadroesVanUncheckedCreateInput>
    /**
     * In case the BancosPadroesVan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancosPadroesVanUpdateInput, BancosPadroesVanUncheckedUpdateInput>
  }

  /**
   * BancosPadroesVan delete
   */
  export type BancosPadroesVanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
    /**
     * Filter which BancosPadroesVan to delete.
     */
    where: BancosPadroesVanWhereUniqueInput
  }

  /**
   * BancosPadroesVan deleteMany
   */
  export type BancosPadroesVanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosPadroesVans to delete
     */
    where?: BancosPadroesVanWhereInput
    /**
     * Limit how many BancosPadroesVans to delete.
     */
    limit?: number
  }

  /**
   * BancosPadroesVan without action
   */
  export type BancosPadroesVanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosPadroesVan
     */
    select?: BancosPadroesVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosPadroesVan
     */
    omit?: BancosPadroesVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosPadroesVanInclude<ExtArgs> | null
  }


  /**
   * Model TipoCnab
   */

  export type AggregateTipoCnab = {
    _count: TipoCnabCountAggregateOutputType | null
    _avg: TipoCnabAvgAggregateOutputType | null
    _sum: TipoCnabSumAggregateOutputType | null
    _min: TipoCnabMinAggregateOutputType | null
    _max: TipoCnabMaxAggregateOutputType | null
  }

  export type TipoCnabAvgAggregateOutputType = {
    id: number | null
  }

  export type TipoCnabSumAggregateOutputType = {
    id: number | null
  }

  export type TipoCnabMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type TipoCnabMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type TipoCnabCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type TipoCnabAvgAggregateInputType = {
    id?: true
  }

  export type TipoCnabSumAggregateInputType = {
    id?: true
  }

  export type TipoCnabMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type TipoCnabMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type TipoCnabCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type TipoCnabAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoCnab to aggregate.
     */
    where?: TipoCnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoCnabs to fetch.
     */
    orderBy?: TipoCnabOrderByWithRelationInput | TipoCnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoCnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoCnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoCnabs
    **/
    _count?: true | TipoCnabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoCnabAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoCnabSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoCnabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoCnabMaxAggregateInputType
  }

  export type GetTipoCnabAggregateType<T extends TipoCnabAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoCnab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoCnab[P]>
      : GetScalarType<T[P], AggregateTipoCnab[P]>
  }




  export type TipoCnabGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoCnabWhereInput
    orderBy?: TipoCnabOrderByWithAggregationInput | TipoCnabOrderByWithAggregationInput[]
    by: TipoCnabScalarFieldEnum[] | TipoCnabScalarFieldEnum
    having?: TipoCnabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoCnabCountAggregateInputType | true
    _avg?: TipoCnabAvgAggregateInputType
    _sum?: TipoCnabSumAggregateInputType
    _min?: TipoCnabMinAggregateInputType
    _max?: TipoCnabMaxAggregateInputType
  }

  export type TipoCnabGroupByOutputType = {
    id: number
    descricao: string
    _count: TipoCnabCountAggregateOutputType | null
    _avg: TipoCnabAvgAggregateOutputType | null
    _sum: TipoCnabSumAggregateOutputType | null
    _min: TipoCnabMinAggregateOutputType | null
    _max: TipoCnabMaxAggregateOutputType | null
  }

  type GetTipoCnabGroupByPayload<T extends TipoCnabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoCnabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoCnabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoCnabGroupByOutputType[P]>
            : GetScalarType<T[P], TipoCnabGroupByOutputType[P]>
        }
      >
    >


  export type TipoCnabSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    bancosCnabs?: boolean | TipoCnab$bancosCnabsArgs<ExtArgs>
    cartasVan?: boolean | TipoCnab$cartasVanArgs<ExtArgs>
    _count?: boolean | TipoCnabCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoCnab"]>

  export type TipoCnabSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["tipoCnab"]>

  export type TipoCnabSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["tipoCnab"]>

  export type TipoCnabSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type TipoCnabOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao", ExtArgs["result"]["tipoCnab"]>
  export type TipoCnabInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancosCnabs?: boolean | TipoCnab$bancosCnabsArgs<ExtArgs>
    cartasVan?: boolean | TipoCnab$cartasVanArgs<ExtArgs>
    _count?: boolean | TipoCnabCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TipoCnabIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TipoCnabIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TipoCnabPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoCnab"
    objects: {
      bancosCnabs: Prisma.$BancosCnabsPayload<ExtArgs>[]
      cartasVan: Prisma.$CartaVanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["tipoCnab"]>
    composites: {}
  }

  type TipoCnabGetPayload<S extends boolean | null | undefined | TipoCnabDefaultArgs> = $Result.GetResult<Prisma.$TipoCnabPayload, S>

  type TipoCnabCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TipoCnabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TipoCnabCountAggregateInputType | true
    }

  export interface TipoCnabDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoCnab'], meta: { name: 'TipoCnab' } }
    /**
     * Find zero or one TipoCnab that matches the filter.
     * @param {TipoCnabFindUniqueArgs} args - Arguments to find a TipoCnab
     * @example
     * // Get one TipoCnab
     * const tipoCnab = await prisma.tipoCnab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipoCnabFindUniqueArgs>(args: SelectSubset<T, TipoCnabFindUniqueArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TipoCnab that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TipoCnabFindUniqueOrThrowArgs} args - Arguments to find a TipoCnab
     * @example
     * // Get one TipoCnab
     * const tipoCnab = await prisma.tipoCnab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipoCnabFindUniqueOrThrowArgs>(args: SelectSubset<T, TipoCnabFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TipoCnab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabFindFirstArgs} args - Arguments to find a TipoCnab
     * @example
     * // Get one TipoCnab
     * const tipoCnab = await prisma.tipoCnab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipoCnabFindFirstArgs>(args?: SelectSubset<T, TipoCnabFindFirstArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TipoCnab that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabFindFirstOrThrowArgs} args - Arguments to find a TipoCnab
     * @example
     * // Get one TipoCnab
     * const tipoCnab = await prisma.tipoCnab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipoCnabFindFirstOrThrowArgs>(args?: SelectSubset<T, TipoCnabFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TipoCnabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoCnabs
     * const tipoCnabs = await prisma.tipoCnab.findMany()
     * 
     * // Get first 10 TipoCnabs
     * const tipoCnabs = await prisma.tipoCnab.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoCnabWithIdOnly = await prisma.tipoCnab.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipoCnabFindManyArgs>(args?: SelectSubset<T, TipoCnabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TipoCnab.
     * @param {TipoCnabCreateArgs} args - Arguments to create a TipoCnab.
     * @example
     * // Create one TipoCnab
     * const TipoCnab = await prisma.tipoCnab.create({
     *   data: {
     *     // ... data to create a TipoCnab
     *   }
     * })
     * 
     */
    create<T extends TipoCnabCreateArgs>(args: SelectSubset<T, TipoCnabCreateArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TipoCnabs.
     * @param {TipoCnabCreateManyArgs} args - Arguments to create many TipoCnabs.
     * @example
     * // Create many TipoCnabs
     * const tipoCnab = await prisma.tipoCnab.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipoCnabCreateManyArgs>(args?: SelectSubset<T, TipoCnabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TipoCnabs and returns the data saved in the database.
     * @param {TipoCnabCreateManyAndReturnArgs} args - Arguments to create many TipoCnabs.
     * @example
     * // Create many TipoCnabs
     * const tipoCnab = await prisma.tipoCnab.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TipoCnabs and only return the `id`
     * const tipoCnabWithIdOnly = await prisma.tipoCnab.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TipoCnabCreateManyAndReturnArgs>(args?: SelectSubset<T, TipoCnabCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TipoCnab.
     * @param {TipoCnabDeleteArgs} args - Arguments to delete one TipoCnab.
     * @example
     * // Delete one TipoCnab
     * const TipoCnab = await prisma.tipoCnab.delete({
     *   where: {
     *     // ... filter to delete one TipoCnab
     *   }
     * })
     * 
     */
    delete<T extends TipoCnabDeleteArgs>(args: SelectSubset<T, TipoCnabDeleteArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TipoCnab.
     * @param {TipoCnabUpdateArgs} args - Arguments to update one TipoCnab.
     * @example
     * // Update one TipoCnab
     * const tipoCnab = await prisma.tipoCnab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipoCnabUpdateArgs>(args: SelectSubset<T, TipoCnabUpdateArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TipoCnabs.
     * @param {TipoCnabDeleteManyArgs} args - Arguments to filter TipoCnabs to delete.
     * @example
     * // Delete a few TipoCnabs
     * const { count } = await prisma.tipoCnab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipoCnabDeleteManyArgs>(args?: SelectSubset<T, TipoCnabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoCnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoCnabs
     * const tipoCnab = await prisma.tipoCnab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipoCnabUpdateManyArgs>(args: SelectSubset<T, TipoCnabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoCnabs and returns the data updated in the database.
     * @param {TipoCnabUpdateManyAndReturnArgs} args - Arguments to update many TipoCnabs.
     * @example
     * // Update many TipoCnabs
     * const tipoCnab = await prisma.tipoCnab.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TipoCnabs and only return the `id`
     * const tipoCnabWithIdOnly = await prisma.tipoCnab.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TipoCnabUpdateManyAndReturnArgs>(args: SelectSubset<T, TipoCnabUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one TipoCnab.
     * @param {TipoCnabUpsertArgs} args - Arguments to update or create a TipoCnab.
     * @example
     * // Update or create a TipoCnab
     * const tipoCnab = await prisma.tipoCnab.upsert({
     *   create: {
     *     // ... data to create a TipoCnab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoCnab we want to update
     *   }
     * })
     */
    upsert<T extends TipoCnabUpsertArgs>(args: SelectSubset<T, TipoCnabUpsertArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TipoCnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabCountArgs} args - Arguments to filter TipoCnabs to count.
     * @example
     * // Count the number of TipoCnabs
     * const count = await prisma.tipoCnab.count({
     *   where: {
     *     // ... the filter for the TipoCnabs we want to count
     *   }
     * })
    **/
    count<T extends TipoCnabCountArgs>(
      args?: Subset<T, TipoCnabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoCnabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoCnab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoCnabAggregateArgs>(args: Subset<T, TipoCnabAggregateArgs>): Prisma.PrismaPromise<GetTipoCnabAggregateType<T>>

    /**
     * Group by TipoCnab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoCnabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoCnabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoCnabGroupByArgs['orderBy'] }
        : { orderBy?: TipoCnabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoCnabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoCnabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoCnab model
   */
  readonly fields: TipoCnabFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoCnab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoCnabClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bancosCnabs<T extends TipoCnab$bancosCnabsArgs<ExtArgs> = {}>(args?: Subset<T, TipoCnab$bancosCnabsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cartasVan<T extends TipoCnab$cartasVanArgs<ExtArgs> = {}>(args?: Subset<T, TipoCnab$cartasVanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipoCnab model
   */ 
  interface TipoCnabFieldRefs {
    readonly id: FieldRef<"TipoCnab", 'Int'>
    readonly descricao: FieldRef<"TipoCnab", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TipoCnab findUnique
   */
  export type TipoCnabFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * Filter, which TipoCnab to fetch.
     */
    where: TipoCnabWhereUniqueInput
  }

  /**
   * TipoCnab findUniqueOrThrow
   */
  export type TipoCnabFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * Filter, which TipoCnab to fetch.
     */
    where: TipoCnabWhereUniqueInput
  }

  /**
   * TipoCnab findFirst
   */
  export type TipoCnabFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * Filter, which TipoCnab to fetch.
     */
    where?: TipoCnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoCnabs to fetch.
     */
    orderBy?: TipoCnabOrderByWithRelationInput | TipoCnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoCnabs.
     */
    cursor?: TipoCnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoCnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoCnabs.
     */
    distinct?: TipoCnabScalarFieldEnum | TipoCnabScalarFieldEnum[]
  }

  /**
   * TipoCnab findFirstOrThrow
   */
  export type TipoCnabFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * Filter, which TipoCnab to fetch.
     */
    where?: TipoCnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoCnabs to fetch.
     */
    orderBy?: TipoCnabOrderByWithRelationInput | TipoCnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoCnabs.
     */
    cursor?: TipoCnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoCnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoCnabs.
     */
    distinct?: TipoCnabScalarFieldEnum | TipoCnabScalarFieldEnum[]
  }

  /**
   * TipoCnab findMany
   */
  export type TipoCnabFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * Filter, which TipoCnabs to fetch.
     */
    where?: TipoCnabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoCnabs to fetch.
     */
    orderBy?: TipoCnabOrderByWithRelationInput | TipoCnabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoCnabs.
     */
    cursor?: TipoCnabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoCnabs.
     */
    skip?: number
    distinct?: TipoCnabScalarFieldEnum | TipoCnabScalarFieldEnum[]
  }

  /**
   * TipoCnab create
   */
  export type TipoCnabCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoCnab.
     */
    data: XOR<TipoCnabCreateInput, TipoCnabUncheckedCreateInput>
  }

  /**
   * TipoCnab createMany
   */
  export type TipoCnabCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoCnabs.
     */
    data: TipoCnabCreateManyInput | TipoCnabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoCnab createManyAndReturn
   */
  export type TipoCnabCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * The data used to create many TipoCnabs.
     */
    data: TipoCnabCreateManyInput | TipoCnabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoCnab update
   */
  export type TipoCnabUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoCnab.
     */
    data: XOR<TipoCnabUpdateInput, TipoCnabUncheckedUpdateInput>
    /**
     * Choose, which TipoCnab to update.
     */
    where: TipoCnabWhereUniqueInput
  }

  /**
   * TipoCnab updateMany
   */
  export type TipoCnabUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoCnabs.
     */
    data: XOR<TipoCnabUpdateManyMutationInput, TipoCnabUncheckedUpdateManyInput>
    /**
     * Filter which TipoCnabs to update
     */
    where?: TipoCnabWhereInput
    /**
     * Limit how many TipoCnabs to update.
     */
    limit?: number
  }

  /**
   * TipoCnab updateManyAndReturn
   */
  export type TipoCnabUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * The data used to update TipoCnabs.
     */
    data: XOR<TipoCnabUpdateManyMutationInput, TipoCnabUncheckedUpdateManyInput>
    /**
     * Filter which TipoCnabs to update
     */
    where?: TipoCnabWhereInput
    /**
     * Limit how many TipoCnabs to update.
     */
    limit?: number
  }

  /**
   * TipoCnab upsert
   */
  export type TipoCnabUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoCnab to update in case it exists.
     */
    where: TipoCnabWhereUniqueInput
    /**
     * In case the TipoCnab found by the `where` argument doesn't exist, create a new TipoCnab with this data.
     */
    create: XOR<TipoCnabCreateInput, TipoCnabUncheckedCreateInput>
    /**
     * In case the TipoCnab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoCnabUpdateInput, TipoCnabUncheckedUpdateInput>
  }

  /**
   * TipoCnab delete
   */
  export type TipoCnabDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
    /**
     * Filter which TipoCnab to delete.
     */
    where: TipoCnabWhereUniqueInput
  }

  /**
   * TipoCnab deleteMany
   */
  export type TipoCnabDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoCnabs to delete
     */
    where?: TipoCnabWhereInput
    /**
     * Limit how many TipoCnabs to delete.
     */
    limit?: number
  }

  /**
   * TipoCnab.bancosCnabs
   */
  export type TipoCnab$bancosCnabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    where?: BancosCnabsWhereInput
    orderBy?: BancosCnabsOrderByWithRelationInput | BancosCnabsOrderByWithRelationInput[]
    cursor?: BancosCnabsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosCnabsScalarFieldEnum | BancosCnabsScalarFieldEnum[]
  }

  /**
   * TipoCnab.cartasVan
   */
  export type TipoCnab$cartasVanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    where?: CartaVanWhereInput
    orderBy?: CartaVanOrderByWithRelationInput | CartaVanOrderByWithRelationInput[]
    cursor?: CartaVanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartaVanScalarFieldEnum | CartaVanScalarFieldEnum[]
  }

  /**
   * TipoCnab without action
   */
  export type TipoCnabDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoCnab
     */
    select?: TipoCnabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoCnab
     */
    omit?: TipoCnabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoCnabInclude<ExtArgs> | null
  }


  /**
   * Model BancosCnabs
   */

  export type AggregateBancosCnabs = {
    _count: BancosCnabsCountAggregateOutputType | null
    _avg: BancosCnabsAvgAggregateOutputType | null
    _sum: BancosCnabsSumAggregateOutputType | null
    _min: BancosCnabsMinAggregateOutputType | null
    _max: BancosCnabsMaxAggregateOutputType | null
  }

  export type BancosCnabsAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
    cnabId: number | null
  }

  export type BancosCnabsSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
    cnabId: number | null
  }

  export type BancosCnabsMinAggregateOutputType = {
    id: number | null
    bancoId: number | null
    cnabId: number | null
  }

  export type BancosCnabsMaxAggregateOutputType = {
    id: number | null
    bancoId: number | null
    cnabId: number | null
  }

  export type BancosCnabsCountAggregateOutputType = {
    id: number
    bancoId: number
    cnabId: number
    _all: number
  }


  export type BancosCnabsAvgAggregateInputType = {
    id?: true
    bancoId?: true
    cnabId?: true
  }

  export type BancosCnabsSumAggregateInputType = {
    id?: true
    bancoId?: true
    cnabId?: true
  }

  export type BancosCnabsMinAggregateInputType = {
    id?: true
    bancoId?: true
    cnabId?: true
  }

  export type BancosCnabsMaxAggregateInputType = {
    id?: true
    bancoId?: true
    cnabId?: true
  }

  export type BancosCnabsCountAggregateInputType = {
    id?: true
    bancoId?: true
    cnabId?: true
    _all?: true
  }

  export type BancosCnabsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosCnabs to aggregate.
     */
    where?: BancosCnabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosCnabs to fetch.
     */
    orderBy?: BancosCnabsOrderByWithRelationInput | BancosCnabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancosCnabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosCnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BancosCnabs
    **/
    _count?: true | BancosCnabsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancosCnabsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancosCnabsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancosCnabsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancosCnabsMaxAggregateInputType
  }

  export type GetBancosCnabsAggregateType<T extends BancosCnabsAggregateArgs> = {
        [P in keyof T & keyof AggregateBancosCnabs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBancosCnabs[P]>
      : GetScalarType<T[P], AggregateBancosCnabs[P]>
  }




  export type BancosCnabsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosCnabsWhereInput
    orderBy?: BancosCnabsOrderByWithAggregationInput | BancosCnabsOrderByWithAggregationInput[]
    by: BancosCnabsScalarFieldEnum[] | BancosCnabsScalarFieldEnum
    having?: BancosCnabsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancosCnabsCountAggregateInputType | true
    _avg?: BancosCnabsAvgAggregateInputType
    _sum?: BancosCnabsSumAggregateInputType
    _min?: BancosCnabsMinAggregateInputType
    _max?: BancosCnabsMaxAggregateInputType
  }

  export type BancosCnabsGroupByOutputType = {
    id: number
    bancoId: number
    cnabId: number
    _count: BancosCnabsCountAggregateOutputType | null
    _avg: BancosCnabsAvgAggregateOutputType | null
    _sum: BancosCnabsSumAggregateOutputType | null
    _min: BancosCnabsMinAggregateOutputType | null
    _max: BancosCnabsMaxAggregateOutputType | null
  }

  type GetBancosCnabsGroupByPayload<T extends BancosCnabsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancosCnabsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancosCnabsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancosCnabsGroupByOutputType[P]>
            : GetScalarType<T[P], BancosCnabsGroupByOutputType[P]>
        }
      >
    >


  export type BancosCnabsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    cnabId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosCnabs"]>

  export type BancosCnabsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    cnabId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosCnabs"]>

  export type BancosCnabsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    cnabId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosCnabs"]>

  export type BancosCnabsSelectScalar = {
    id?: boolean
    bancoId?: boolean
    cnabId?: boolean
  }

  export type BancosCnabsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bancoId" | "cnabId", ExtArgs["result"]["bancosCnabs"]>
  export type BancosCnabsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }
  export type BancosCnabsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }
  export type BancosCnabsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }

  export type $BancosCnabsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BancosCnabs"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
      tipoCnab: Prisma.$TipoCnabPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bancoId: number
      cnabId: number
    }, ExtArgs["result"]["bancosCnabs"]>
    composites: {}
  }

  type BancosCnabsGetPayload<S extends boolean | null | undefined | BancosCnabsDefaultArgs> = $Result.GetResult<Prisma.$BancosCnabsPayload, S>

  type BancosCnabsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancosCnabsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancosCnabsCountAggregateInputType | true
    }

  export interface BancosCnabsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BancosCnabs'], meta: { name: 'BancosCnabs' } }
    /**
     * Find zero or one BancosCnabs that matches the filter.
     * @param {BancosCnabsFindUniqueArgs} args - Arguments to find a BancosCnabs
     * @example
     * // Get one BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancosCnabsFindUniqueArgs>(args: SelectSubset<T, BancosCnabsFindUniqueArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BancosCnabs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancosCnabsFindUniqueOrThrowArgs} args - Arguments to find a BancosCnabs
     * @example
     * // Get one BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancosCnabsFindUniqueOrThrowArgs>(args: SelectSubset<T, BancosCnabsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BancosCnabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsFindFirstArgs} args - Arguments to find a BancosCnabs
     * @example
     * // Get one BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancosCnabsFindFirstArgs>(args?: SelectSubset<T, BancosCnabsFindFirstArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BancosCnabs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsFindFirstOrThrowArgs} args - Arguments to find a BancosCnabs
     * @example
     * // Get one BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancosCnabsFindFirstOrThrowArgs>(args?: SelectSubset<T, BancosCnabsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BancosCnabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.findMany()
     * 
     * // Get first 10 BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancosCnabsWithIdOnly = await prisma.bancosCnabs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancosCnabsFindManyArgs>(args?: SelectSubset<T, BancosCnabsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BancosCnabs.
     * @param {BancosCnabsCreateArgs} args - Arguments to create a BancosCnabs.
     * @example
     * // Create one BancosCnabs
     * const BancosCnabs = await prisma.bancosCnabs.create({
     *   data: {
     *     // ... data to create a BancosCnabs
     *   }
     * })
     * 
     */
    create<T extends BancosCnabsCreateArgs>(args: SelectSubset<T, BancosCnabsCreateArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BancosCnabs.
     * @param {BancosCnabsCreateManyArgs} args - Arguments to create many BancosCnabs.
     * @example
     * // Create many BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancosCnabsCreateManyArgs>(args?: SelectSubset<T, BancosCnabsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BancosCnabs and returns the data saved in the database.
     * @param {BancosCnabsCreateManyAndReturnArgs} args - Arguments to create many BancosCnabs.
     * @example
     * // Create many BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BancosCnabs and only return the `id`
     * const bancosCnabsWithIdOnly = await prisma.bancosCnabs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancosCnabsCreateManyAndReturnArgs>(args?: SelectSubset<T, BancosCnabsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BancosCnabs.
     * @param {BancosCnabsDeleteArgs} args - Arguments to delete one BancosCnabs.
     * @example
     * // Delete one BancosCnabs
     * const BancosCnabs = await prisma.bancosCnabs.delete({
     *   where: {
     *     // ... filter to delete one BancosCnabs
     *   }
     * })
     * 
     */
    delete<T extends BancosCnabsDeleteArgs>(args: SelectSubset<T, BancosCnabsDeleteArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BancosCnabs.
     * @param {BancosCnabsUpdateArgs} args - Arguments to update one BancosCnabs.
     * @example
     * // Update one BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancosCnabsUpdateArgs>(args: SelectSubset<T, BancosCnabsUpdateArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BancosCnabs.
     * @param {BancosCnabsDeleteManyArgs} args - Arguments to filter BancosCnabs to delete.
     * @example
     * // Delete a few BancosCnabs
     * const { count } = await prisma.bancosCnabs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancosCnabsDeleteManyArgs>(args?: SelectSubset<T, BancosCnabsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosCnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancosCnabsUpdateManyArgs>(args: SelectSubset<T, BancosCnabsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosCnabs and returns the data updated in the database.
     * @param {BancosCnabsUpdateManyAndReturnArgs} args - Arguments to update many BancosCnabs.
     * @example
     * // Update many BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BancosCnabs and only return the `id`
     * const bancosCnabsWithIdOnly = await prisma.bancosCnabs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancosCnabsUpdateManyAndReturnArgs>(args: SelectSubset<T, BancosCnabsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BancosCnabs.
     * @param {BancosCnabsUpsertArgs} args - Arguments to update or create a BancosCnabs.
     * @example
     * // Update or create a BancosCnabs
     * const bancosCnabs = await prisma.bancosCnabs.upsert({
     *   create: {
     *     // ... data to create a BancosCnabs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BancosCnabs we want to update
     *   }
     * })
     */
    upsert<T extends BancosCnabsUpsertArgs>(args: SelectSubset<T, BancosCnabsUpsertArgs<ExtArgs>>): Prisma__BancosCnabsClient<$Result.GetResult<Prisma.$BancosCnabsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BancosCnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsCountArgs} args - Arguments to filter BancosCnabs to count.
     * @example
     * // Count the number of BancosCnabs
     * const count = await prisma.bancosCnabs.count({
     *   where: {
     *     // ... the filter for the BancosCnabs we want to count
     *   }
     * })
    **/
    count<T extends BancosCnabsCountArgs>(
      args?: Subset<T, BancosCnabsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancosCnabsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BancosCnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancosCnabsAggregateArgs>(args: Subset<T, BancosCnabsAggregateArgs>): Prisma.PrismaPromise<GetBancosCnabsAggregateType<T>>

    /**
     * Group by BancosCnabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosCnabsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancosCnabsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancosCnabsGroupByArgs['orderBy'] }
        : { orderBy?: BancosCnabsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancosCnabsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancosCnabsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BancosCnabs model
   */
  readonly fields: BancosCnabsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BancosCnabs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancosCnabsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    tipoCnab<T extends TipoCnabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipoCnabDefaultArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BancosCnabs model
   */ 
  interface BancosCnabsFieldRefs {
    readonly id: FieldRef<"BancosCnabs", 'Int'>
    readonly bancoId: FieldRef<"BancosCnabs", 'Int'>
    readonly cnabId: FieldRef<"BancosCnabs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BancosCnabs findUnique
   */
  export type BancosCnabsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * Filter, which BancosCnabs to fetch.
     */
    where: BancosCnabsWhereUniqueInput
  }

  /**
   * BancosCnabs findUniqueOrThrow
   */
  export type BancosCnabsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * Filter, which BancosCnabs to fetch.
     */
    where: BancosCnabsWhereUniqueInput
  }

  /**
   * BancosCnabs findFirst
   */
  export type BancosCnabsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * Filter, which BancosCnabs to fetch.
     */
    where?: BancosCnabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosCnabs to fetch.
     */
    orderBy?: BancosCnabsOrderByWithRelationInput | BancosCnabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosCnabs.
     */
    cursor?: BancosCnabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosCnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosCnabs.
     */
    distinct?: BancosCnabsScalarFieldEnum | BancosCnabsScalarFieldEnum[]
  }

  /**
   * BancosCnabs findFirstOrThrow
   */
  export type BancosCnabsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * Filter, which BancosCnabs to fetch.
     */
    where?: BancosCnabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosCnabs to fetch.
     */
    orderBy?: BancosCnabsOrderByWithRelationInput | BancosCnabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosCnabs.
     */
    cursor?: BancosCnabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosCnabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosCnabs.
     */
    distinct?: BancosCnabsScalarFieldEnum | BancosCnabsScalarFieldEnum[]
  }

  /**
   * BancosCnabs findMany
   */
  export type BancosCnabsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * Filter, which BancosCnabs to fetch.
     */
    where?: BancosCnabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosCnabs to fetch.
     */
    orderBy?: BancosCnabsOrderByWithRelationInput | BancosCnabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BancosCnabs.
     */
    cursor?: BancosCnabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosCnabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosCnabs.
     */
    skip?: number
    distinct?: BancosCnabsScalarFieldEnum | BancosCnabsScalarFieldEnum[]
  }

  /**
   * BancosCnabs create
   */
  export type BancosCnabsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * The data needed to create a BancosCnabs.
     */
    data: XOR<BancosCnabsCreateInput, BancosCnabsUncheckedCreateInput>
  }

  /**
   * BancosCnabs createMany
   */
  export type BancosCnabsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BancosCnabs.
     */
    data: BancosCnabsCreateManyInput | BancosCnabsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BancosCnabs createManyAndReturn
   */
  export type BancosCnabsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * The data used to create many BancosCnabs.
     */
    data: BancosCnabsCreateManyInput | BancosCnabsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosCnabs update
   */
  export type BancosCnabsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * The data needed to update a BancosCnabs.
     */
    data: XOR<BancosCnabsUpdateInput, BancosCnabsUncheckedUpdateInput>
    /**
     * Choose, which BancosCnabs to update.
     */
    where: BancosCnabsWhereUniqueInput
  }

  /**
   * BancosCnabs updateMany
   */
  export type BancosCnabsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BancosCnabs.
     */
    data: XOR<BancosCnabsUpdateManyMutationInput, BancosCnabsUncheckedUpdateManyInput>
    /**
     * Filter which BancosCnabs to update
     */
    where?: BancosCnabsWhereInput
    /**
     * Limit how many BancosCnabs to update.
     */
    limit?: number
  }

  /**
   * BancosCnabs updateManyAndReturn
   */
  export type BancosCnabsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * The data used to update BancosCnabs.
     */
    data: XOR<BancosCnabsUpdateManyMutationInput, BancosCnabsUncheckedUpdateManyInput>
    /**
     * Filter which BancosCnabs to update
     */
    where?: BancosCnabsWhereInput
    /**
     * Limit how many BancosCnabs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosCnabs upsert
   */
  export type BancosCnabsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * The filter to search for the BancosCnabs to update in case it exists.
     */
    where: BancosCnabsWhereUniqueInput
    /**
     * In case the BancosCnabs found by the `where` argument doesn't exist, create a new BancosCnabs with this data.
     */
    create: XOR<BancosCnabsCreateInput, BancosCnabsUncheckedCreateInput>
    /**
     * In case the BancosCnabs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancosCnabsUpdateInput, BancosCnabsUncheckedUpdateInput>
  }

  /**
   * BancosCnabs delete
   */
  export type BancosCnabsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
    /**
     * Filter which BancosCnabs to delete.
     */
    where: BancosCnabsWhereUniqueInput
  }

  /**
   * BancosCnabs deleteMany
   */
  export type BancosCnabsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosCnabs to delete
     */
    where?: BancosCnabsWhereInput
    /**
     * Limit how many BancosCnabs to delete.
     */
    limit?: number
  }

  /**
   * BancosCnabs without action
   */
  export type BancosCnabsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosCnabs
     */
    select?: BancosCnabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosCnabs
     */
    omit?: BancosCnabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosCnabsInclude<ExtArgs> | null
  }


  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    bancos?: boolean | Produto$bancosArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
  }

  export type ProdutoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "descricao", ExtArgs["result"]["produto"]>
  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bancos?: boolean | Produto$bancosArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProdutoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProdutoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      bancos: Prisma.$BancosProdutosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }

  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoFindUniqueArgs>(args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Produto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoFindFirstArgs>(args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoFindManyArgs>(args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
     */
    create<T extends ProdutoCreateArgs>(args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Produtos.
     * @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCreateManyArgs>(args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produtos and returns the data saved in the database.
     * @param {ProdutoCreateManyAndReturnArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProdutoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProdutoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
     */
    delete<T extends ProdutoDeleteArgs>(args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoUpdateArgs>(args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoDeleteManyArgs>(args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoUpdateManyArgs>(args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos and returns the data updated in the database.
     * @param {ProdutoUpdateManyAndReturnArgs} args - Arguments to update many Produtos.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProdutoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProdutoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoUpsertArgs>(args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bancos<T extends Produto$bancosArgs<ExtArgs> = {}>(args?: Subset<T, Produto$bancosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produto model
   */ 
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'Int'>
    readonly nome: FieldRef<"Produto", 'String'>
    readonly descricao: FieldRef<"Produto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }

  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto createManyAndReturn
   */
  export type ProdutoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
  }

  /**
   * Produto updateManyAndReturn
   */
  export type ProdutoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
  }

  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }

  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to delete.
     */
    limit?: number
  }

  /**
   * Produto.bancos
   */
  export type Produto$bancosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    where?: BancosProdutosWhereInput
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    cursor?: BancosProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
  }


  /**
   * Model BancosProdutos
   */

  export type AggregateBancosProdutos = {
    _count: BancosProdutosCountAggregateOutputType | null
    _avg: BancosProdutosAvgAggregateOutputType | null
    _sum: BancosProdutosSumAggregateOutputType | null
    _min: BancosProdutosMinAggregateOutputType | null
    _max: BancosProdutosMaxAggregateOutputType | null
  }

  export type BancosProdutosAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosMinAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosMaxAggregateOutputType = {
    id: number | null
    bancoId: number | null
    produtoId: number | null
  }

  export type BancosProdutosCountAggregateOutputType = {
    id: number
    bancoId: number
    produtoId: number
    _all: number
  }


  export type BancosProdutosAvgAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosSumAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosMinAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosMaxAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
  }

  export type BancosProdutosCountAggregateInputType = {
    id?: true
    bancoId?: true
    produtoId?: true
    _all?: true
  }

  export type BancosProdutosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosProdutos to aggregate.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BancosProdutos
    **/
    _count?: true | BancosProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancosProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancosProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancosProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancosProdutosMaxAggregateInputType
  }

  export type GetBancosProdutosAggregateType<T extends BancosProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateBancosProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBancosProdutos[P]>
      : GetScalarType<T[P], AggregateBancosProdutos[P]>
  }




  export type BancosProdutosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancosProdutosWhereInput
    orderBy?: BancosProdutosOrderByWithAggregationInput | BancosProdutosOrderByWithAggregationInput[]
    by: BancosProdutosScalarFieldEnum[] | BancosProdutosScalarFieldEnum
    having?: BancosProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancosProdutosCountAggregateInputType | true
    _avg?: BancosProdutosAvgAggregateInputType
    _sum?: BancosProdutosSumAggregateInputType
    _min?: BancosProdutosMinAggregateInputType
    _max?: BancosProdutosMaxAggregateInputType
  }

  export type BancosProdutosGroupByOutputType = {
    id: number
    bancoId: number
    produtoId: number
    _count: BancosProdutosCountAggregateOutputType | null
    _avg: BancosProdutosAvgAggregateOutputType | null
    _sum: BancosProdutosSumAggregateOutputType | null
    _min: BancosProdutosMinAggregateOutputType | null
    _max: BancosProdutosMaxAggregateOutputType | null
  }

  type GetBancosProdutosGroupByPayload<T extends BancosProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancosProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancosProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancosProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], BancosProdutosGroupByOutputType[P]>
        }
      >
    >


  export type BancosProdutosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosProdutos"]>

  export type BancosProdutosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosProdutos"]>

  export type BancosProdutosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bancosProdutos"]>

  export type BancosProdutosSelectScalar = {
    id?: boolean
    bancoId?: boolean
    produtoId?: boolean
  }

  export type BancosProdutosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bancoId" | "produtoId", ExtArgs["result"]["bancosProdutos"]>
  export type BancosProdutosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }
  export type BancosProdutosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }
  export type BancosProdutosIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }

  export type $BancosProdutosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BancosProdutos"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
      produto: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bancoId: number
      produtoId: number
    }, ExtArgs["result"]["bancosProdutos"]>
    composites: {}
  }

  type BancosProdutosGetPayload<S extends boolean | null | undefined | BancosProdutosDefaultArgs> = $Result.GetResult<Prisma.$BancosProdutosPayload, S>

  type BancosProdutosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BancosProdutosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BancosProdutosCountAggregateInputType | true
    }

  export interface BancosProdutosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BancosProdutos'], meta: { name: 'BancosProdutos' } }
    /**
     * Find zero or one BancosProdutos that matches the filter.
     * @param {BancosProdutosFindUniqueArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancosProdutosFindUniqueArgs>(args: SelectSubset<T, BancosProdutosFindUniqueArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BancosProdutos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BancosProdutosFindUniqueOrThrowArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancosProdutosFindUniqueOrThrowArgs>(args: SelectSubset<T, BancosProdutosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BancosProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosFindFirstArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancosProdutosFindFirstArgs>(args?: SelectSubset<T, BancosProdutosFindFirstArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BancosProdutos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosFindFirstOrThrowArgs} args - Arguments to find a BancosProdutos
     * @example
     * // Get one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancosProdutosFindFirstOrThrowArgs>(args?: SelectSubset<T, BancosProdutosFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BancosProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findMany()
     * 
     * // Get first 10 BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancosProdutosWithIdOnly = await prisma.bancosProdutos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancosProdutosFindManyArgs>(args?: SelectSubset<T, BancosProdutosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BancosProdutos.
     * @param {BancosProdutosCreateArgs} args - Arguments to create a BancosProdutos.
     * @example
     * // Create one BancosProdutos
     * const BancosProdutos = await prisma.bancosProdutos.create({
     *   data: {
     *     // ... data to create a BancosProdutos
     *   }
     * })
     * 
     */
    create<T extends BancosProdutosCreateArgs>(args: SelectSubset<T, BancosProdutosCreateArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BancosProdutos.
     * @param {BancosProdutosCreateManyArgs} args - Arguments to create many BancosProdutos.
     * @example
     * // Create many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancosProdutosCreateManyArgs>(args?: SelectSubset<T, BancosProdutosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BancosProdutos and returns the data saved in the database.
     * @param {BancosProdutosCreateManyAndReturnArgs} args - Arguments to create many BancosProdutos.
     * @example
     * // Create many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BancosProdutos and only return the `id`
     * const bancosProdutosWithIdOnly = await prisma.bancosProdutos.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BancosProdutosCreateManyAndReturnArgs>(args?: SelectSubset<T, BancosProdutosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BancosProdutos.
     * @param {BancosProdutosDeleteArgs} args - Arguments to delete one BancosProdutos.
     * @example
     * // Delete one BancosProdutos
     * const BancosProdutos = await prisma.bancosProdutos.delete({
     *   where: {
     *     // ... filter to delete one BancosProdutos
     *   }
     * })
     * 
     */
    delete<T extends BancosProdutosDeleteArgs>(args: SelectSubset<T, BancosProdutosDeleteArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BancosProdutos.
     * @param {BancosProdutosUpdateArgs} args - Arguments to update one BancosProdutos.
     * @example
     * // Update one BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancosProdutosUpdateArgs>(args: SelectSubset<T, BancosProdutosUpdateArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BancosProdutos.
     * @param {BancosProdutosDeleteManyArgs} args - Arguments to filter BancosProdutos to delete.
     * @example
     * // Delete a few BancosProdutos
     * const { count } = await prisma.bancosProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancosProdutosDeleteManyArgs>(args?: SelectSubset<T, BancosProdutosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancosProdutosUpdateManyArgs>(args: SelectSubset<T, BancosProdutosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BancosProdutos and returns the data updated in the database.
     * @param {BancosProdutosUpdateManyAndReturnArgs} args - Arguments to update many BancosProdutos.
     * @example
     * // Update many BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BancosProdutos and only return the `id`
     * const bancosProdutosWithIdOnly = await prisma.bancosProdutos.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BancosProdutosUpdateManyAndReturnArgs>(args: SelectSubset<T, BancosProdutosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BancosProdutos.
     * @param {BancosProdutosUpsertArgs} args - Arguments to update or create a BancosProdutos.
     * @example
     * // Update or create a BancosProdutos
     * const bancosProdutos = await prisma.bancosProdutos.upsert({
     *   create: {
     *     // ... data to create a BancosProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BancosProdutos we want to update
     *   }
     * })
     */
    upsert<T extends BancosProdutosUpsertArgs>(args: SelectSubset<T, BancosProdutosUpsertArgs<ExtArgs>>): Prisma__BancosProdutosClient<$Result.GetResult<Prisma.$BancosProdutosPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosCountArgs} args - Arguments to filter BancosProdutos to count.
     * @example
     * // Count the number of BancosProdutos
     * const count = await prisma.bancosProdutos.count({
     *   where: {
     *     // ... the filter for the BancosProdutos we want to count
     *   }
     * })
    **/
    count<T extends BancosProdutosCountArgs>(
      args?: Subset<T, BancosProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancosProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancosProdutosAggregateArgs>(args: Subset<T, BancosProdutosAggregateArgs>): Prisma.PrismaPromise<GetBancosProdutosAggregateType<T>>

    /**
     * Group by BancosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancosProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancosProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancosProdutosGroupByArgs['orderBy'] }
        : { orderBy?: BancosProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancosProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancosProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BancosProdutos model
   */
  readonly fields: BancosProdutosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BancosProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancosProdutosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    produto<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BancosProdutos model
   */ 
  interface BancosProdutosFieldRefs {
    readonly id: FieldRef<"BancosProdutos", 'Int'>
    readonly bancoId: FieldRef<"BancosProdutos", 'Int'>
    readonly produtoId: FieldRef<"BancosProdutos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BancosProdutos findUnique
   */
  export type BancosProdutosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos findUniqueOrThrow
   */
  export type BancosProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos findFirst
   */
  export type BancosProdutosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosProdutos.
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosProdutos.
     */
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * BancosProdutos findFirstOrThrow
   */
  export type BancosProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BancosProdutos.
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BancosProdutos.
     */
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * BancosProdutos findMany
   */
  export type BancosProdutosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter, which BancosProdutos to fetch.
     */
    where?: BancosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BancosProdutos to fetch.
     */
    orderBy?: BancosProdutosOrderByWithRelationInput | BancosProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BancosProdutos.
     */
    cursor?: BancosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BancosProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BancosProdutos.
     */
    skip?: number
    distinct?: BancosProdutosScalarFieldEnum | BancosProdutosScalarFieldEnum[]
  }

  /**
   * BancosProdutos create
   */
  export type BancosProdutosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * The data needed to create a BancosProdutos.
     */
    data: XOR<BancosProdutosCreateInput, BancosProdutosUncheckedCreateInput>
  }

  /**
   * BancosProdutos createMany
   */
  export type BancosProdutosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BancosProdutos.
     */
    data: BancosProdutosCreateManyInput | BancosProdutosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BancosProdutos createManyAndReturn
   */
  export type BancosProdutosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * The data used to create many BancosProdutos.
     */
    data: BancosProdutosCreateManyInput | BancosProdutosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosProdutos update
   */
  export type BancosProdutosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * The data needed to update a BancosProdutos.
     */
    data: XOR<BancosProdutosUpdateInput, BancosProdutosUncheckedUpdateInput>
    /**
     * Choose, which BancosProdutos to update.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos updateMany
   */
  export type BancosProdutosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BancosProdutos.
     */
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyInput>
    /**
     * Filter which BancosProdutos to update
     */
    where?: BancosProdutosWhereInput
    /**
     * Limit how many BancosProdutos to update.
     */
    limit?: number
  }

  /**
   * BancosProdutos updateManyAndReturn
   */
  export type BancosProdutosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * The data used to update BancosProdutos.
     */
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyInput>
    /**
     * Filter which BancosProdutos to update
     */
    where?: BancosProdutosWhereInput
    /**
     * Limit how many BancosProdutos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BancosProdutos upsert
   */
  export type BancosProdutosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * The filter to search for the BancosProdutos to update in case it exists.
     */
    where: BancosProdutosWhereUniqueInput
    /**
     * In case the BancosProdutos found by the `where` argument doesn't exist, create a new BancosProdutos with this data.
     */
    create: XOR<BancosProdutosCreateInput, BancosProdutosUncheckedCreateInput>
    /**
     * In case the BancosProdutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancosProdutosUpdateInput, BancosProdutosUncheckedUpdateInput>
  }

  /**
   * BancosProdutos delete
   */
  export type BancosProdutosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
    /**
     * Filter which BancosProdutos to delete.
     */
    where: BancosProdutosWhereUniqueInput
  }

  /**
   * BancosProdutos deleteMany
   */
  export type BancosProdutosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BancosProdutos to delete
     */
    where?: BancosProdutosWhereInput
    /**
     * Limit how many BancosProdutos to delete.
     */
    limit?: number
  }

  /**
   * BancosProdutos without action
   */
  export type BancosProdutosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BancosProdutos
     */
    select?: BancosProdutosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BancosProdutos
     */
    omit?: BancosProdutosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancosProdutosInclude<ExtArgs> | null
  }


  /**
   * Model CartaVan
   */

  export type AggregateCartaVan = {
    _count: CartaVanCountAggregateOutputType | null
    _avg: CartaVanAvgAggregateOutputType | null
    _sum: CartaVanSumAggregateOutputType | null
    _min: CartaVanMinAggregateOutputType | null
    _max: CartaVanMaxAggregateOutputType | null
  }

  export type CartaVanAvgAggregateOutputType = {
    id: number | null
    bancoId: number | null
    tipoCnabId: number | null
    conta: number | null
    contaDV: number | null
  }

  export type CartaVanSumAggregateOutputType = {
    id: number | null
    bancoId: number | null
    tipoCnabId: number | null
    conta: number | null
    contaDV: number | null
  }

  export type CartaVanMinAggregateOutputType = {
    id: number | null
    cnpjEmitente: string | null
    razaoSocial: string | null
    nomeResponsavel: string | null
    cargoResponsavel: string | null
    telefone: string | null
    email: string | null
    bancoId: number | null
    tipoCnabId: number | null
    agencia: string | null
    agenciaDV: string | null
    conta: number | null
    contaDV: number | null
    convenio: string | null
    nomeGerente: string | null
    telefoneGerente: string | null
    emailGerente: string | null
    createdAt: Date | null
  }

  export type CartaVanMaxAggregateOutputType = {
    id: number | null
    cnpjEmitente: string | null
    razaoSocial: string | null
    nomeResponsavel: string | null
    cargoResponsavel: string | null
    telefone: string | null
    email: string | null
    bancoId: number | null
    tipoCnabId: number | null
    agencia: string | null
    agenciaDV: string | null
    conta: number | null
    contaDV: number | null
    convenio: string | null
    nomeGerente: string | null
    telefoneGerente: string | null
    emailGerente: string | null
    createdAt: Date | null
  }

  export type CartaVanCountAggregateOutputType = {
    id: number
    cnpjEmitente: number
    razaoSocial: number
    nomeResponsavel: number
    cargoResponsavel: number
    telefone: number
    email: number
    bancoId: number
    tipoCnabId: number
    agencia: number
    agenciaDV: number
    conta: number
    contaDV: number
    convenio: number
    nomeGerente: number
    telefoneGerente: number
    emailGerente: number
    createdAt: number
    _all: number
  }


  export type CartaVanAvgAggregateInputType = {
    id?: true
    bancoId?: true
    tipoCnabId?: true
    conta?: true
    contaDV?: true
  }

  export type CartaVanSumAggregateInputType = {
    id?: true
    bancoId?: true
    tipoCnabId?: true
    conta?: true
    contaDV?: true
  }

  export type CartaVanMinAggregateInputType = {
    id?: true
    cnpjEmitente?: true
    razaoSocial?: true
    nomeResponsavel?: true
    cargoResponsavel?: true
    telefone?: true
    email?: true
    bancoId?: true
    tipoCnabId?: true
    agencia?: true
    agenciaDV?: true
    conta?: true
    contaDV?: true
    convenio?: true
    nomeGerente?: true
    telefoneGerente?: true
    emailGerente?: true
    createdAt?: true
  }

  export type CartaVanMaxAggregateInputType = {
    id?: true
    cnpjEmitente?: true
    razaoSocial?: true
    nomeResponsavel?: true
    cargoResponsavel?: true
    telefone?: true
    email?: true
    bancoId?: true
    tipoCnabId?: true
    agencia?: true
    agenciaDV?: true
    conta?: true
    contaDV?: true
    convenio?: true
    nomeGerente?: true
    telefoneGerente?: true
    emailGerente?: true
    createdAt?: true
  }

  export type CartaVanCountAggregateInputType = {
    id?: true
    cnpjEmitente?: true
    razaoSocial?: true
    nomeResponsavel?: true
    cargoResponsavel?: true
    telefone?: true
    email?: true
    bancoId?: true
    tipoCnabId?: true
    agencia?: true
    agenciaDV?: true
    conta?: true
    contaDV?: true
    convenio?: true
    nomeGerente?: true
    telefoneGerente?: true
    emailGerente?: true
    createdAt?: true
    _all?: true
  }

  export type CartaVanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartaVan to aggregate.
     */
    where?: CartaVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaVans to fetch.
     */
    orderBy?: CartaVanOrderByWithRelationInput | CartaVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartaVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartaVans
    **/
    _count?: true | CartaVanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartaVanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartaVanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartaVanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartaVanMaxAggregateInputType
  }

  export type GetCartaVanAggregateType<T extends CartaVanAggregateArgs> = {
        [P in keyof T & keyof AggregateCartaVan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartaVan[P]>
      : GetScalarType<T[P], AggregateCartaVan[P]>
  }




  export type CartaVanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaVanWhereInput
    orderBy?: CartaVanOrderByWithAggregationInput | CartaVanOrderByWithAggregationInput[]
    by: CartaVanScalarFieldEnum[] | CartaVanScalarFieldEnum
    having?: CartaVanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartaVanCountAggregateInputType | true
    _avg?: CartaVanAvgAggregateInputType
    _sum?: CartaVanSumAggregateInputType
    _min?: CartaVanMinAggregateInputType
    _max?: CartaVanMaxAggregateInputType
  }

  export type CartaVanGroupByOutputType = {
    id: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    bancoId: number
    tipoCnabId: number
    agencia: string
    agenciaDV: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt: Date
    _count: CartaVanCountAggregateOutputType | null
    _avg: CartaVanAvgAggregateOutputType | null
    _sum: CartaVanSumAggregateOutputType | null
    _min: CartaVanMinAggregateOutputType | null
    _max: CartaVanMaxAggregateOutputType | null
  }

  type GetCartaVanGroupByPayload<T extends CartaVanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartaVanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartaVanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartaVanGroupByOutputType[P]>
            : GetScalarType<T[P], CartaVanGroupByOutputType[P]>
        }
      >
    >


  export type CartaVanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjEmitente?: boolean
    razaoSocial?: boolean
    nomeResponsavel?: boolean
    cargoResponsavel?: boolean
    telefone?: boolean
    email?: boolean
    bancoId?: boolean
    tipoCnabId?: boolean
    agencia?: boolean
    agenciaDV?: boolean
    conta?: boolean
    contaDV?: boolean
    convenio?: boolean
    nomeGerente?: boolean
    telefoneGerente?: boolean
    emailGerente?: boolean
    createdAt?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
    status?: boolean | CartaVan$statusArgs<ExtArgs>
    _count?: boolean | CartaVanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartaVan"]>

  export type CartaVanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjEmitente?: boolean
    razaoSocial?: boolean
    nomeResponsavel?: boolean
    cargoResponsavel?: boolean
    telefone?: boolean
    email?: boolean
    bancoId?: boolean
    tipoCnabId?: boolean
    agencia?: boolean
    agenciaDV?: boolean
    conta?: boolean
    contaDV?: boolean
    convenio?: boolean
    nomeGerente?: boolean
    telefoneGerente?: boolean
    emailGerente?: boolean
    createdAt?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartaVan"]>

  export type CartaVanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjEmitente?: boolean
    razaoSocial?: boolean
    nomeResponsavel?: boolean
    cargoResponsavel?: boolean
    telefone?: boolean
    email?: boolean
    bancoId?: boolean
    tipoCnabId?: boolean
    agencia?: boolean
    agenciaDV?: boolean
    conta?: boolean
    contaDV?: boolean
    convenio?: boolean
    nomeGerente?: boolean
    telefoneGerente?: boolean
    emailGerente?: boolean
    createdAt?: boolean
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartaVan"]>

  export type CartaVanSelectScalar = {
    id?: boolean
    cnpjEmitente?: boolean
    razaoSocial?: boolean
    nomeResponsavel?: boolean
    cargoResponsavel?: boolean
    telefone?: boolean
    email?: boolean
    bancoId?: boolean
    tipoCnabId?: boolean
    agencia?: boolean
    agenciaDV?: boolean
    conta?: boolean
    contaDV?: boolean
    convenio?: boolean
    nomeGerente?: boolean
    telefoneGerente?: boolean
    emailGerente?: boolean
    createdAt?: boolean
  }

  export type CartaVanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cnpjEmitente" | "razaoSocial" | "nomeResponsavel" | "cargoResponsavel" | "telefone" | "email" | "bancoId" | "tipoCnabId" | "agencia" | "agenciaDV" | "conta" | "contaDV" | "convenio" | "nomeGerente" | "telefoneGerente" | "emailGerente" | "createdAt", ExtArgs["result"]["cartaVan"]>
  export type CartaVanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
    status?: boolean | CartaVan$statusArgs<ExtArgs>
    _count?: boolean | CartaVanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CartaVanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }
  export type CartaVanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    banco?: boolean | BancoDefaultArgs<ExtArgs>
    tipoCnab?: boolean | TipoCnabDefaultArgs<ExtArgs>
  }

  export type $CartaVanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartaVan"
    objects: {
      banco: Prisma.$BancoPayload<ExtArgs>
      tipoCnab: Prisma.$TipoCnabPayload<ExtArgs>
      status: Prisma.$CartaStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cnpjEmitente: string
      razaoSocial: string
      nomeResponsavel: string
      cargoResponsavel: string
      telefone: string
      email: string
      bancoId: number
      tipoCnabId: number
      agencia: string
      agenciaDV: string | null
      conta: number
      contaDV: number
      convenio: string
      nomeGerente: string
      telefoneGerente: string
      emailGerente: string
      createdAt: Date
    }, ExtArgs["result"]["cartaVan"]>
    composites: {}
  }

  type CartaVanGetPayload<S extends boolean | null | undefined | CartaVanDefaultArgs> = $Result.GetResult<Prisma.$CartaVanPayload, S>

  type CartaVanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartaVanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartaVanCountAggregateInputType | true
    }

  export interface CartaVanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartaVan'], meta: { name: 'CartaVan' } }
    /**
     * Find zero or one CartaVan that matches the filter.
     * @param {CartaVanFindUniqueArgs} args - Arguments to find a CartaVan
     * @example
     * // Get one CartaVan
     * const cartaVan = await prisma.cartaVan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartaVanFindUniqueArgs>(args: SelectSubset<T, CartaVanFindUniqueArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CartaVan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartaVanFindUniqueOrThrowArgs} args - Arguments to find a CartaVan
     * @example
     * // Get one CartaVan
     * const cartaVan = await prisma.cartaVan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartaVanFindUniqueOrThrowArgs>(args: SelectSubset<T, CartaVanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CartaVan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanFindFirstArgs} args - Arguments to find a CartaVan
     * @example
     * // Get one CartaVan
     * const cartaVan = await prisma.cartaVan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartaVanFindFirstArgs>(args?: SelectSubset<T, CartaVanFindFirstArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CartaVan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanFindFirstOrThrowArgs} args - Arguments to find a CartaVan
     * @example
     * // Get one CartaVan
     * const cartaVan = await prisma.cartaVan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartaVanFindFirstOrThrowArgs>(args?: SelectSubset<T, CartaVanFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CartaVans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartaVans
     * const cartaVans = await prisma.cartaVan.findMany()
     * 
     * // Get first 10 CartaVans
     * const cartaVans = await prisma.cartaVan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartaVanWithIdOnly = await prisma.cartaVan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartaVanFindManyArgs>(args?: SelectSubset<T, CartaVanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CartaVan.
     * @param {CartaVanCreateArgs} args - Arguments to create a CartaVan.
     * @example
     * // Create one CartaVan
     * const CartaVan = await prisma.cartaVan.create({
     *   data: {
     *     // ... data to create a CartaVan
     *   }
     * })
     * 
     */
    create<T extends CartaVanCreateArgs>(args: SelectSubset<T, CartaVanCreateArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CartaVans.
     * @param {CartaVanCreateManyArgs} args - Arguments to create many CartaVans.
     * @example
     * // Create many CartaVans
     * const cartaVan = await prisma.cartaVan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartaVanCreateManyArgs>(args?: SelectSubset<T, CartaVanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartaVans and returns the data saved in the database.
     * @param {CartaVanCreateManyAndReturnArgs} args - Arguments to create many CartaVans.
     * @example
     * // Create many CartaVans
     * const cartaVan = await prisma.cartaVan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartaVans and only return the `id`
     * const cartaVanWithIdOnly = await prisma.cartaVan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartaVanCreateManyAndReturnArgs>(args?: SelectSubset<T, CartaVanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CartaVan.
     * @param {CartaVanDeleteArgs} args - Arguments to delete one CartaVan.
     * @example
     * // Delete one CartaVan
     * const CartaVan = await prisma.cartaVan.delete({
     *   where: {
     *     // ... filter to delete one CartaVan
     *   }
     * })
     * 
     */
    delete<T extends CartaVanDeleteArgs>(args: SelectSubset<T, CartaVanDeleteArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CartaVan.
     * @param {CartaVanUpdateArgs} args - Arguments to update one CartaVan.
     * @example
     * // Update one CartaVan
     * const cartaVan = await prisma.cartaVan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartaVanUpdateArgs>(args: SelectSubset<T, CartaVanUpdateArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CartaVans.
     * @param {CartaVanDeleteManyArgs} args - Arguments to filter CartaVans to delete.
     * @example
     * // Delete a few CartaVans
     * const { count } = await prisma.cartaVan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartaVanDeleteManyArgs>(args?: SelectSubset<T, CartaVanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartaVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartaVans
     * const cartaVan = await prisma.cartaVan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartaVanUpdateManyArgs>(args: SelectSubset<T, CartaVanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartaVans and returns the data updated in the database.
     * @param {CartaVanUpdateManyAndReturnArgs} args - Arguments to update many CartaVans.
     * @example
     * // Update many CartaVans
     * const cartaVan = await prisma.cartaVan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartaVans and only return the `id`
     * const cartaVanWithIdOnly = await prisma.cartaVan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartaVanUpdateManyAndReturnArgs>(args: SelectSubset<T, CartaVanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CartaVan.
     * @param {CartaVanUpsertArgs} args - Arguments to update or create a CartaVan.
     * @example
     * // Update or create a CartaVan
     * const cartaVan = await prisma.cartaVan.upsert({
     *   create: {
     *     // ... data to create a CartaVan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartaVan we want to update
     *   }
     * })
     */
    upsert<T extends CartaVanUpsertArgs>(args: SelectSubset<T, CartaVanUpsertArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CartaVans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanCountArgs} args - Arguments to filter CartaVans to count.
     * @example
     * // Count the number of CartaVans
     * const count = await prisma.cartaVan.count({
     *   where: {
     *     // ... the filter for the CartaVans we want to count
     *   }
     * })
    **/
    count<T extends CartaVanCountArgs>(
      args?: Subset<T, CartaVanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartaVanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartaVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartaVanAggregateArgs>(args: Subset<T, CartaVanAggregateArgs>): Prisma.PrismaPromise<GetCartaVanAggregateType<T>>

    /**
     * Group by CartaVan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaVanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartaVanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartaVanGroupByArgs['orderBy'] }
        : { orderBy?: CartaVanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartaVanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartaVanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartaVan model
   */
  readonly fields: CartaVanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartaVan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartaVanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    banco<T extends BancoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BancoDefaultArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    tipoCnab<T extends TipoCnabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipoCnabDefaultArgs<ExtArgs>>): Prisma__TipoCnabClient<$Result.GetResult<Prisma.$TipoCnabPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    status<T extends CartaVan$statusArgs<ExtArgs> = {}>(args?: Subset<T, CartaVan$statusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartaVan model
   */ 
  interface CartaVanFieldRefs {
    readonly id: FieldRef<"CartaVan", 'Int'>
    readonly cnpjEmitente: FieldRef<"CartaVan", 'String'>
    readonly razaoSocial: FieldRef<"CartaVan", 'String'>
    readonly nomeResponsavel: FieldRef<"CartaVan", 'String'>
    readonly cargoResponsavel: FieldRef<"CartaVan", 'String'>
    readonly telefone: FieldRef<"CartaVan", 'String'>
    readonly email: FieldRef<"CartaVan", 'String'>
    readonly bancoId: FieldRef<"CartaVan", 'Int'>
    readonly tipoCnabId: FieldRef<"CartaVan", 'Int'>
    readonly agencia: FieldRef<"CartaVan", 'String'>
    readonly agenciaDV: FieldRef<"CartaVan", 'String'>
    readonly conta: FieldRef<"CartaVan", 'Int'>
    readonly contaDV: FieldRef<"CartaVan", 'Int'>
    readonly convenio: FieldRef<"CartaVan", 'String'>
    readonly nomeGerente: FieldRef<"CartaVan", 'String'>
    readonly telefoneGerente: FieldRef<"CartaVan", 'String'>
    readonly emailGerente: FieldRef<"CartaVan", 'String'>
    readonly createdAt: FieldRef<"CartaVan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CartaVan findUnique
   */
  export type CartaVanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * Filter, which CartaVan to fetch.
     */
    where: CartaVanWhereUniqueInput
  }

  /**
   * CartaVan findUniqueOrThrow
   */
  export type CartaVanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * Filter, which CartaVan to fetch.
     */
    where: CartaVanWhereUniqueInput
  }

  /**
   * CartaVan findFirst
   */
  export type CartaVanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * Filter, which CartaVan to fetch.
     */
    where?: CartaVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaVans to fetch.
     */
    orderBy?: CartaVanOrderByWithRelationInput | CartaVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartaVans.
     */
    cursor?: CartaVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartaVans.
     */
    distinct?: CartaVanScalarFieldEnum | CartaVanScalarFieldEnum[]
  }

  /**
   * CartaVan findFirstOrThrow
   */
  export type CartaVanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * Filter, which CartaVan to fetch.
     */
    where?: CartaVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaVans to fetch.
     */
    orderBy?: CartaVanOrderByWithRelationInput | CartaVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartaVans.
     */
    cursor?: CartaVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaVans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartaVans.
     */
    distinct?: CartaVanScalarFieldEnum | CartaVanScalarFieldEnum[]
  }

  /**
   * CartaVan findMany
   */
  export type CartaVanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * Filter, which CartaVans to fetch.
     */
    where?: CartaVanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaVans to fetch.
     */
    orderBy?: CartaVanOrderByWithRelationInput | CartaVanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartaVans.
     */
    cursor?: CartaVanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaVans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaVans.
     */
    skip?: number
    distinct?: CartaVanScalarFieldEnum | CartaVanScalarFieldEnum[]
  }

  /**
   * CartaVan create
   */
  export type CartaVanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * The data needed to create a CartaVan.
     */
    data: XOR<CartaVanCreateInput, CartaVanUncheckedCreateInput>
  }

  /**
   * CartaVan createMany
   */
  export type CartaVanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartaVans.
     */
    data: CartaVanCreateManyInput | CartaVanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartaVan createManyAndReturn
   */
  export type CartaVanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * The data used to create many CartaVans.
     */
    data: CartaVanCreateManyInput | CartaVanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartaVan update
   */
  export type CartaVanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * The data needed to update a CartaVan.
     */
    data: XOR<CartaVanUpdateInput, CartaVanUncheckedUpdateInput>
    /**
     * Choose, which CartaVan to update.
     */
    where: CartaVanWhereUniqueInput
  }

  /**
   * CartaVan updateMany
   */
  export type CartaVanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartaVans.
     */
    data: XOR<CartaVanUpdateManyMutationInput, CartaVanUncheckedUpdateManyInput>
    /**
     * Filter which CartaVans to update
     */
    where?: CartaVanWhereInput
    /**
     * Limit how many CartaVans to update.
     */
    limit?: number
  }

  /**
   * CartaVan updateManyAndReturn
   */
  export type CartaVanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * The data used to update CartaVans.
     */
    data: XOR<CartaVanUpdateManyMutationInput, CartaVanUncheckedUpdateManyInput>
    /**
     * Filter which CartaVans to update
     */
    where?: CartaVanWhereInput
    /**
     * Limit how many CartaVans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartaVan upsert
   */
  export type CartaVanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * The filter to search for the CartaVan to update in case it exists.
     */
    where: CartaVanWhereUniqueInput
    /**
     * In case the CartaVan found by the `where` argument doesn't exist, create a new CartaVan with this data.
     */
    create: XOR<CartaVanCreateInput, CartaVanUncheckedCreateInput>
    /**
     * In case the CartaVan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartaVanUpdateInput, CartaVanUncheckedUpdateInput>
  }

  /**
   * CartaVan delete
   */
  export type CartaVanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
    /**
     * Filter which CartaVan to delete.
     */
    where: CartaVanWhereUniqueInput
  }

  /**
   * CartaVan deleteMany
   */
  export type CartaVanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartaVans to delete
     */
    where?: CartaVanWhereInput
    /**
     * Limit how many CartaVans to delete.
     */
    limit?: number
  }

  /**
   * CartaVan.status
   */
  export type CartaVan$statusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    where?: CartaStatusWhereInput
    orderBy?: CartaStatusOrderByWithRelationInput | CartaStatusOrderByWithRelationInput[]
    cursor?: CartaStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartaStatusScalarFieldEnum | CartaStatusScalarFieldEnum[]
  }

  /**
   * CartaVan without action
   */
  export type CartaVanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaVan
     */
    select?: CartaVanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaVan
     */
    omit?: CartaVanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaVanInclude<ExtArgs> | null
  }


  /**
   * Model CartaStatus
   */

  export type AggregateCartaStatus = {
    _count: CartaStatusCountAggregateOutputType | null
    _avg: CartaStatusAvgAggregateOutputType | null
    _sum: CartaStatusSumAggregateOutputType | null
    _min: CartaStatusMinAggregateOutputType | null
    _max: CartaStatusMaxAggregateOutputType | null
  }

  export type CartaStatusAvgAggregateOutputType = {
    id: number | null
    cartaId: number | null
    statusId: number | null
  }

  export type CartaStatusSumAggregateOutputType = {
    id: number | null
    cartaId: number | null
    statusId: number | null
  }

  export type CartaStatusMinAggregateOutputType = {
    id: number | null
    cartaId: number | null
    statusId: number | null
    createdAt: Date | null
  }

  export type CartaStatusMaxAggregateOutputType = {
    id: number | null
    cartaId: number | null
    statusId: number | null
    createdAt: Date | null
  }

  export type CartaStatusCountAggregateOutputType = {
    id: number
    cartaId: number
    statusId: number
    createdAt: number
    _all: number
  }


  export type CartaStatusAvgAggregateInputType = {
    id?: true
    cartaId?: true
    statusId?: true
  }

  export type CartaStatusSumAggregateInputType = {
    id?: true
    cartaId?: true
    statusId?: true
  }

  export type CartaStatusMinAggregateInputType = {
    id?: true
    cartaId?: true
    statusId?: true
    createdAt?: true
  }

  export type CartaStatusMaxAggregateInputType = {
    id?: true
    cartaId?: true
    statusId?: true
    createdAt?: true
  }

  export type CartaStatusCountAggregateInputType = {
    id?: true
    cartaId?: true
    statusId?: true
    createdAt?: true
    _all?: true
  }

  export type CartaStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartaStatus to aggregate.
     */
    where?: CartaStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaStatuses to fetch.
     */
    orderBy?: CartaStatusOrderByWithRelationInput | CartaStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartaStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartaStatuses
    **/
    _count?: true | CartaStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartaStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartaStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartaStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartaStatusMaxAggregateInputType
  }

  export type GetCartaStatusAggregateType<T extends CartaStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateCartaStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartaStatus[P]>
      : GetScalarType<T[P], AggregateCartaStatus[P]>
  }




  export type CartaStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaStatusWhereInput
    orderBy?: CartaStatusOrderByWithAggregationInput | CartaStatusOrderByWithAggregationInput[]
    by: CartaStatusScalarFieldEnum[] | CartaStatusScalarFieldEnum
    having?: CartaStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartaStatusCountAggregateInputType | true
    _avg?: CartaStatusAvgAggregateInputType
    _sum?: CartaStatusSumAggregateInputType
    _min?: CartaStatusMinAggregateInputType
    _max?: CartaStatusMaxAggregateInputType
  }

  export type CartaStatusGroupByOutputType = {
    id: number
    cartaId: number
    statusId: number
    createdAt: Date
    _count: CartaStatusCountAggregateOutputType | null
    _avg: CartaStatusAvgAggregateOutputType | null
    _sum: CartaStatusSumAggregateOutputType | null
    _min: CartaStatusMinAggregateOutputType | null
    _max: CartaStatusMaxAggregateOutputType | null
  }

  type GetCartaStatusGroupByPayload<T extends CartaStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartaStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartaStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartaStatusGroupByOutputType[P]>
            : GetScalarType<T[P], CartaStatusGroupByOutputType[P]>
        }
      >
    >


  export type CartaStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartaId?: boolean
    statusId?: boolean
    createdAt?: boolean
    carta?: boolean | CartaVanDefaultArgs<ExtArgs>
    status?: boolean | StatusCartaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartaStatus"]>

  export type CartaStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartaId?: boolean
    statusId?: boolean
    createdAt?: boolean
    carta?: boolean | CartaVanDefaultArgs<ExtArgs>
    status?: boolean | StatusCartaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartaStatus"]>

  export type CartaStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartaId?: boolean
    statusId?: boolean
    createdAt?: boolean
    carta?: boolean | CartaVanDefaultArgs<ExtArgs>
    status?: boolean | StatusCartaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartaStatus"]>

  export type CartaStatusSelectScalar = {
    id?: boolean
    cartaId?: boolean
    statusId?: boolean
    createdAt?: boolean
  }

  export type CartaStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cartaId" | "statusId" | "createdAt", ExtArgs["result"]["cartaStatus"]>
  export type CartaStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carta?: boolean | CartaVanDefaultArgs<ExtArgs>
    status?: boolean | StatusCartaDefaultArgs<ExtArgs>
  }
  export type CartaStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carta?: boolean | CartaVanDefaultArgs<ExtArgs>
    status?: boolean | StatusCartaDefaultArgs<ExtArgs>
  }
  export type CartaStatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carta?: boolean | CartaVanDefaultArgs<ExtArgs>
    status?: boolean | StatusCartaDefaultArgs<ExtArgs>
  }

  export type $CartaStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartaStatus"
    objects: {
      carta: Prisma.$CartaVanPayload<ExtArgs>
      status: Prisma.$StatusCartaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cartaId: number
      statusId: number
      createdAt: Date
    }, ExtArgs["result"]["cartaStatus"]>
    composites: {}
  }

  type CartaStatusGetPayload<S extends boolean | null | undefined | CartaStatusDefaultArgs> = $Result.GetResult<Prisma.$CartaStatusPayload, S>

  type CartaStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartaStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartaStatusCountAggregateInputType | true
    }

  export interface CartaStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartaStatus'], meta: { name: 'CartaStatus' } }
    /**
     * Find zero or one CartaStatus that matches the filter.
     * @param {CartaStatusFindUniqueArgs} args - Arguments to find a CartaStatus
     * @example
     * // Get one CartaStatus
     * const cartaStatus = await prisma.cartaStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartaStatusFindUniqueArgs>(args: SelectSubset<T, CartaStatusFindUniqueArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CartaStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartaStatusFindUniqueOrThrowArgs} args - Arguments to find a CartaStatus
     * @example
     * // Get one CartaStatus
     * const cartaStatus = await prisma.cartaStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartaStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, CartaStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CartaStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusFindFirstArgs} args - Arguments to find a CartaStatus
     * @example
     * // Get one CartaStatus
     * const cartaStatus = await prisma.cartaStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartaStatusFindFirstArgs>(args?: SelectSubset<T, CartaStatusFindFirstArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CartaStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusFindFirstOrThrowArgs} args - Arguments to find a CartaStatus
     * @example
     * // Get one CartaStatus
     * const cartaStatus = await prisma.cartaStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartaStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, CartaStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CartaStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartaStatuses
     * const cartaStatuses = await prisma.cartaStatus.findMany()
     * 
     * // Get first 10 CartaStatuses
     * const cartaStatuses = await prisma.cartaStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartaStatusWithIdOnly = await prisma.cartaStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartaStatusFindManyArgs>(args?: SelectSubset<T, CartaStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CartaStatus.
     * @param {CartaStatusCreateArgs} args - Arguments to create a CartaStatus.
     * @example
     * // Create one CartaStatus
     * const CartaStatus = await prisma.cartaStatus.create({
     *   data: {
     *     // ... data to create a CartaStatus
     *   }
     * })
     * 
     */
    create<T extends CartaStatusCreateArgs>(args: SelectSubset<T, CartaStatusCreateArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CartaStatuses.
     * @param {CartaStatusCreateManyArgs} args - Arguments to create many CartaStatuses.
     * @example
     * // Create many CartaStatuses
     * const cartaStatus = await prisma.cartaStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartaStatusCreateManyArgs>(args?: SelectSubset<T, CartaStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartaStatuses and returns the data saved in the database.
     * @param {CartaStatusCreateManyAndReturnArgs} args - Arguments to create many CartaStatuses.
     * @example
     * // Create many CartaStatuses
     * const cartaStatus = await prisma.cartaStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartaStatuses and only return the `id`
     * const cartaStatusWithIdOnly = await prisma.cartaStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartaStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, CartaStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CartaStatus.
     * @param {CartaStatusDeleteArgs} args - Arguments to delete one CartaStatus.
     * @example
     * // Delete one CartaStatus
     * const CartaStatus = await prisma.cartaStatus.delete({
     *   where: {
     *     // ... filter to delete one CartaStatus
     *   }
     * })
     * 
     */
    delete<T extends CartaStatusDeleteArgs>(args: SelectSubset<T, CartaStatusDeleteArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CartaStatus.
     * @param {CartaStatusUpdateArgs} args - Arguments to update one CartaStatus.
     * @example
     * // Update one CartaStatus
     * const cartaStatus = await prisma.cartaStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartaStatusUpdateArgs>(args: SelectSubset<T, CartaStatusUpdateArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CartaStatuses.
     * @param {CartaStatusDeleteManyArgs} args - Arguments to filter CartaStatuses to delete.
     * @example
     * // Delete a few CartaStatuses
     * const { count } = await prisma.cartaStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartaStatusDeleteManyArgs>(args?: SelectSubset<T, CartaStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartaStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartaStatuses
     * const cartaStatus = await prisma.cartaStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartaStatusUpdateManyArgs>(args: SelectSubset<T, CartaStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartaStatuses and returns the data updated in the database.
     * @param {CartaStatusUpdateManyAndReturnArgs} args - Arguments to update many CartaStatuses.
     * @example
     * // Update many CartaStatuses
     * const cartaStatus = await prisma.cartaStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartaStatuses and only return the `id`
     * const cartaStatusWithIdOnly = await prisma.cartaStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartaStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, CartaStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CartaStatus.
     * @param {CartaStatusUpsertArgs} args - Arguments to update or create a CartaStatus.
     * @example
     * // Update or create a CartaStatus
     * const cartaStatus = await prisma.cartaStatus.upsert({
     *   create: {
     *     // ... data to create a CartaStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartaStatus we want to update
     *   }
     * })
     */
    upsert<T extends CartaStatusUpsertArgs>(args: SelectSubset<T, CartaStatusUpsertArgs<ExtArgs>>): Prisma__CartaStatusClient<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CartaStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusCountArgs} args - Arguments to filter CartaStatuses to count.
     * @example
     * // Count the number of CartaStatuses
     * const count = await prisma.cartaStatus.count({
     *   where: {
     *     // ... the filter for the CartaStatuses we want to count
     *   }
     * })
    **/
    count<T extends CartaStatusCountArgs>(
      args?: Subset<T, CartaStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartaStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartaStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartaStatusAggregateArgs>(args: Subset<T, CartaStatusAggregateArgs>): Prisma.PrismaPromise<GetCartaStatusAggregateType<T>>

    /**
     * Group by CartaStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartaStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartaStatusGroupByArgs['orderBy'] }
        : { orderBy?: CartaStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartaStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartaStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartaStatus model
   */
  readonly fields: CartaStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartaStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartaStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carta<T extends CartaVanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CartaVanDefaultArgs<ExtArgs>>): Prisma__CartaVanClient<$Result.GetResult<Prisma.$CartaVanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    status<T extends StatusCartaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusCartaDefaultArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartaStatus model
   */ 
  interface CartaStatusFieldRefs {
    readonly id: FieldRef<"CartaStatus", 'Int'>
    readonly cartaId: FieldRef<"CartaStatus", 'Int'>
    readonly statusId: FieldRef<"CartaStatus", 'Int'>
    readonly createdAt: FieldRef<"CartaStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CartaStatus findUnique
   */
  export type CartaStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * Filter, which CartaStatus to fetch.
     */
    where: CartaStatusWhereUniqueInput
  }

  /**
   * CartaStatus findUniqueOrThrow
   */
  export type CartaStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * Filter, which CartaStatus to fetch.
     */
    where: CartaStatusWhereUniqueInput
  }

  /**
   * CartaStatus findFirst
   */
  export type CartaStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * Filter, which CartaStatus to fetch.
     */
    where?: CartaStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaStatuses to fetch.
     */
    orderBy?: CartaStatusOrderByWithRelationInput | CartaStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartaStatuses.
     */
    cursor?: CartaStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartaStatuses.
     */
    distinct?: CartaStatusScalarFieldEnum | CartaStatusScalarFieldEnum[]
  }

  /**
   * CartaStatus findFirstOrThrow
   */
  export type CartaStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * Filter, which CartaStatus to fetch.
     */
    where?: CartaStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaStatuses to fetch.
     */
    orderBy?: CartaStatusOrderByWithRelationInput | CartaStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartaStatuses.
     */
    cursor?: CartaStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartaStatuses.
     */
    distinct?: CartaStatusScalarFieldEnum | CartaStatusScalarFieldEnum[]
  }

  /**
   * CartaStatus findMany
   */
  export type CartaStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * Filter, which CartaStatuses to fetch.
     */
    where?: CartaStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartaStatuses to fetch.
     */
    orderBy?: CartaStatusOrderByWithRelationInput | CartaStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartaStatuses.
     */
    cursor?: CartaStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartaStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartaStatuses.
     */
    skip?: number
    distinct?: CartaStatusScalarFieldEnum | CartaStatusScalarFieldEnum[]
  }

  /**
   * CartaStatus create
   */
  export type CartaStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a CartaStatus.
     */
    data: XOR<CartaStatusCreateInput, CartaStatusUncheckedCreateInput>
  }

  /**
   * CartaStatus createMany
   */
  export type CartaStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartaStatuses.
     */
    data: CartaStatusCreateManyInput | CartaStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartaStatus createManyAndReturn
   */
  export type CartaStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * The data used to create many CartaStatuses.
     */
    data: CartaStatusCreateManyInput | CartaStatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartaStatus update
   */
  export type CartaStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a CartaStatus.
     */
    data: XOR<CartaStatusUpdateInput, CartaStatusUncheckedUpdateInput>
    /**
     * Choose, which CartaStatus to update.
     */
    where: CartaStatusWhereUniqueInput
  }

  /**
   * CartaStatus updateMany
   */
  export type CartaStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartaStatuses.
     */
    data: XOR<CartaStatusUpdateManyMutationInput, CartaStatusUncheckedUpdateManyInput>
    /**
     * Filter which CartaStatuses to update
     */
    where?: CartaStatusWhereInput
    /**
     * Limit how many CartaStatuses to update.
     */
    limit?: number
  }

  /**
   * CartaStatus updateManyAndReturn
   */
  export type CartaStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * The data used to update CartaStatuses.
     */
    data: XOR<CartaStatusUpdateManyMutationInput, CartaStatusUncheckedUpdateManyInput>
    /**
     * Filter which CartaStatuses to update
     */
    where?: CartaStatusWhereInput
    /**
     * Limit how many CartaStatuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartaStatus upsert
   */
  export type CartaStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the CartaStatus to update in case it exists.
     */
    where: CartaStatusWhereUniqueInput
    /**
     * In case the CartaStatus found by the `where` argument doesn't exist, create a new CartaStatus with this data.
     */
    create: XOR<CartaStatusCreateInput, CartaStatusUncheckedCreateInput>
    /**
     * In case the CartaStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartaStatusUpdateInput, CartaStatusUncheckedUpdateInput>
  }

  /**
   * CartaStatus delete
   */
  export type CartaStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    /**
     * Filter which CartaStatus to delete.
     */
    where: CartaStatusWhereUniqueInput
  }

  /**
   * CartaStatus deleteMany
   */
  export type CartaStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartaStatuses to delete
     */
    where?: CartaStatusWhereInput
    /**
     * Limit how many CartaStatuses to delete.
     */
    limit?: number
  }

  /**
   * CartaStatus without action
   */
  export type CartaStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
  }


  /**
   * Model StatusCarta
   */

  export type AggregateStatusCarta = {
    _count: StatusCartaCountAggregateOutputType | null
    _avg: StatusCartaAvgAggregateOutputType | null
    _sum: StatusCartaSumAggregateOutputType | null
    _min: StatusCartaMinAggregateOutputType | null
    _max: StatusCartaMaxAggregateOutputType | null
  }

  export type StatusCartaAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusCartaSumAggregateOutputType = {
    id: number | null
  }

  export type StatusCartaMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type StatusCartaMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type StatusCartaCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type StatusCartaAvgAggregateInputType = {
    id?: true
  }

  export type StatusCartaSumAggregateInputType = {
    id?: true
  }

  export type StatusCartaMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type StatusCartaMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type StatusCartaCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type StatusCartaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusCarta to aggregate.
     */
    where?: StatusCartaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusCartas to fetch.
     */
    orderBy?: StatusCartaOrderByWithRelationInput | StatusCartaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusCartaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusCartas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusCartas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusCartas
    **/
    _count?: true | StatusCartaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusCartaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusCartaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusCartaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusCartaMaxAggregateInputType
  }

  export type GetStatusCartaAggregateType<T extends StatusCartaAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusCarta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusCarta[P]>
      : GetScalarType<T[P], AggregateStatusCarta[P]>
  }




  export type StatusCartaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusCartaWhereInput
    orderBy?: StatusCartaOrderByWithAggregationInput | StatusCartaOrderByWithAggregationInput[]
    by: StatusCartaScalarFieldEnum[] | StatusCartaScalarFieldEnum
    having?: StatusCartaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCartaCountAggregateInputType | true
    _avg?: StatusCartaAvgAggregateInputType
    _sum?: StatusCartaSumAggregateInputType
    _min?: StatusCartaMinAggregateInputType
    _max?: StatusCartaMaxAggregateInputType
  }

  export type StatusCartaGroupByOutputType = {
    id: number
    descricao: string
    _count: StatusCartaCountAggregateOutputType | null
    _avg: StatusCartaAvgAggregateOutputType | null
    _sum: StatusCartaSumAggregateOutputType | null
    _min: StatusCartaMinAggregateOutputType | null
    _max: StatusCartaMaxAggregateOutputType | null
  }

  type GetStatusCartaGroupByPayload<T extends StatusCartaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusCartaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusCartaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusCartaGroupByOutputType[P]>
            : GetScalarType<T[P], StatusCartaGroupByOutputType[P]>
        }
      >
    >


  export type StatusCartaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    cartaStatus?: boolean | StatusCarta$cartaStatusArgs<ExtArgs>
    _count?: boolean | StatusCartaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusCarta"]>

  export type StatusCartaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["statusCarta"]>

  export type StatusCartaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["statusCarta"]>

  export type StatusCartaSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type StatusCartaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "descricao", ExtArgs["result"]["statusCarta"]>
  export type StatusCartaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartaStatus?: boolean | StatusCarta$cartaStatusArgs<ExtArgs>
    _count?: boolean | StatusCartaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StatusCartaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StatusCartaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StatusCartaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusCarta"
    objects: {
      cartaStatus: Prisma.$CartaStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["statusCarta"]>
    composites: {}
  }

  type StatusCartaGetPayload<S extends boolean | null | undefined | StatusCartaDefaultArgs> = $Result.GetResult<Prisma.$StatusCartaPayload, S>

  type StatusCartaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusCartaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusCartaCountAggregateInputType | true
    }

  export interface StatusCartaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusCarta'], meta: { name: 'StatusCarta' } }
    /**
     * Find zero or one StatusCarta that matches the filter.
     * @param {StatusCartaFindUniqueArgs} args - Arguments to find a StatusCarta
     * @example
     * // Get one StatusCarta
     * const statusCarta = await prisma.statusCarta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusCartaFindUniqueArgs>(args: SelectSubset<T, StatusCartaFindUniqueArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one StatusCarta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusCartaFindUniqueOrThrowArgs} args - Arguments to find a StatusCarta
     * @example
     * // Get one StatusCarta
     * const statusCarta = await prisma.statusCarta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusCartaFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusCartaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first StatusCarta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaFindFirstArgs} args - Arguments to find a StatusCarta
     * @example
     * // Get one StatusCarta
     * const statusCarta = await prisma.statusCarta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusCartaFindFirstArgs>(args?: SelectSubset<T, StatusCartaFindFirstArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first StatusCarta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaFindFirstOrThrowArgs} args - Arguments to find a StatusCarta
     * @example
     * // Get one StatusCarta
     * const statusCarta = await prisma.statusCarta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusCartaFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusCartaFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more StatusCartas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusCartas
     * const statusCartas = await prisma.statusCarta.findMany()
     * 
     * // Get first 10 StatusCartas
     * const statusCartas = await prisma.statusCarta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusCartaWithIdOnly = await prisma.statusCarta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusCartaFindManyArgs>(args?: SelectSubset<T, StatusCartaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a StatusCarta.
     * @param {StatusCartaCreateArgs} args - Arguments to create a StatusCarta.
     * @example
     * // Create one StatusCarta
     * const StatusCarta = await prisma.statusCarta.create({
     *   data: {
     *     // ... data to create a StatusCarta
     *   }
     * })
     * 
     */
    create<T extends StatusCartaCreateArgs>(args: SelectSubset<T, StatusCartaCreateArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many StatusCartas.
     * @param {StatusCartaCreateManyArgs} args - Arguments to create many StatusCartas.
     * @example
     * // Create many StatusCartas
     * const statusCarta = await prisma.statusCarta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusCartaCreateManyArgs>(args?: SelectSubset<T, StatusCartaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusCartas and returns the data saved in the database.
     * @param {StatusCartaCreateManyAndReturnArgs} args - Arguments to create many StatusCartas.
     * @example
     * // Create many StatusCartas
     * const statusCarta = await prisma.statusCarta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusCartas and only return the `id`
     * const statusCartaWithIdOnly = await prisma.statusCarta.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusCartaCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusCartaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a StatusCarta.
     * @param {StatusCartaDeleteArgs} args - Arguments to delete one StatusCarta.
     * @example
     * // Delete one StatusCarta
     * const StatusCarta = await prisma.statusCarta.delete({
     *   where: {
     *     // ... filter to delete one StatusCarta
     *   }
     * })
     * 
     */
    delete<T extends StatusCartaDeleteArgs>(args: SelectSubset<T, StatusCartaDeleteArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one StatusCarta.
     * @param {StatusCartaUpdateArgs} args - Arguments to update one StatusCarta.
     * @example
     * // Update one StatusCarta
     * const statusCarta = await prisma.statusCarta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusCartaUpdateArgs>(args: SelectSubset<T, StatusCartaUpdateArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more StatusCartas.
     * @param {StatusCartaDeleteManyArgs} args - Arguments to filter StatusCartas to delete.
     * @example
     * // Delete a few StatusCartas
     * const { count } = await prisma.statusCarta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusCartaDeleteManyArgs>(args?: SelectSubset<T, StatusCartaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusCartas
     * const statusCarta = await prisma.statusCarta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusCartaUpdateManyArgs>(args: SelectSubset<T, StatusCartaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusCartas and returns the data updated in the database.
     * @param {StatusCartaUpdateManyAndReturnArgs} args - Arguments to update many StatusCartas.
     * @example
     * // Update many StatusCartas
     * const statusCarta = await prisma.statusCarta.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusCartas and only return the `id`
     * const statusCartaWithIdOnly = await prisma.statusCarta.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusCartaUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusCartaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one StatusCarta.
     * @param {StatusCartaUpsertArgs} args - Arguments to update or create a StatusCarta.
     * @example
     * // Update or create a StatusCarta
     * const statusCarta = await prisma.statusCarta.upsert({
     *   create: {
     *     // ... data to create a StatusCarta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusCarta we want to update
     *   }
     * })
     */
    upsert<T extends StatusCartaUpsertArgs>(args: SelectSubset<T, StatusCartaUpsertArgs<ExtArgs>>): Prisma__StatusCartaClient<$Result.GetResult<Prisma.$StatusCartaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of StatusCartas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaCountArgs} args - Arguments to filter StatusCartas to count.
     * @example
     * // Count the number of StatusCartas
     * const count = await prisma.statusCarta.count({
     *   where: {
     *     // ... the filter for the StatusCartas we want to count
     *   }
     * })
    **/
    count<T extends StatusCartaCountArgs>(
      args?: Subset<T, StatusCartaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCartaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusCarta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusCartaAggregateArgs>(args: Subset<T, StatusCartaAggregateArgs>): Prisma.PrismaPromise<GetStatusCartaAggregateType<T>>

    /**
     * Group by StatusCarta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCartaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusCartaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusCartaGroupByArgs['orderBy'] }
        : { orderBy?: StatusCartaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusCartaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusCartaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusCarta model
   */
  readonly fields: StatusCartaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusCarta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusCartaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cartaStatus<T extends StatusCarta$cartaStatusArgs<ExtArgs> = {}>(args?: Subset<T, StatusCarta$cartaStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaStatusPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusCarta model
   */ 
  interface StatusCartaFieldRefs {
    readonly id: FieldRef<"StatusCarta", 'Int'>
    readonly descricao: FieldRef<"StatusCarta", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StatusCarta findUnique
   */
  export type StatusCartaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * Filter, which StatusCarta to fetch.
     */
    where: StatusCartaWhereUniqueInput
  }

  /**
   * StatusCarta findUniqueOrThrow
   */
  export type StatusCartaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * Filter, which StatusCarta to fetch.
     */
    where: StatusCartaWhereUniqueInput
  }

  /**
   * StatusCarta findFirst
   */
  export type StatusCartaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * Filter, which StatusCarta to fetch.
     */
    where?: StatusCartaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusCartas to fetch.
     */
    orderBy?: StatusCartaOrderByWithRelationInput | StatusCartaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusCartas.
     */
    cursor?: StatusCartaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusCartas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusCartas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusCartas.
     */
    distinct?: StatusCartaScalarFieldEnum | StatusCartaScalarFieldEnum[]
  }

  /**
   * StatusCarta findFirstOrThrow
   */
  export type StatusCartaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * Filter, which StatusCarta to fetch.
     */
    where?: StatusCartaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusCartas to fetch.
     */
    orderBy?: StatusCartaOrderByWithRelationInput | StatusCartaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusCartas.
     */
    cursor?: StatusCartaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusCartas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusCartas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusCartas.
     */
    distinct?: StatusCartaScalarFieldEnum | StatusCartaScalarFieldEnum[]
  }

  /**
   * StatusCarta findMany
   */
  export type StatusCartaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * Filter, which StatusCartas to fetch.
     */
    where?: StatusCartaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusCartas to fetch.
     */
    orderBy?: StatusCartaOrderByWithRelationInput | StatusCartaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusCartas.
     */
    cursor?: StatusCartaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusCartas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusCartas.
     */
    skip?: number
    distinct?: StatusCartaScalarFieldEnum | StatusCartaScalarFieldEnum[]
  }

  /**
   * StatusCarta create
   */
  export type StatusCartaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusCarta.
     */
    data: XOR<StatusCartaCreateInput, StatusCartaUncheckedCreateInput>
  }

  /**
   * StatusCarta createMany
   */
  export type StatusCartaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusCartas.
     */
    data: StatusCartaCreateManyInput | StatusCartaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusCarta createManyAndReturn
   */
  export type StatusCartaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * The data used to create many StatusCartas.
     */
    data: StatusCartaCreateManyInput | StatusCartaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusCarta update
   */
  export type StatusCartaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusCarta.
     */
    data: XOR<StatusCartaUpdateInput, StatusCartaUncheckedUpdateInput>
    /**
     * Choose, which StatusCarta to update.
     */
    where: StatusCartaWhereUniqueInput
  }

  /**
   * StatusCarta updateMany
   */
  export type StatusCartaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusCartas.
     */
    data: XOR<StatusCartaUpdateManyMutationInput, StatusCartaUncheckedUpdateManyInput>
    /**
     * Filter which StatusCartas to update
     */
    where?: StatusCartaWhereInput
    /**
     * Limit how many StatusCartas to update.
     */
    limit?: number
  }

  /**
   * StatusCarta updateManyAndReturn
   */
  export type StatusCartaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * The data used to update StatusCartas.
     */
    data: XOR<StatusCartaUpdateManyMutationInput, StatusCartaUncheckedUpdateManyInput>
    /**
     * Filter which StatusCartas to update
     */
    where?: StatusCartaWhereInput
    /**
     * Limit how many StatusCartas to update.
     */
    limit?: number
  }

  /**
   * StatusCarta upsert
   */
  export type StatusCartaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusCarta to update in case it exists.
     */
    where: StatusCartaWhereUniqueInput
    /**
     * In case the StatusCarta found by the `where` argument doesn't exist, create a new StatusCarta with this data.
     */
    create: XOR<StatusCartaCreateInput, StatusCartaUncheckedCreateInput>
    /**
     * In case the StatusCarta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusCartaUpdateInput, StatusCartaUncheckedUpdateInput>
  }

  /**
   * StatusCarta delete
   */
  export type StatusCartaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
    /**
     * Filter which StatusCarta to delete.
     */
    where: StatusCartaWhereUniqueInput
  }

  /**
   * StatusCarta deleteMany
   */
  export type StatusCartaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusCartas to delete
     */
    where?: StatusCartaWhereInput
    /**
     * Limit how many StatusCartas to delete.
     */
    limit?: number
  }

  /**
   * StatusCarta.cartaStatus
   */
  export type StatusCarta$cartaStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaStatus
     */
    select?: CartaStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartaStatus
     */
    omit?: CartaStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaStatusInclude<ExtArgs> | null
    where?: CartaStatusWhereInput
    orderBy?: CartaStatusOrderByWithRelationInput | CartaStatusOrderByWithRelationInput[]
    cursor?: CartaStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartaStatusScalarFieldEnum | CartaStatusScalarFieldEnum[]
  }

  /**
   * StatusCarta without action
   */
  export type StatusCartaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCarta
     */
    select?: StatusCartaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusCarta
     */
    omit?: StatusCartaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusCartaInclude<ExtArgs> | null
  }


  /**
   * Model Empresa
   */

  export type AggregateEmpresa = {
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  export type EmpresaAvgAggregateOutputType = {
    id: number | null
  }

  export type EmpresaSumAggregateOutputType = {
    id: number | null
  }

  export type EmpresaMinAggregateOutputType = {
    id: number | null
    cnpj: string | null
    nome: string | null
    senha: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmpresaMaxAggregateOutputType = {
    id: number | null
    cnpj: string | null
    nome: string | null
    senha: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmpresaCountAggregateOutputType = {
    id: number
    cnpj: number
    nome: number
    senha: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmpresaAvgAggregateInputType = {
    id?: true
  }

  export type EmpresaSumAggregateInputType = {
    id?: true
  }

  export type EmpresaMinAggregateInputType = {
    id?: true
    cnpj?: true
    nome?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmpresaMaxAggregateInputType = {
    id?: true
    cnpj?: true
    nome?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmpresaCountAggregateInputType = {
    id?: true
    cnpj?: true
    nome?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmpresaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresa to aggregate.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Empresas
    **/
    _count?: true | EmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmpresaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmpresaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaMaxAggregateInputType
  }

  export type GetEmpresaAggregateType<T extends EmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresa[P]>
      : GetScalarType<T[P], AggregateEmpresa[P]>
  }




  export type EmpresaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmpresaWhereInput
    orderBy?: EmpresaOrderByWithAggregationInput | EmpresaOrderByWithAggregationInput[]
    by: EmpresaScalarFieldEnum[] | EmpresaScalarFieldEnum
    having?: EmpresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaCountAggregateInputType | true
    _avg?: EmpresaAvgAggregateInputType
    _sum?: EmpresaSumAggregateInputType
    _min?: EmpresaMinAggregateInputType
    _max?: EmpresaMaxAggregateInputType
  }

  export type EmpresaGroupByOutputType = {
    id: number
    cnpj: string
    nome: string
    senha: string
    createdAt: Date
    updatedAt: Date
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  type GetEmpresaGroupByPayload<T extends EmpresaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
        }
      >
    >


  export type EmpresaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpj?: boolean
    nome?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["empresa"]>

  export type EmpresaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpj?: boolean
    nome?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["empresa"]>

  export type EmpresaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpj?: boolean
    nome?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["empresa"]>

  export type EmpresaSelectScalar = {
    id?: boolean
    cnpj?: boolean
    nome?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmpresaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cnpj" | "nome" | "senha" | "createdAt" | "updatedAt", ExtArgs["result"]["empresa"]>

  export type $EmpresaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Empresa"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cnpj: string
      nome: string
      senha: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["empresa"]>
    composites: {}
  }

  type EmpresaGetPayload<S extends boolean | null | undefined | EmpresaDefaultArgs> = $Result.GetResult<Prisma.$EmpresaPayload, S>

  type EmpresaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmpresaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmpresaCountAggregateInputType | true
    }

  export interface EmpresaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Empresa'], meta: { name: 'Empresa' } }
    /**
     * Find zero or one Empresa that matches the filter.
     * @param {EmpresaFindUniqueArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmpresaFindUniqueArgs>(args: SelectSubset<T, EmpresaFindUniqueArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Empresa that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmpresaFindUniqueOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmpresaFindUniqueOrThrowArgs>(args: SelectSubset<T, EmpresaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Empresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmpresaFindFirstArgs>(args?: SelectSubset<T, EmpresaFindFirstArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Empresa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmpresaFindFirstOrThrowArgs>(args?: SelectSubset<T, EmpresaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresa.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresaWithIdOnly = await prisma.empresa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmpresaFindManyArgs>(args?: SelectSubset<T, EmpresaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Empresa.
     * @param {EmpresaCreateArgs} args - Arguments to create a Empresa.
     * @example
     * // Create one Empresa
     * const Empresa = await prisma.empresa.create({
     *   data: {
     *     // ... data to create a Empresa
     *   }
     * })
     * 
     */
    create<T extends EmpresaCreateArgs>(args: SelectSubset<T, EmpresaCreateArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Empresas.
     * @param {EmpresaCreateManyArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmpresaCreateManyArgs>(args?: SelectSubset<T, EmpresaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Empresas and returns the data saved in the database.
     * @param {EmpresaCreateManyAndReturnArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Empresas and only return the `id`
     * const empresaWithIdOnly = await prisma.empresa.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmpresaCreateManyAndReturnArgs>(args?: SelectSubset<T, EmpresaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Empresa.
     * @param {EmpresaDeleteArgs} args - Arguments to delete one Empresa.
     * @example
     * // Delete one Empresa
     * const Empresa = await prisma.empresa.delete({
     *   where: {
     *     // ... filter to delete one Empresa
     *   }
     * })
     * 
     */
    delete<T extends EmpresaDeleteArgs>(args: SelectSubset<T, EmpresaDeleteArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Empresa.
     * @param {EmpresaUpdateArgs} args - Arguments to update one Empresa.
     * @example
     * // Update one Empresa
     * const empresa = await prisma.empresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmpresaUpdateArgs>(args: SelectSubset<T, EmpresaUpdateArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Empresas.
     * @param {EmpresaDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmpresaDeleteManyArgs>(args?: SelectSubset<T, EmpresaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmpresaUpdateManyArgs>(args: SelectSubset<T, EmpresaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas and returns the data updated in the database.
     * @param {EmpresaUpdateManyAndReturnArgs} args - Arguments to update many Empresas.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Empresas and only return the `id`
     * const empresaWithIdOnly = await prisma.empresa.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmpresaUpdateManyAndReturnArgs>(args: SelectSubset<T, EmpresaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Empresa.
     * @param {EmpresaUpsertArgs} args - Arguments to update or create a Empresa.
     * @example
     * // Update or create a Empresa
     * const empresa = await prisma.empresa.upsert({
     *   create: {
     *     // ... data to create a Empresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresa we want to update
     *   }
     * })
     */
    upsert<T extends EmpresaUpsertArgs>(args: SelectSubset<T, EmpresaUpsertArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresa.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends EmpresaCountArgs>(
      args?: Subset<T, EmpresaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaAggregateArgs>(args: Subset<T, EmpresaAggregateArgs>): Prisma.PrismaPromise<GetEmpresaAggregateType<T>>

    /**
     * Group by Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresaGroupByArgs['orderBy'] }
        : { orderBy?: EmpresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Empresa model
   */
  readonly fields: EmpresaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Empresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmpresaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Empresa model
   */ 
  interface EmpresaFieldRefs {
    readonly id: FieldRef<"Empresa", 'Int'>
    readonly cnpj: FieldRef<"Empresa", 'String'>
    readonly nome: FieldRef<"Empresa", 'String'>
    readonly senha: FieldRef<"Empresa", 'String'>
    readonly createdAt: FieldRef<"Empresa", 'DateTime'>
    readonly updatedAt: FieldRef<"Empresa", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Empresa findUnique
   */
  export type EmpresaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findUniqueOrThrow
   */
  export type EmpresaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findFirst
   */
  export type EmpresaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findFirstOrThrow
   */
  export type EmpresaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findMany
   */
  export type EmpresaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Filter, which Empresas to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa create
   */
  export type EmpresaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * The data needed to create a Empresa.
     */
    data: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
  }

  /**
   * Empresa createMany
   */
  export type EmpresaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Empresas.
     */
    data: EmpresaCreateManyInput | EmpresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Empresa createManyAndReturn
   */
  export type EmpresaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * The data used to create many Empresas.
     */
    data: EmpresaCreateManyInput | EmpresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Empresa update
   */
  export type EmpresaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * The data needed to update a Empresa.
     */
    data: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
    /**
     * Choose, which Empresa to update.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa updateMany
   */
  export type EmpresaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Empresas.
     */
    data: XOR<EmpresaUpdateManyMutationInput, EmpresaUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     */
    where?: EmpresaWhereInput
    /**
     * Limit how many Empresas to update.
     */
    limit?: number
  }

  /**
   * Empresa updateManyAndReturn
   */
  export type EmpresaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * The data used to update Empresas.
     */
    data: XOR<EmpresaUpdateManyMutationInput, EmpresaUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     */
    where?: EmpresaWhereInput
    /**
     * Limit how many Empresas to update.
     */
    limit?: number
  }

  /**
   * Empresa upsert
   */
  export type EmpresaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * The filter to search for the Empresa to update in case it exists.
     */
    where: EmpresaWhereUniqueInput
    /**
     * In case the Empresa found by the `where` argument doesn't exist, create a new Empresa with this data.
     */
    create: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
    /**
     * In case the Empresa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
  }

  /**
   * Empresa delete
   */
  export type EmpresaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Filter which Empresa to delete.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa deleteMany
   */
  export type EmpresaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresas to delete
     */
    where?: EmpresaWhereInput
    /**
     * Limit how many Empresas to delete.
     */
    limit?: number
  }

  /**
   * Empresa without action
   */
  export type EmpresaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BancoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type BancoScalarFieldEnum = (typeof BancoScalarFieldEnum)[keyof typeof BancoScalarFieldEnum]


  export const PadraoVanScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type PadraoVanScalarFieldEnum = (typeof PadraoVanScalarFieldEnum)[keyof typeof PadraoVanScalarFieldEnum]


  export const BancosPadroesVanScalarFieldEnum: {
    id: 'id',
    bancoId: 'bancoId',
    padraoVanId: 'padraoVanId'
  };

  export type BancosPadroesVanScalarFieldEnum = (typeof BancosPadroesVanScalarFieldEnum)[keyof typeof BancosPadroesVanScalarFieldEnum]


  export const TipoCnabScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type TipoCnabScalarFieldEnum = (typeof TipoCnabScalarFieldEnum)[keyof typeof TipoCnabScalarFieldEnum]


  export const BancosCnabsScalarFieldEnum: {
    id: 'id',
    bancoId: 'bancoId',
    cnabId: 'cnabId'
  };

  export type BancosCnabsScalarFieldEnum = (typeof BancosCnabsScalarFieldEnum)[keyof typeof BancosCnabsScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const BancosProdutosScalarFieldEnum: {
    id: 'id',
    bancoId: 'bancoId',
    produtoId: 'produtoId'
  };

  export type BancosProdutosScalarFieldEnum = (typeof BancosProdutosScalarFieldEnum)[keyof typeof BancosProdutosScalarFieldEnum]


  export const CartaVanScalarFieldEnum: {
    id: 'id',
    cnpjEmitente: 'cnpjEmitente',
    razaoSocial: 'razaoSocial',
    nomeResponsavel: 'nomeResponsavel',
    cargoResponsavel: 'cargoResponsavel',
    telefone: 'telefone',
    email: 'email',
    bancoId: 'bancoId',
    tipoCnabId: 'tipoCnabId',
    agencia: 'agencia',
    agenciaDV: 'agenciaDV',
    conta: 'conta',
    contaDV: 'contaDV',
    convenio: 'convenio',
    nomeGerente: 'nomeGerente',
    telefoneGerente: 'telefoneGerente',
    emailGerente: 'emailGerente',
    createdAt: 'createdAt'
  };

  export type CartaVanScalarFieldEnum = (typeof CartaVanScalarFieldEnum)[keyof typeof CartaVanScalarFieldEnum]


  export const CartaStatusScalarFieldEnum: {
    id: 'id',
    cartaId: 'cartaId',
    statusId: 'statusId',
    createdAt: 'createdAt'
  };

  export type CartaStatusScalarFieldEnum = (typeof CartaStatusScalarFieldEnum)[keyof typeof CartaStatusScalarFieldEnum]


  export const StatusCartaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type StatusCartaScalarFieldEnum = (typeof StatusCartaScalarFieldEnum)[keyof typeof StatusCartaScalarFieldEnum]


  export const EmpresaScalarFieldEnum: {
    id: 'id',
    cnpj: 'cnpj',
    nome: 'nome',
    senha: 'senha',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmpresaScalarFieldEnum = (typeof EmpresaScalarFieldEnum)[keyof typeof EmpresaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type BancoWhereInput = {
    AND?: BancoWhereInput | BancoWhereInput[]
    OR?: BancoWhereInput[]
    NOT?: BancoWhereInput | BancoWhereInput[]
    id?: IntFilter<"Banco"> | number
    nome?: StringFilter<"Banco"> | string
    padroesVan?: BancosPadroesVanListRelationFilter
    cnabs?: BancosCnabsListRelationFilter
    produtos?: BancosProdutosListRelationFilter
    cartasVan?: CartaVanListRelationFilter
  }

  export type BancoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    padroesVan?: BancosPadroesVanOrderByRelationAggregateInput
    cnabs?: BancosCnabsOrderByRelationAggregateInput
    produtos?: BancosProdutosOrderByRelationAggregateInput
    cartasVan?: CartaVanOrderByRelationAggregateInput
  }

  export type BancoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BancoWhereInput | BancoWhereInput[]
    OR?: BancoWhereInput[]
    NOT?: BancoWhereInput | BancoWhereInput[]
    nome?: StringFilter<"Banco"> | string
    padroesVan?: BancosPadroesVanListRelationFilter
    cnabs?: BancosCnabsListRelationFilter
    produtos?: BancosProdutosListRelationFilter
    cartasVan?: CartaVanListRelationFilter
  }, "id">

  export type BancoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: BancoCountOrderByAggregateInput
    _avg?: BancoAvgOrderByAggregateInput
    _max?: BancoMaxOrderByAggregateInput
    _min?: BancoMinOrderByAggregateInput
    _sum?: BancoSumOrderByAggregateInput
  }

  export type BancoScalarWhereWithAggregatesInput = {
    AND?: BancoScalarWhereWithAggregatesInput | BancoScalarWhereWithAggregatesInput[]
    OR?: BancoScalarWhereWithAggregatesInput[]
    NOT?: BancoScalarWhereWithAggregatesInput | BancoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Banco"> | number
    nome?: StringWithAggregatesFilter<"Banco"> | string
  }

  export type PadraoVanWhereInput = {
    AND?: PadraoVanWhereInput | PadraoVanWhereInput[]
    OR?: PadraoVanWhereInput[]
    NOT?: PadraoVanWhereInput | PadraoVanWhereInput[]
    id?: IntFilter<"PadraoVan"> | number
    descricao?: StringFilter<"PadraoVan"> | string
    bancos?: BancosPadroesVanListRelationFilter
  }

  export type PadraoVanOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    bancos?: BancosPadroesVanOrderByRelationAggregateInput
  }

  export type PadraoVanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    descricao?: string
    AND?: PadraoVanWhereInput | PadraoVanWhereInput[]
    OR?: PadraoVanWhereInput[]
    NOT?: PadraoVanWhereInput | PadraoVanWhereInput[]
    bancos?: BancosPadroesVanListRelationFilter
  }, "id" | "descricao">

  export type PadraoVanOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: PadraoVanCountOrderByAggregateInput
    _avg?: PadraoVanAvgOrderByAggregateInput
    _max?: PadraoVanMaxOrderByAggregateInput
    _min?: PadraoVanMinOrderByAggregateInput
    _sum?: PadraoVanSumOrderByAggregateInput
  }

  export type PadraoVanScalarWhereWithAggregatesInput = {
    AND?: PadraoVanScalarWhereWithAggregatesInput | PadraoVanScalarWhereWithAggregatesInput[]
    OR?: PadraoVanScalarWhereWithAggregatesInput[]
    NOT?: PadraoVanScalarWhereWithAggregatesInput | PadraoVanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PadraoVan"> | number
    descricao?: StringWithAggregatesFilter<"PadraoVan"> | string
  }

  export type BancosPadroesVanWhereInput = {
    AND?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    OR?: BancosPadroesVanWhereInput[]
    NOT?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    id?: IntFilter<"BancosPadroesVan"> | number
    bancoId?: IntFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntFilter<"BancosPadroesVan"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    padraoVan?: XOR<PadraoVanScalarRelationFilter, PadraoVanWhereInput>
  }

  export type BancosPadroesVanOrderByWithRelationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
    banco?: BancoOrderByWithRelationInput
    padraoVan?: PadraoVanOrderByWithRelationInput
  }

  export type BancosPadroesVanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bancoId_padraoVanId?: BancosPadroesVanBancoIdPadraoVanIdCompoundUniqueInput
    AND?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    OR?: BancosPadroesVanWhereInput[]
    NOT?: BancosPadroesVanWhereInput | BancosPadroesVanWhereInput[]
    bancoId?: IntFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntFilter<"BancosPadroesVan"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    padraoVan?: XOR<PadraoVanScalarRelationFilter, PadraoVanWhereInput>
  }, "id" | "bancoId_padraoVanId">

  export type BancosPadroesVanOrderByWithAggregationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
    _count?: BancosPadroesVanCountOrderByAggregateInput
    _avg?: BancosPadroesVanAvgOrderByAggregateInput
    _max?: BancosPadroesVanMaxOrderByAggregateInput
    _min?: BancosPadroesVanMinOrderByAggregateInput
    _sum?: BancosPadroesVanSumOrderByAggregateInput
  }

  export type BancosPadroesVanScalarWhereWithAggregatesInput = {
    AND?: BancosPadroesVanScalarWhereWithAggregatesInput | BancosPadroesVanScalarWhereWithAggregatesInput[]
    OR?: BancosPadroesVanScalarWhereWithAggregatesInput[]
    NOT?: BancosPadroesVanScalarWhereWithAggregatesInput | BancosPadroesVanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BancosPadroesVan"> | number
    bancoId?: IntWithAggregatesFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntWithAggregatesFilter<"BancosPadroesVan"> | number
  }

  export type TipoCnabWhereInput = {
    AND?: TipoCnabWhereInput | TipoCnabWhereInput[]
    OR?: TipoCnabWhereInput[]
    NOT?: TipoCnabWhereInput | TipoCnabWhereInput[]
    id?: IntFilter<"TipoCnab"> | number
    descricao?: StringFilter<"TipoCnab"> | string
    bancosCnabs?: BancosCnabsListRelationFilter
    cartasVan?: CartaVanListRelationFilter
  }

  export type TipoCnabOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    bancosCnabs?: BancosCnabsOrderByRelationAggregateInput
    cartasVan?: CartaVanOrderByRelationAggregateInput
  }

  export type TipoCnabWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    descricao?: string
    AND?: TipoCnabWhereInput | TipoCnabWhereInput[]
    OR?: TipoCnabWhereInput[]
    NOT?: TipoCnabWhereInput | TipoCnabWhereInput[]
    bancosCnabs?: BancosCnabsListRelationFilter
    cartasVan?: CartaVanListRelationFilter
  }, "id" | "descricao">

  export type TipoCnabOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: TipoCnabCountOrderByAggregateInput
    _avg?: TipoCnabAvgOrderByAggregateInput
    _max?: TipoCnabMaxOrderByAggregateInput
    _min?: TipoCnabMinOrderByAggregateInput
    _sum?: TipoCnabSumOrderByAggregateInput
  }

  export type TipoCnabScalarWhereWithAggregatesInput = {
    AND?: TipoCnabScalarWhereWithAggregatesInput | TipoCnabScalarWhereWithAggregatesInput[]
    OR?: TipoCnabScalarWhereWithAggregatesInput[]
    NOT?: TipoCnabScalarWhereWithAggregatesInput | TipoCnabScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoCnab"> | number
    descricao?: StringWithAggregatesFilter<"TipoCnab"> | string
  }

  export type BancosCnabsWhereInput = {
    AND?: BancosCnabsWhereInput | BancosCnabsWhereInput[]
    OR?: BancosCnabsWhereInput[]
    NOT?: BancosCnabsWhereInput | BancosCnabsWhereInput[]
    id?: IntFilter<"BancosCnabs"> | number
    bancoId?: IntFilter<"BancosCnabs"> | number
    cnabId?: IntFilter<"BancosCnabs"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    tipoCnab?: XOR<TipoCnabScalarRelationFilter, TipoCnabWhereInput>
  }

  export type BancosCnabsOrderByWithRelationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
    banco?: BancoOrderByWithRelationInput
    tipoCnab?: TipoCnabOrderByWithRelationInput
  }

  export type BancosCnabsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bancoId_cnabId?: BancosCnabsBancoIdCnabIdCompoundUniqueInput
    AND?: BancosCnabsWhereInput | BancosCnabsWhereInput[]
    OR?: BancosCnabsWhereInput[]
    NOT?: BancosCnabsWhereInput | BancosCnabsWhereInput[]
    bancoId?: IntFilter<"BancosCnabs"> | number
    cnabId?: IntFilter<"BancosCnabs"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    tipoCnab?: XOR<TipoCnabScalarRelationFilter, TipoCnabWhereInput>
  }, "id" | "bancoId_cnabId">

  export type BancosCnabsOrderByWithAggregationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
    _count?: BancosCnabsCountOrderByAggregateInput
    _avg?: BancosCnabsAvgOrderByAggregateInput
    _max?: BancosCnabsMaxOrderByAggregateInput
    _min?: BancosCnabsMinOrderByAggregateInput
    _sum?: BancosCnabsSumOrderByAggregateInput
  }

  export type BancosCnabsScalarWhereWithAggregatesInput = {
    AND?: BancosCnabsScalarWhereWithAggregatesInput | BancosCnabsScalarWhereWithAggregatesInput[]
    OR?: BancosCnabsScalarWhereWithAggregatesInput[]
    NOT?: BancosCnabsScalarWhereWithAggregatesInput | BancosCnabsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BancosCnabs"> | number
    bancoId?: IntWithAggregatesFilter<"BancosCnabs"> | number
    cnabId?: IntWithAggregatesFilter<"BancosCnabs"> | number
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: IntFilter<"Produto"> | number
    nome?: StringFilter<"Produto"> | string
    descricao?: StringFilter<"Produto"> | string
    bancos?: BancosProdutosListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    bancos?: BancosProdutosOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    descricao?: string
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    nome?: StringFilter<"Produto"> | string
    bancos?: BancosProdutosListRelationFilter
  }, "id" | "descricao">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produto"> | number
    nome?: StringWithAggregatesFilter<"Produto"> | string
    descricao?: StringWithAggregatesFilter<"Produto"> | string
  }

  export type BancosProdutosWhereInput = {
    AND?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    OR?: BancosProdutosWhereInput[]
    NOT?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    id?: IntFilter<"BancosProdutos"> | number
    bancoId?: IntFilter<"BancosProdutos"> | number
    produtoId?: IntFilter<"BancosProdutos"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    produto?: XOR<ProdutoScalarRelationFilter, ProdutoWhereInput>
  }

  export type BancosProdutosOrderByWithRelationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
    banco?: BancoOrderByWithRelationInput
    produto?: ProdutoOrderByWithRelationInput
  }

  export type BancosProdutosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bancoId_produtoId?: BancosProdutosBancoIdProdutoIdCompoundUniqueInput
    AND?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    OR?: BancosProdutosWhereInput[]
    NOT?: BancosProdutosWhereInput | BancosProdutosWhereInput[]
    bancoId?: IntFilter<"BancosProdutos"> | number
    produtoId?: IntFilter<"BancosProdutos"> | number
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    produto?: XOR<ProdutoScalarRelationFilter, ProdutoWhereInput>
  }, "id" | "bancoId_produtoId">

  export type BancosProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
    _count?: BancosProdutosCountOrderByAggregateInput
    _avg?: BancosProdutosAvgOrderByAggregateInput
    _max?: BancosProdutosMaxOrderByAggregateInput
    _min?: BancosProdutosMinOrderByAggregateInput
    _sum?: BancosProdutosSumOrderByAggregateInput
  }

  export type BancosProdutosScalarWhereWithAggregatesInput = {
    AND?: BancosProdutosScalarWhereWithAggregatesInput | BancosProdutosScalarWhereWithAggregatesInput[]
    OR?: BancosProdutosScalarWhereWithAggregatesInput[]
    NOT?: BancosProdutosScalarWhereWithAggregatesInput | BancosProdutosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BancosProdutos"> | number
    bancoId?: IntWithAggregatesFilter<"BancosProdutos"> | number
    produtoId?: IntWithAggregatesFilter<"BancosProdutos"> | number
  }

  export type CartaVanWhereInput = {
    AND?: CartaVanWhereInput | CartaVanWhereInput[]
    OR?: CartaVanWhereInput[]
    NOT?: CartaVanWhereInput | CartaVanWhereInput[]
    id?: IntFilter<"CartaVan"> | number
    cnpjEmitente?: StringFilter<"CartaVan"> | string
    razaoSocial?: StringFilter<"CartaVan"> | string
    nomeResponsavel?: StringFilter<"CartaVan"> | string
    cargoResponsavel?: StringFilter<"CartaVan"> | string
    telefone?: StringFilter<"CartaVan"> | string
    email?: StringFilter<"CartaVan"> | string
    bancoId?: IntFilter<"CartaVan"> | number
    tipoCnabId?: IntFilter<"CartaVan"> | number
    agencia?: StringFilter<"CartaVan"> | string
    agenciaDV?: StringNullableFilter<"CartaVan"> | string | null
    conta?: IntFilter<"CartaVan"> | number
    contaDV?: IntFilter<"CartaVan"> | number
    convenio?: StringFilter<"CartaVan"> | string
    nomeGerente?: StringFilter<"CartaVan"> | string
    telefoneGerente?: StringFilter<"CartaVan"> | string
    emailGerente?: StringFilter<"CartaVan"> | string
    createdAt?: DateTimeFilter<"CartaVan"> | Date | string
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    tipoCnab?: XOR<TipoCnabScalarRelationFilter, TipoCnabWhereInput>
    status?: CartaStatusListRelationFilter
  }

  export type CartaVanOrderByWithRelationInput = {
    id?: SortOrder
    cnpjEmitente?: SortOrder
    razaoSocial?: SortOrder
    nomeResponsavel?: SortOrder
    cargoResponsavel?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    agencia?: SortOrder
    agenciaDV?: SortOrderInput | SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
    convenio?: SortOrder
    nomeGerente?: SortOrder
    telefoneGerente?: SortOrder
    emailGerente?: SortOrder
    createdAt?: SortOrder
    banco?: BancoOrderByWithRelationInput
    tipoCnab?: TipoCnabOrderByWithRelationInput
    status?: CartaStatusOrderByRelationAggregateInput
  }

  export type CartaVanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartaVanWhereInput | CartaVanWhereInput[]
    OR?: CartaVanWhereInput[]
    NOT?: CartaVanWhereInput | CartaVanWhereInput[]
    cnpjEmitente?: StringFilter<"CartaVan"> | string
    razaoSocial?: StringFilter<"CartaVan"> | string
    nomeResponsavel?: StringFilter<"CartaVan"> | string
    cargoResponsavel?: StringFilter<"CartaVan"> | string
    telefone?: StringFilter<"CartaVan"> | string
    email?: StringFilter<"CartaVan"> | string
    bancoId?: IntFilter<"CartaVan"> | number
    tipoCnabId?: IntFilter<"CartaVan"> | number
    agencia?: StringFilter<"CartaVan"> | string
    agenciaDV?: StringNullableFilter<"CartaVan"> | string | null
    conta?: IntFilter<"CartaVan"> | number
    contaDV?: IntFilter<"CartaVan"> | number
    convenio?: StringFilter<"CartaVan"> | string
    nomeGerente?: StringFilter<"CartaVan"> | string
    telefoneGerente?: StringFilter<"CartaVan"> | string
    emailGerente?: StringFilter<"CartaVan"> | string
    createdAt?: DateTimeFilter<"CartaVan"> | Date | string
    banco?: XOR<BancoScalarRelationFilter, BancoWhereInput>
    tipoCnab?: XOR<TipoCnabScalarRelationFilter, TipoCnabWhereInput>
    status?: CartaStatusListRelationFilter
  }, "id">

  export type CartaVanOrderByWithAggregationInput = {
    id?: SortOrder
    cnpjEmitente?: SortOrder
    razaoSocial?: SortOrder
    nomeResponsavel?: SortOrder
    cargoResponsavel?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    agencia?: SortOrder
    agenciaDV?: SortOrderInput | SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
    convenio?: SortOrder
    nomeGerente?: SortOrder
    telefoneGerente?: SortOrder
    emailGerente?: SortOrder
    createdAt?: SortOrder
    _count?: CartaVanCountOrderByAggregateInput
    _avg?: CartaVanAvgOrderByAggregateInput
    _max?: CartaVanMaxOrderByAggregateInput
    _min?: CartaVanMinOrderByAggregateInput
    _sum?: CartaVanSumOrderByAggregateInput
  }

  export type CartaVanScalarWhereWithAggregatesInput = {
    AND?: CartaVanScalarWhereWithAggregatesInput | CartaVanScalarWhereWithAggregatesInput[]
    OR?: CartaVanScalarWhereWithAggregatesInput[]
    NOT?: CartaVanScalarWhereWithAggregatesInput | CartaVanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CartaVan"> | number
    cnpjEmitente?: StringWithAggregatesFilter<"CartaVan"> | string
    razaoSocial?: StringWithAggregatesFilter<"CartaVan"> | string
    nomeResponsavel?: StringWithAggregatesFilter<"CartaVan"> | string
    cargoResponsavel?: StringWithAggregatesFilter<"CartaVan"> | string
    telefone?: StringWithAggregatesFilter<"CartaVan"> | string
    email?: StringWithAggregatesFilter<"CartaVan"> | string
    bancoId?: IntWithAggregatesFilter<"CartaVan"> | number
    tipoCnabId?: IntWithAggregatesFilter<"CartaVan"> | number
    agencia?: StringWithAggregatesFilter<"CartaVan"> | string
    agenciaDV?: StringNullableWithAggregatesFilter<"CartaVan"> | string | null
    conta?: IntWithAggregatesFilter<"CartaVan"> | number
    contaDV?: IntWithAggregatesFilter<"CartaVan"> | number
    convenio?: StringWithAggregatesFilter<"CartaVan"> | string
    nomeGerente?: StringWithAggregatesFilter<"CartaVan"> | string
    telefoneGerente?: StringWithAggregatesFilter<"CartaVan"> | string
    emailGerente?: StringWithAggregatesFilter<"CartaVan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CartaVan"> | Date | string
  }

  export type CartaStatusWhereInput = {
    AND?: CartaStatusWhereInput | CartaStatusWhereInput[]
    OR?: CartaStatusWhereInput[]
    NOT?: CartaStatusWhereInput | CartaStatusWhereInput[]
    id?: IntFilter<"CartaStatus"> | number
    cartaId?: IntFilter<"CartaStatus"> | number
    statusId?: IntFilter<"CartaStatus"> | number
    createdAt?: DateTimeFilter<"CartaStatus"> | Date | string
    carta?: XOR<CartaVanScalarRelationFilter, CartaVanWhereInput>
    status?: XOR<StatusCartaScalarRelationFilter, StatusCartaWhereInput>
  }

  export type CartaStatusOrderByWithRelationInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
    createdAt?: SortOrder
    carta?: CartaVanOrderByWithRelationInput
    status?: StatusCartaOrderByWithRelationInput
  }

  export type CartaStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartaStatusWhereInput | CartaStatusWhereInput[]
    OR?: CartaStatusWhereInput[]
    NOT?: CartaStatusWhereInput | CartaStatusWhereInput[]
    cartaId?: IntFilter<"CartaStatus"> | number
    statusId?: IntFilter<"CartaStatus"> | number
    createdAt?: DateTimeFilter<"CartaStatus"> | Date | string
    carta?: XOR<CartaVanScalarRelationFilter, CartaVanWhereInput>
    status?: XOR<StatusCartaScalarRelationFilter, StatusCartaWhereInput>
  }, "id">

  export type CartaStatusOrderByWithAggregationInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
    createdAt?: SortOrder
    _count?: CartaStatusCountOrderByAggregateInput
    _avg?: CartaStatusAvgOrderByAggregateInput
    _max?: CartaStatusMaxOrderByAggregateInput
    _min?: CartaStatusMinOrderByAggregateInput
    _sum?: CartaStatusSumOrderByAggregateInput
  }

  export type CartaStatusScalarWhereWithAggregatesInput = {
    AND?: CartaStatusScalarWhereWithAggregatesInput | CartaStatusScalarWhereWithAggregatesInput[]
    OR?: CartaStatusScalarWhereWithAggregatesInput[]
    NOT?: CartaStatusScalarWhereWithAggregatesInput | CartaStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CartaStatus"> | number
    cartaId?: IntWithAggregatesFilter<"CartaStatus"> | number
    statusId?: IntWithAggregatesFilter<"CartaStatus"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CartaStatus"> | Date | string
  }

  export type StatusCartaWhereInput = {
    AND?: StatusCartaWhereInput | StatusCartaWhereInput[]
    OR?: StatusCartaWhereInput[]
    NOT?: StatusCartaWhereInput | StatusCartaWhereInput[]
    id?: IntFilter<"StatusCarta"> | number
    descricao?: StringFilter<"StatusCarta"> | string
    cartaStatus?: CartaStatusListRelationFilter
  }

  export type StatusCartaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    cartaStatus?: CartaStatusOrderByRelationAggregateInput
  }

  export type StatusCartaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    descricao?: string
    AND?: StatusCartaWhereInput | StatusCartaWhereInput[]
    OR?: StatusCartaWhereInput[]
    NOT?: StatusCartaWhereInput | StatusCartaWhereInput[]
    cartaStatus?: CartaStatusListRelationFilter
  }, "id" | "descricao">

  export type StatusCartaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: StatusCartaCountOrderByAggregateInput
    _avg?: StatusCartaAvgOrderByAggregateInput
    _max?: StatusCartaMaxOrderByAggregateInput
    _min?: StatusCartaMinOrderByAggregateInput
    _sum?: StatusCartaSumOrderByAggregateInput
  }

  export type StatusCartaScalarWhereWithAggregatesInput = {
    AND?: StatusCartaScalarWhereWithAggregatesInput | StatusCartaScalarWhereWithAggregatesInput[]
    OR?: StatusCartaScalarWhereWithAggregatesInput[]
    NOT?: StatusCartaScalarWhereWithAggregatesInput | StatusCartaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StatusCarta"> | number
    descricao?: StringWithAggregatesFilter<"StatusCarta"> | string
  }

  export type EmpresaWhereInput = {
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    id?: IntFilter<"Empresa"> | number
    cnpj?: StringFilter<"Empresa"> | string
    nome?: StringFilter<"Empresa"> | string
    senha?: StringFilter<"Empresa"> | string
    createdAt?: DateTimeFilter<"Empresa"> | Date | string
    updatedAt?: DateTimeFilter<"Empresa"> | Date | string
  }

  export type EmpresaOrderByWithRelationInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmpresaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cnpj?: string
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    nome?: StringFilter<"Empresa"> | string
    senha?: StringFilter<"Empresa"> | string
    createdAt?: DateTimeFilter<"Empresa"> | Date | string
    updatedAt?: DateTimeFilter<"Empresa"> | Date | string
  }, "id" | "cnpj">

  export type EmpresaOrderByWithAggregationInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmpresaCountOrderByAggregateInput
    _avg?: EmpresaAvgOrderByAggregateInput
    _max?: EmpresaMaxOrderByAggregateInput
    _min?: EmpresaMinOrderByAggregateInput
    _sum?: EmpresaSumOrderByAggregateInput
  }

  export type EmpresaScalarWhereWithAggregatesInput = {
    AND?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    OR?: EmpresaScalarWhereWithAggregatesInput[]
    NOT?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Empresa"> | number
    cnpj?: StringWithAggregatesFilter<"Empresa"> | string
    nome?: StringWithAggregatesFilter<"Empresa"> | string
    senha?: StringWithAggregatesFilter<"Empresa"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Empresa"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Empresa"> | Date | string
  }

  export type BancoCreateInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    cnabs?: BancosCnabsCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    cnabs?: BancosCnabsUncheckedCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    cnabs?: BancosCnabsUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    cnabs?: BancosCnabsUncheckedUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type BancoCreateManyInput = {
    id?: number
    nome: string
  }

  export type BancoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type BancoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PadraoVanCreateInput = {
    descricao: string
    bancos?: BancosPadroesVanCreateNestedManyWithoutPadraoVanInput
  }

  export type PadraoVanUncheckedCreateInput = {
    id?: number
    descricao: string
    bancos?: BancosPadroesVanUncheckedCreateNestedManyWithoutPadraoVanInput
  }

  export type PadraoVanUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosPadroesVanUpdateManyWithoutPadraoVanNestedInput
  }

  export type PadraoVanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanNestedInput
  }

  export type PadraoVanCreateManyInput = {
    id?: number
    descricao: string
  }

  export type PadraoVanUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type PadraoVanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosPadroesVanCreateInput = {
    banco: BancoCreateNestedOneWithoutPadroesVanInput
    padraoVan: PadraoVanCreateNestedOneWithoutBancosInput
  }

  export type BancosPadroesVanUncheckedCreateInput = {
    id?: number
    bancoId: number
    padraoVanId: number
  }

  export type BancosPadroesVanUpdateInput = {
    banco?: BancoUpdateOneRequiredWithoutPadroesVanNestedInput
    padraoVan?: PadraoVanUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosPadroesVanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanCreateManyInput = {
    id?: number
    bancoId: number
    padraoVanId: number
  }

  export type BancosPadroesVanUpdateManyMutationInput = {

  }

  export type BancosPadroesVanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type TipoCnabCreateInput = {
    descricao: string
    bancosCnabs?: BancosCnabsCreateNestedManyWithoutTipoCnabInput
    cartasVan?: CartaVanCreateNestedManyWithoutTipoCnabInput
  }

  export type TipoCnabUncheckedCreateInput = {
    id?: number
    descricao: string
    bancosCnabs?: BancosCnabsUncheckedCreateNestedManyWithoutTipoCnabInput
    cartasVan?: CartaVanUncheckedCreateNestedManyWithoutTipoCnabInput
  }

  export type TipoCnabUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    bancosCnabs?: BancosCnabsUpdateManyWithoutTipoCnabNestedInput
    cartasVan?: CartaVanUpdateManyWithoutTipoCnabNestedInput
  }

  export type TipoCnabUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    bancosCnabs?: BancosCnabsUncheckedUpdateManyWithoutTipoCnabNestedInput
    cartasVan?: CartaVanUncheckedUpdateManyWithoutTipoCnabNestedInput
  }

  export type TipoCnabCreateManyInput = {
    id?: number
    descricao: string
  }

  export type TipoCnabUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TipoCnabUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosCnabsCreateInput = {
    banco: BancoCreateNestedOneWithoutCnabsInput
    tipoCnab: TipoCnabCreateNestedOneWithoutBancosCnabsInput
  }

  export type BancosCnabsUncheckedCreateInput = {
    id?: number
    bancoId: number
    cnabId: number
  }

  export type BancosCnabsUpdateInput = {
    banco?: BancoUpdateOneRequiredWithoutCnabsNestedInput
    tipoCnab?: TipoCnabUpdateOneRequiredWithoutBancosCnabsNestedInput
  }

  export type BancosCnabsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    cnabId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosCnabsCreateManyInput = {
    id?: number
    bancoId: number
    cnabId: number
  }

  export type BancosCnabsUpdateManyMutationInput = {

  }

  export type BancosCnabsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    cnabId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateInput = {
    nome: string
    descricao: string
    bancos?: BancosProdutosCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    bancos?: BancosProdutosUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosProdutosUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    bancos?: BancosProdutosUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoCreateManyInput = {
    id?: number
    nome: string
    descricao: string
  }

  export type ProdutoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosProdutosCreateInput = {
    banco: BancoCreateNestedOneWithoutProdutosInput
    produto: ProdutoCreateNestedOneWithoutBancosInput
  }

  export type BancosProdutosUncheckedCreateInput = {
    id?: number
    bancoId: number
    produtoId: number
  }

  export type BancosProdutosUpdateInput = {
    banco?: BancoUpdateOneRequiredWithoutProdutosNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosCreateManyInput = {
    id?: number
    bancoId: number
    produtoId: number
  }

  export type BancosProdutosUpdateManyMutationInput = {

  }

  export type BancosProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type CartaVanCreateInput = {
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    banco: BancoCreateNestedOneWithoutCartasVanInput
    tipoCnab: TipoCnabCreateNestedOneWithoutCartasVanInput
    status?: CartaStatusCreateNestedManyWithoutCartaInput
  }

  export type CartaVanUncheckedCreateInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    bancoId: number
    tipoCnabId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    status?: CartaStatusUncheckedCreateNestedManyWithoutCartaInput
  }

  export type CartaVanUpdateInput = {
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banco?: BancoUpdateOneRequiredWithoutCartasVanNestedInput
    tipoCnab?: TipoCnabUpdateOneRequiredWithoutCartasVanNestedInput
    status?: CartaStatusUpdateManyWithoutCartaNestedInput
  }

  export type CartaVanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bancoId?: IntFieldUpdateOperationsInput | number
    tipoCnabId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: CartaStatusUncheckedUpdateManyWithoutCartaNestedInput
  }

  export type CartaVanCreateManyInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    bancoId: number
    tipoCnabId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
  }

  export type CartaVanUpdateManyMutationInput = {
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaVanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bancoId?: IntFieldUpdateOperationsInput | number
    tipoCnabId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaStatusCreateInput = {
    createdAt?: Date | string
    carta: CartaVanCreateNestedOneWithoutStatusInput
    status: StatusCartaCreateNestedOneWithoutCartaStatusInput
  }

  export type CartaStatusUncheckedCreateInput = {
    id?: number
    cartaId: number
    statusId: number
    createdAt?: Date | string
  }

  export type CartaStatusUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carta?: CartaVanUpdateOneRequiredWithoutStatusNestedInput
    status?: StatusCartaUpdateOneRequiredWithoutCartaStatusNestedInput
  }

  export type CartaStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartaId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaStatusCreateManyInput = {
    id?: number
    cartaId: number
    statusId: number
    createdAt?: Date | string
  }

  export type CartaStatusUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartaId?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCartaCreateInput = {
    descricao: string
    cartaStatus?: CartaStatusCreateNestedManyWithoutStatusInput
  }

  export type StatusCartaUncheckedCreateInput = {
    id?: number
    descricao: string
    cartaStatus?: CartaStatusUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusCartaUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    cartaStatus?: CartaStatusUpdateManyWithoutStatusNestedInput
  }

  export type StatusCartaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    cartaStatus?: CartaStatusUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusCartaCreateManyInput = {
    id?: number
    descricao: string
  }

  export type StatusCartaUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCartaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type EmpresaCreateInput = {
    cnpj: string
    nome: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmpresaUncheckedCreateInput = {
    id?: number
    cnpj: string
    nome: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmpresaUpdateInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaCreateManyInput = {
    id?: number
    cnpj: string
    nome: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmpresaUpdateManyMutationInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BancosPadroesVanListRelationFilter = {
    every?: BancosPadroesVanWhereInput
    some?: BancosPadroesVanWhereInput
    none?: BancosPadroesVanWhereInput
  }

  export type BancosCnabsListRelationFilter = {
    every?: BancosCnabsWhereInput
    some?: BancosCnabsWhereInput
    none?: BancosCnabsWhereInput
  }

  export type BancosProdutosListRelationFilter = {
    every?: BancosProdutosWhereInput
    some?: BancosProdutosWhereInput
    none?: BancosProdutosWhereInput
  }

  export type CartaVanListRelationFilter = {
    every?: CartaVanWhereInput
    some?: CartaVanWhereInput
    none?: CartaVanWhereInput
  }

  export type BancosPadroesVanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BancosCnabsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BancosProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartaVanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BancoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type BancoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type BancoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type BancoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type PadraoVanCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type PadraoVanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PadraoVanMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type PadraoVanMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type PadraoVanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancoScalarRelationFilter = {
    is?: BancoWhereInput
    isNot?: BancoWhereInput
  }

  export type PadraoVanScalarRelationFilter = {
    is?: PadraoVanWhereInput
    isNot?: PadraoVanWhereInput
  }

  export type BancosPadroesVanBancoIdPadraoVanIdCompoundUniqueInput = {
    bancoId: number
    padraoVanId: number
  }

  export type BancosPadroesVanCountOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanMaxOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanMinOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type BancosPadroesVanSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    padraoVanId?: SortOrder
  }

  export type TipoCnabCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type TipoCnabAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoCnabMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type TipoCnabMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type TipoCnabSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoCnabScalarRelationFilter = {
    is?: TipoCnabWhereInput
    isNot?: TipoCnabWhereInput
  }

  export type BancosCnabsBancoIdCnabIdCompoundUniqueInput = {
    bancoId: number
    cnabId: number
  }

  export type BancosCnabsCountOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
  }

  export type BancosCnabsAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
  }

  export type BancosCnabsMaxOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
  }

  export type BancosCnabsMinOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
  }

  export type BancosCnabsSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    cnabId?: SortOrder
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutoScalarRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type BancosProdutosBancoIdProdutoIdCompoundUniqueInput = {
    bancoId: number
    produtoId: number
  }

  export type BancosProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type BancosProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    produtoId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CartaStatusListRelationFilter = {
    every?: CartaStatusWhereInput
    some?: CartaStatusWhereInput
    none?: CartaStatusWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CartaStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartaVanCountOrderByAggregateInput = {
    id?: SortOrder
    cnpjEmitente?: SortOrder
    razaoSocial?: SortOrder
    nomeResponsavel?: SortOrder
    cargoResponsavel?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    agencia?: SortOrder
    agenciaDV?: SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
    convenio?: SortOrder
    nomeGerente?: SortOrder
    telefoneGerente?: SortOrder
    emailGerente?: SortOrder
    createdAt?: SortOrder
  }

  export type CartaVanAvgOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
  }

  export type CartaVanMaxOrderByAggregateInput = {
    id?: SortOrder
    cnpjEmitente?: SortOrder
    razaoSocial?: SortOrder
    nomeResponsavel?: SortOrder
    cargoResponsavel?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    agencia?: SortOrder
    agenciaDV?: SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
    convenio?: SortOrder
    nomeGerente?: SortOrder
    telefoneGerente?: SortOrder
    emailGerente?: SortOrder
    createdAt?: SortOrder
  }

  export type CartaVanMinOrderByAggregateInput = {
    id?: SortOrder
    cnpjEmitente?: SortOrder
    razaoSocial?: SortOrder
    nomeResponsavel?: SortOrder
    cargoResponsavel?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    agencia?: SortOrder
    agenciaDV?: SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
    convenio?: SortOrder
    nomeGerente?: SortOrder
    telefoneGerente?: SortOrder
    emailGerente?: SortOrder
    createdAt?: SortOrder
  }

  export type CartaVanSumOrderByAggregateInput = {
    id?: SortOrder
    bancoId?: SortOrder
    tipoCnabId?: SortOrder
    conta?: SortOrder
    contaDV?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CartaVanScalarRelationFilter = {
    is?: CartaVanWhereInput
    isNot?: CartaVanWhereInput
  }

  export type StatusCartaScalarRelationFilter = {
    is?: StatusCartaWhereInput
    isNot?: StatusCartaWhereInput
  }

  export type CartaStatusCountOrderByAggregateInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
    createdAt?: SortOrder
  }

  export type CartaStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
  }

  export type CartaStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
    createdAt?: SortOrder
  }

  export type CartaStatusMinOrderByAggregateInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
    createdAt?: SortOrder
  }

  export type CartaStatusSumOrderByAggregateInput = {
    id?: SortOrder
    cartaId?: SortOrder
    statusId?: SortOrder
  }

  export type StatusCartaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type StatusCartaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusCartaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type StatusCartaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type StatusCartaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmpresaCountOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmpresaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmpresaMaxOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmpresaMinOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    nome?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmpresaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancosPadroesVanCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type BancosCnabsCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosCnabsCreateWithoutBancoInput, BancosCnabsUncheckedCreateWithoutBancoInput> | BancosCnabsCreateWithoutBancoInput[] | BancosCnabsUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutBancoInput | BancosCnabsCreateOrConnectWithoutBancoInput[]
    createMany?: BancosCnabsCreateManyBancoInputEnvelope
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
  }

  export type BancosProdutosCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type CartaVanCreateNestedManyWithoutBancoInput = {
    create?: XOR<CartaVanCreateWithoutBancoInput, CartaVanUncheckedCreateWithoutBancoInput> | CartaVanCreateWithoutBancoInput[] | CartaVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutBancoInput | CartaVanCreateOrConnectWithoutBancoInput[]
    createMany?: CartaVanCreateManyBancoInputEnvelope
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
  }

  export type BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type BancosCnabsUncheckedCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosCnabsCreateWithoutBancoInput, BancosCnabsUncheckedCreateWithoutBancoInput> | BancosCnabsCreateWithoutBancoInput[] | BancosCnabsUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutBancoInput | BancosCnabsCreateOrConnectWithoutBancoInput[]
    createMany?: BancosCnabsCreateManyBancoInputEnvelope
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
  }

  export type BancosProdutosUncheckedCreateNestedManyWithoutBancoInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type CartaVanUncheckedCreateNestedManyWithoutBancoInput = {
    create?: XOR<CartaVanCreateWithoutBancoInput, CartaVanUncheckedCreateWithoutBancoInput> | CartaVanCreateWithoutBancoInput[] | CartaVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutBancoInput | CartaVanCreateOrConnectWithoutBancoInput[]
    createMany?: CartaVanCreateManyBancoInputEnvelope
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BancosPadroesVanUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutBancoInput | BancosPadroesVanUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type BancosCnabsUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosCnabsCreateWithoutBancoInput, BancosCnabsUncheckedCreateWithoutBancoInput> | BancosCnabsCreateWithoutBancoInput[] | BancosCnabsUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutBancoInput | BancosCnabsCreateOrConnectWithoutBancoInput[]
    upsert?: BancosCnabsUpsertWithWhereUniqueWithoutBancoInput | BancosCnabsUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosCnabsCreateManyBancoInputEnvelope
    set?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    disconnect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    delete?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    update?: BancosCnabsUpdateWithWhereUniqueWithoutBancoInput | BancosCnabsUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosCnabsUpdateManyWithWhereWithoutBancoInput | BancosCnabsUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosCnabsScalarWhereInput | BancosCnabsScalarWhereInput[]
  }

  export type BancosProdutosUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutBancoInput | BancosProdutosUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutBancoInput | BancosProdutosUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutBancoInput | BancosProdutosUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type CartaVanUpdateManyWithoutBancoNestedInput = {
    create?: XOR<CartaVanCreateWithoutBancoInput, CartaVanUncheckedCreateWithoutBancoInput> | CartaVanCreateWithoutBancoInput[] | CartaVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutBancoInput | CartaVanCreateOrConnectWithoutBancoInput[]
    upsert?: CartaVanUpsertWithWhereUniqueWithoutBancoInput | CartaVanUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: CartaVanCreateManyBancoInputEnvelope
    set?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    disconnect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    delete?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    update?: CartaVanUpdateWithWhereUniqueWithoutBancoInput | CartaVanUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: CartaVanUpdateManyWithWhereWithoutBancoInput | CartaVanUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: CartaVanScalarWhereInput | CartaVanScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput> | BancosPadroesVanCreateWithoutBancoInput[] | BancosPadroesVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutBancoInput | BancosPadroesVanCreateOrConnectWithoutBancoInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosPadroesVanCreateManyBancoInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput | BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutBancoInput | BancosPadroesVanUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type BancosCnabsUncheckedUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosCnabsCreateWithoutBancoInput, BancosCnabsUncheckedCreateWithoutBancoInput> | BancosCnabsCreateWithoutBancoInput[] | BancosCnabsUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutBancoInput | BancosCnabsCreateOrConnectWithoutBancoInput[]
    upsert?: BancosCnabsUpsertWithWhereUniqueWithoutBancoInput | BancosCnabsUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosCnabsCreateManyBancoInputEnvelope
    set?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    disconnect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    delete?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    update?: BancosCnabsUpdateWithWhereUniqueWithoutBancoInput | BancosCnabsUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosCnabsUpdateManyWithWhereWithoutBancoInput | BancosCnabsUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosCnabsScalarWhereInput | BancosCnabsScalarWhereInput[]
  }

  export type BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput> | BancosProdutosCreateWithoutBancoInput[] | BancosProdutosUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutBancoInput | BancosProdutosCreateOrConnectWithoutBancoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutBancoInput | BancosProdutosUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: BancosProdutosCreateManyBancoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutBancoInput | BancosProdutosUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutBancoInput | BancosProdutosUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type CartaVanUncheckedUpdateManyWithoutBancoNestedInput = {
    create?: XOR<CartaVanCreateWithoutBancoInput, CartaVanUncheckedCreateWithoutBancoInput> | CartaVanCreateWithoutBancoInput[] | CartaVanUncheckedCreateWithoutBancoInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutBancoInput | CartaVanCreateOrConnectWithoutBancoInput[]
    upsert?: CartaVanUpsertWithWhereUniqueWithoutBancoInput | CartaVanUpsertWithWhereUniqueWithoutBancoInput[]
    createMany?: CartaVanCreateManyBancoInputEnvelope
    set?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    disconnect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    delete?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    update?: CartaVanUpdateWithWhereUniqueWithoutBancoInput | CartaVanUpdateWithWhereUniqueWithoutBancoInput[]
    updateMany?: CartaVanUpdateManyWithWhereWithoutBancoInput | CartaVanUpdateManyWithWhereWithoutBancoInput[]
    deleteMany?: CartaVanScalarWhereInput | CartaVanScalarWhereInput[]
  }

  export type BancosPadroesVanCreateNestedManyWithoutPadraoVanInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type BancosPadroesVanUncheckedCreateNestedManyWithoutPadraoVanInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
  }

  export type BancosPadroesVanUpdateManyWithoutPadraoVanNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput | BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanNestedInput = {
    create?: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput> | BancosPadroesVanCreateWithoutPadraoVanInput[] | BancosPadroesVanUncheckedCreateWithoutPadraoVanInput[]
    connectOrCreate?: BancosPadroesVanCreateOrConnectWithoutPadraoVanInput | BancosPadroesVanCreateOrConnectWithoutPadraoVanInput[]
    upsert?: BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput[]
    createMany?: BancosPadroesVanCreateManyPadraoVanInputEnvelope
    set?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    disconnect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    delete?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    connect?: BancosPadroesVanWhereUniqueInput | BancosPadroesVanWhereUniqueInput[]
    update?: BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput | BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput[]
    updateMany?: BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput | BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput[]
    deleteMany?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
  }

  export type BancoCreateNestedOneWithoutPadroesVanInput = {
    create?: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
    connectOrCreate?: BancoCreateOrConnectWithoutPadroesVanInput
    connect?: BancoWhereUniqueInput
  }

  export type PadraoVanCreateNestedOneWithoutBancosInput = {
    create?: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
    connectOrCreate?: PadraoVanCreateOrConnectWithoutBancosInput
    connect?: PadraoVanWhereUniqueInput
  }

  export type BancoUpdateOneRequiredWithoutPadroesVanNestedInput = {
    create?: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
    connectOrCreate?: BancoCreateOrConnectWithoutPadroesVanInput
    upsert?: BancoUpsertWithoutPadroesVanInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutPadroesVanInput, BancoUpdateWithoutPadroesVanInput>, BancoUncheckedUpdateWithoutPadroesVanInput>
  }

  export type PadraoVanUpdateOneRequiredWithoutBancosNestedInput = {
    create?: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
    connectOrCreate?: PadraoVanCreateOrConnectWithoutBancosInput
    upsert?: PadraoVanUpsertWithoutBancosInput
    connect?: PadraoVanWhereUniqueInput
    update?: XOR<XOR<PadraoVanUpdateToOneWithWhereWithoutBancosInput, PadraoVanUpdateWithoutBancosInput>, PadraoVanUncheckedUpdateWithoutBancosInput>
  }

  export type BancosCnabsCreateNestedManyWithoutTipoCnabInput = {
    create?: XOR<BancosCnabsCreateWithoutTipoCnabInput, BancosCnabsUncheckedCreateWithoutTipoCnabInput> | BancosCnabsCreateWithoutTipoCnabInput[] | BancosCnabsUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutTipoCnabInput | BancosCnabsCreateOrConnectWithoutTipoCnabInput[]
    createMany?: BancosCnabsCreateManyTipoCnabInputEnvelope
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
  }

  export type CartaVanCreateNestedManyWithoutTipoCnabInput = {
    create?: XOR<CartaVanCreateWithoutTipoCnabInput, CartaVanUncheckedCreateWithoutTipoCnabInput> | CartaVanCreateWithoutTipoCnabInput[] | CartaVanUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutTipoCnabInput | CartaVanCreateOrConnectWithoutTipoCnabInput[]
    createMany?: CartaVanCreateManyTipoCnabInputEnvelope
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
  }

  export type BancosCnabsUncheckedCreateNestedManyWithoutTipoCnabInput = {
    create?: XOR<BancosCnabsCreateWithoutTipoCnabInput, BancosCnabsUncheckedCreateWithoutTipoCnabInput> | BancosCnabsCreateWithoutTipoCnabInput[] | BancosCnabsUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutTipoCnabInput | BancosCnabsCreateOrConnectWithoutTipoCnabInput[]
    createMany?: BancosCnabsCreateManyTipoCnabInputEnvelope
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
  }

  export type CartaVanUncheckedCreateNestedManyWithoutTipoCnabInput = {
    create?: XOR<CartaVanCreateWithoutTipoCnabInput, CartaVanUncheckedCreateWithoutTipoCnabInput> | CartaVanCreateWithoutTipoCnabInput[] | CartaVanUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutTipoCnabInput | CartaVanCreateOrConnectWithoutTipoCnabInput[]
    createMany?: CartaVanCreateManyTipoCnabInputEnvelope
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
  }

  export type BancosCnabsUpdateManyWithoutTipoCnabNestedInput = {
    create?: XOR<BancosCnabsCreateWithoutTipoCnabInput, BancosCnabsUncheckedCreateWithoutTipoCnabInput> | BancosCnabsCreateWithoutTipoCnabInput[] | BancosCnabsUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutTipoCnabInput | BancosCnabsCreateOrConnectWithoutTipoCnabInput[]
    upsert?: BancosCnabsUpsertWithWhereUniqueWithoutTipoCnabInput | BancosCnabsUpsertWithWhereUniqueWithoutTipoCnabInput[]
    createMany?: BancosCnabsCreateManyTipoCnabInputEnvelope
    set?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    disconnect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    delete?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    update?: BancosCnabsUpdateWithWhereUniqueWithoutTipoCnabInput | BancosCnabsUpdateWithWhereUniqueWithoutTipoCnabInput[]
    updateMany?: BancosCnabsUpdateManyWithWhereWithoutTipoCnabInput | BancosCnabsUpdateManyWithWhereWithoutTipoCnabInput[]
    deleteMany?: BancosCnabsScalarWhereInput | BancosCnabsScalarWhereInput[]
  }

  export type CartaVanUpdateManyWithoutTipoCnabNestedInput = {
    create?: XOR<CartaVanCreateWithoutTipoCnabInput, CartaVanUncheckedCreateWithoutTipoCnabInput> | CartaVanCreateWithoutTipoCnabInput[] | CartaVanUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutTipoCnabInput | CartaVanCreateOrConnectWithoutTipoCnabInput[]
    upsert?: CartaVanUpsertWithWhereUniqueWithoutTipoCnabInput | CartaVanUpsertWithWhereUniqueWithoutTipoCnabInput[]
    createMany?: CartaVanCreateManyTipoCnabInputEnvelope
    set?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    disconnect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    delete?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    update?: CartaVanUpdateWithWhereUniqueWithoutTipoCnabInput | CartaVanUpdateWithWhereUniqueWithoutTipoCnabInput[]
    updateMany?: CartaVanUpdateManyWithWhereWithoutTipoCnabInput | CartaVanUpdateManyWithWhereWithoutTipoCnabInput[]
    deleteMany?: CartaVanScalarWhereInput | CartaVanScalarWhereInput[]
  }

  export type BancosCnabsUncheckedUpdateManyWithoutTipoCnabNestedInput = {
    create?: XOR<BancosCnabsCreateWithoutTipoCnabInput, BancosCnabsUncheckedCreateWithoutTipoCnabInput> | BancosCnabsCreateWithoutTipoCnabInput[] | BancosCnabsUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: BancosCnabsCreateOrConnectWithoutTipoCnabInput | BancosCnabsCreateOrConnectWithoutTipoCnabInput[]
    upsert?: BancosCnabsUpsertWithWhereUniqueWithoutTipoCnabInput | BancosCnabsUpsertWithWhereUniqueWithoutTipoCnabInput[]
    createMany?: BancosCnabsCreateManyTipoCnabInputEnvelope
    set?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    disconnect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    delete?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    connect?: BancosCnabsWhereUniqueInput | BancosCnabsWhereUniqueInput[]
    update?: BancosCnabsUpdateWithWhereUniqueWithoutTipoCnabInput | BancosCnabsUpdateWithWhereUniqueWithoutTipoCnabInput[]
    updateMany?: BancosCnabsUpdateManyWithWhereWithoutTipoCnabInput | BancosCnabsUpdateManyWithWhereWithoutTipoCnabInput[]
    deleteMany?: BancosCnabsScalarWhereInput | BancosCnabsScalarWhereInput[]
  }

  export type CartaVanUncheckedUpdateManyWithoutTipoCnabNestedInput = {
    create?: XOR<CartaVanCreateWithoutTipoCnabInput, CartaVanUncheckedCreateWithoutTipoCnabInput> | CartaVanCreateWithoutTipoCnabInput[] | CartaVanUncheckedCreateWithoutTipoCnabInput[]
    connectOrCreate?: CartaVanCreateOrConnectWithoutTipoCnabInput | CartaVanCreateOrConnectWithoutTipoCnabInput[]
    upsert?: CartaVanUpsertWithWhereUniqueWithoutTipoCnabInput | CartaVanUpsertWithWhereUniqueWithoutTipoCnabInput[]
    createMany?: CartaVanCreateManyTipoCnabInputEnvelope
    set?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    disconnect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    delete?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    connect?: CartaVanWhereUniqueInput | CartaVanWhereUniqueInput[]
    update?: CartaVanUpdateWithWhereUniqueWithoutTipoCnabInput | CartaVanUpdateWithWhereUniqueWithoutTipoCnabInput[]
    updateMany?: CartaVanUpdateManyWithWhereWithoutTipoCnabInput | CartaVanUpdateManyWithWhereWithoutTipoCnabInput[]
    deleteMany?: CartaVanScalarWhereInput | CartaVanScalarWhereInput[]
  }

  export type BancoCreateNestedOneWithoutCnabsInput = {
    create?: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
    connectOrCreate?: BancoCreateOrConnectWithoutCnabsInput
    connect?: BancoWhereUniqueInput
  }

  export type TipoCnabCreateNestedOneWithoutBancosCnabsInput = {
    create?: XOR<TipoCnabCreateWithoutBancosCnabsInput, TipoCnabUncheckedCreateWithoutBancosCnabsInput>
    connectOrCreate?: TipoCnabCreateOrConnectWithoutBancosCnabsInput
    connect?: TipoCnabWhereUniqueInput
  }

  export type BancoUpdateOneRequiredWithoutCnabsNestedInput = {
    create?: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
    connectOrCreate?: BancoCreateOrConnectWithoutCnabsInput
    upsert?: BancoUpsertWithoutCnabsInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutCnabsInput, BancoUpdateWithoutCnabsInput>, BancoUncheckedUpdateWithoutCnabsInput>
  }

  export type TipoCnabUpdateOneRequiredWithoutBancosCnabsNestedInput = {
    create?: XOR<TipoCnabCreateWithoutBancosCnabsInput, TipoCnabUncheckedCreateWithoutBancosCnabsInput>
    connectOrCreate?: TipoCnabCreateOrConnectWithoutBancosCnabsInput
    upsert?: TipoCnabUpsertWithoutBancosCnabsInput
    connect?: TipoCnabWhereUniqueInput
    update?: XOR<XOR<TipoCnabUpdateToOneWithWhereWithoutBancosCnabsInput, TipoCnabUpdateWithoutBancosCnabsInput>, TipoCnabUncheckedUpdateWithoutBancosCnabsInput>
  }

  export type BancosProdutosCreateNestedManyWithoutProdutoInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type BancosProdutosUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
  }

  export type BancosProdutosUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput | BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput | BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutProdutoInput | BancosProdutosUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type BancosProdutosUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput> | BancosProdutosCreateWithoutProdutoInput[] | BancosProdutosUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: BancosProdutosCreateOrConnectWithoutProdutoInput | BancosProdutosCreateOrConnectWithoutProdutoInput[]
    upsert?: BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput | BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: BancosProdutosCreateManyProdutoInputEnvelope
    set?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    disconnect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    delete?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    connect?: BancosProdutosWhereUniqueInput | BancosProdutosWhereUniqueInput[]
    update?: BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput | BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: BancosProdutosUpdateManyWithWhereWithoutProdutoInput | BancosProdutosUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
  }

  export type BancoCreateNestedOneWithoutProdutosInput = {
    create?: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: BancoCreateOrConnectWithoutProdutosInput
    connect?: BancoWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutBancosInput = {
    create?: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutBancosInput
    connect?: ProdutoWhereUniqueInput
  }

  export type BancoUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: BancoCreateOrConnectWithoutProdutosInput
    upsert?: BancoUpsertWithoutProdutosInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutProdutosInput, BancoUpdateWithoutProdutosInput>, BancoUncheckedUpdateWithoutProdutosInput>
  }

  export type ProdutoUpdateOneRequiredWithoutBancosNestedInput = {
    create?: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutBancosInput
    upsert?: ProdutoUpsertWithoutBancosInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutBancosInput, ProdutoUpdateWithoutBancosInput>, ProdutoUncheckedUpdateWithoutBancosInput>
  }

  export type BancoCreateNestedOneWithoutCartasVanInput = {
    create?: XOR<BancoCreateWithoutCartasVanInput, BancoUncheckedCreateWithoutCartasVanInput>
    connectOrCreate?: BancoCreateOrConnectWithoutCartasVanInput
    connect?: BancoWhereUniqueInput
  }

  export type TipoCnabCreateNestedOneWithoutCartasVanInput = {
    create?: XOR<TipoCnabCreateWithoutCartasVanInput, TipoCnabUncheckedCreateWithoutCartasVanInput>
    connectOrCreate?: TipoCnabCreateOrConnectWithoutCartasVanInput
    connect?: TipoCnabWhereUniqueInput
  }

  export type CartaStatusCreateNestedManyWithoutCartaInput = {
    create?: XOR<CartaStatusCreateWithoutCartaInput, CartaStatusUncheckedCreateWithoutCartaInput> | CartaStatusCreateWithoutCartaInput[] | CartaStatusUncheckedCreateWithoutCartaInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutCartaInput | CartaStatusCreateOrConnectWithoutCartaInput[]
    createMany?: CartaStatusCreateManyCartaInputEnvelope
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
  }

  export type CartaStatusUncheckedCreateNestedManyWithoutCartaInput = {
    create?: XOR<CartaStatusCreateWithoutCartaInput, CartaStatusUncheckedCreateWithoutCartaInput> | CartaStatusCreateWithoutCartaInput[] | CartaStatusUncheckedCreateWithoutCartaInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutCartaInput | CartaStatusCreateOrConnectWithoutCartaInput[]
    createMany?: CartaStatusCreateManyCartaInputEnvelope
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BancoUpdateOneRequiredWithoutCartasVanNestedInput = {
    create?: XOR<BancoCreateWithoutCartasVanInput, BancoUncheckedCreateWithoutCartasVanInput>
    connectOrCreate?: BancoCreateOrConnectWithoutCartasVanInput
    upsert?: BancoUpsertWithoutCartasVanInput
    connect?: BancoWhereUniqueInput
    update?: XOR<XOR<BancoUpdateToOneWithWhereWithoutCartasVanInput, BancoUpdateWithoutCartasVanInput>, BancoUncheckedUpdateWithoutCartasVanInput>
  }

  export type TipoCnabUpdateOneRequiredWithoutCartasVanNestedInput = {
    create?: XOR<TipoCnabCreateWithoutCartasVanInput, TipoCnabUncheckedCreateWithoutCartasVanInput>
    connectOrCreate?: TipoCnabCreateOrConnectWithoutCartasVanInput
    upsert?: TipoCnabUpsertWithoutCartasVanInput
    connect?: TipoCnabWhereUniqueInput
    update?: XOR<XOR<TipoCnabUpdateToOneWithWhereWithoutCartasVanInput, TipoCnabUpdateWithoutCartasVanInput>, TipoCnabUncheckedUpdateWithoutCartasVanInput>
  }

  export type CartaStatusUpdateManyWithoutCartaNestedInput = {
    create?: XOR<CartaStatusCreateWithoutCartaInput, CartaStatusUncheckedCreateWithoutCartaInput> | CartaStatusCreateWithoutCartaInput[] | CartaStatusUncheckedCreateWithoutCartaInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutCartaInput | CartaStatusCreateOrConnectWithoutCartaInput[]
    upsert?: CartaStatusUpsertWithWhereUniqueWithoutCartaInput | CartaStatusUpsertWithWhereUniqueWithoutCartaInput[]
    createMany?: CartaStatusCreateManyCartaInputEnvelope
    set?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    disconnect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    delete?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    update?: CartaStatusUpdateWithWhereUniqueWithoutCartaInput | CartaStatusUpdateWithWhereUniqueWithoutCartaInput[]
    updateMany?: CartaStatusUpdateManyWithWhereWithoutCartaInput | CartaStatusUpdateManyWithWhereWithoutCartaInput[]
    deleteMany?: CartaStatusScalarWhereInput | CartaStatusScalarWhereInput[]
  }

  export type CartaStatusUncheckedUpdateManyWithoutCartaNestedInput = {
    create?: XOR<CartaStatusCreateWithoutCartaInput, CartaStatusUncheckedCreateWithoutCartaInput> | CartaStatusCreateWithoutCartaInput[] | CartaStatusUncheckedCreateWithoutCartaInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutCartaInput | CartaStatusCreateOrConnectWithoutCartaInput[]
    upsert?: CartaStatusUpsertWithWhereUniqueWithoutCartaInput | CartaStatusUpsertWithWhereUniqueWithoutCartaInput[]
    createMany?: CartaStatusCreateManyCartaInputEnvelope
    set?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    disconnect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    delete?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    update?: CartaStatusUpdateWithWhereUniqueWithoutCartaInput | CartaStatusUpdateWithWhereUniqueWithoutCartaInput[]
    updateMany?: CartaStatusUpdateManyWithWhereWithoutCartaInput | CartaStatusUpdateManyWithWhereWithoutCartaInput[]
    deleteMany?: CartaStatusScalarWhereInput | CartaStatusScalarWhereInput[]
  }

  export type CartaVanCreateNestedOneWithoutStatusInput = {
    create?: XOR<CartaVanCreateWithoutStatusInput, CartaVanUncheckedCreateWithoutStatusInput>
    connectOrCreate?: CartaVanCreateOrConnectWithoutStatusInput
    connect?: CartaVanWhereUniqueInput
  }

  export type StatusCartaCreateNestedOneWithoutCartaStatusInput = {
    create?: XOR<StatusCartaCreateWithoutCartaStatusInput, StatusCartaUncheckedCreateWithoutCartaStatusInput>
    connectOrCreate?: StatusCartaCreateOrConnectWithoutCartaStatusInput
    connect?: StatusCartaWhereUniqueInput
  }

  export type CartaVanUpdateOneRequiredWithoutStatusNestedInput = {
    create?: XOR<CartaVanCreateWithoutStatusInput, CartaVanUncheckedCreateWithoutStatusInput>
    connectOrCreate?: CartaVanCreateOrConnectWithoutStatusInput
    upsert?: CartaVanUpsertWithoutStatusInput
    connect?: CartaVanWhereUniqueInput
    update?: XOR<XOR<CartaVanUpdateToOneWithWhereWithoutStatusInput, CartaVanUpdateWithoutStatusInput>, CartaVanUncheckedUpdateWithoutStatusInput>
  }

  export type StatusCartaUpdateOneRequiredWithoutCartaStatusNestedInput = {
    create?: XOR<StatusCartaCreateWithoutCartaStatusInput, StatusCartaUncheckedCreateWithoutCartaStatusInput>
    connectOrCreate?: StatusCartaCreateOrConnectWithoutCartaStatusInput
    upsert?: StatusCartaUpsertWithoutCartaStatusInput
    connect?: StatusCartaWhereUniqueInput
    update?: XOR<XOR<StatusCartaUpdateToOneWithWhereWithoutCartaStatusInput, StatusCartaUpdateWithoutCartaStatusInput>, StatusCartaUncheckedUpdateWithoutCartaStatusInput>
  }

  export type CartaStatusCreateNestedManyWithoutStatusInput = {
    create?: XOR<CartaStatusCreateWithoutStatusInput, CartaStatusUncheckedCreateWithoutStatusInput> | CartaStatusCreateWithoutStatusInput[] | CartaStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutStatusInput | CartaStatusCreateOrConnectWithoutStatusInput[]
    createMany?: CartaStatusCreateManyStatusInputEnvelope
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
  }

  export type CartaStatusUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<CartaStatusCreateWithoutStatusInput, CartaStatusUncheckedCreateWithoutStatusInput> | CartaStatusCreateWithoutStatusInput[] | CartaStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutStatusInput | CartaStatusCreateOrConnectWithoutStatusInput[]
    createMany?: CartaStatusCreateManyStatusInputEnvelope
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
  }

  export type CartaStatusUpdateManyWithoutStatusNestedInput = {
    create?: XOR<CartaStatusCreateWithoutStatusInput, CartaStatusUncheckedCreateWithoutStatusInput> | CartaStatusCreateWithoutStatusInput[] | CartaStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutStatusInput | CartaStatusCreateOrConnectWithoutStatusInput[]
    upsert?: CartaStatusUpsertWithWhereUniqueWithoutStatusInput | CartaStatusUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: CartaStatusCreateManyStatusInputEnvelope
    set?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    disconnect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    delete?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    update?: CartaStatusUpdateWithWhereUniqueWithoutStatusInput | CartaStatusUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: CartaStatusUpdateManyWithWhereWithoutStatusInput | CartaStatusUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: CartaStatusScalarWhereInput | CartaStatusScalarWhereInput[]
  }

  export type CartaStatusUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<CartaStatusCreateWithoutStatusInput, CartaStatusUncheckedCreateWithoutStatusInput> | CartaStatusCreateWithoutStatusInput[] | CartaStatusUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: CartaStatusCreateOrConnectWithoutStatusInput | CartaStatusCreateOrConnectWithoutStatusInput[]
    upsert?: CartaStatusUpsertWithWhereUniqueWithoutStatusInput | CartaStatusUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: CartaStatusCreateManyStatusInputEnvelope
    set?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    disconnect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    delete?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    connect?: CartaStatusWhereUniqueInput | CartaStatusWhereUniqueInput[]
    update?: CartaStatusUpdateWithWhereUniqueWithoutStatusInput | CartaStatusUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: CartaStatusUpdateManyWithWhereWithoutStatusInput | CartaStatusUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: CartaStatusScalarWhereInput | CartaStatusScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BancosPadroesVanCreateWithoutBancoInput = {
    padraoVan: PadraoVanCreateNestedOneWithoutBancosInput
  }

  export type BancosPadroesVanUncheckedCreateWithoutBancoInput = {
    id?: number
    padraoVanId: number
  }

  export type BancosPadroesVanCreateOrConnectWithoutBancoInput = {
    where: BancosPadroesVanWhereUniqueInput
    create: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput>
  }

  export type BancosPadroesVanCreateManyBancoInputEnvelope = {
    data: BancosPadroesVanCreateManyBancoInput | BancosPadroesVanCreateManyBancoInput[]
    skipDuplicates?: boolean
  }

  export type BancosCnabsCreateWithoutBancoInput = {
    tipoCnab: TipoCnabCreateNestedOneWithoutBancosCnabsInput
  }

  export type BancosCnabsUncheckedCreateWithoutBancoInput = {
    id?: number
    cnabId: number
  }

  export type BancosCnabsCreateOrConnectWithoutBancoInput = {
    where: BancosCnabsWhereUniqueInput
    create: XOR<BancosCnabsCreateWithoutBancoInput, BancosCnabsUncheckedCreateWithoutBancoInput>
  }

  export type BancosCnabsCreateManyBancoInputEnvelope = {
    data: BancosCnabsCreateManyBancoInput | BancosCnabsCreateManyBancoInput[]
    skipDuplicates?: boolean
  }

  export type BancosProdutosCreateWithoutBancoInput = {
    produto: ProdutoCreateNestedOneWithoutBancosInput
  }

  export type BancosProdutosUncheckedCreateWithoutBancoInput = {
    id?: number
    produtoId: number
  }

  export type BancosProdutosCreateOrConnectWithoutBancoInput = {
    where: BancosProdutosWhereUniqueInput
    create: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput>
  }

  export type BancosProdutosCreateManyBancoInputEnvelope = {
    data: BancosProdutosCreateManyBancoInput | BancosProdutosCreateManyBancoInput[]
    skipDuplicates?: boolean
  }

  export type CartaVanCreateWithoutBancoInput = {
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    tipoCnab: TipoCnabCreateNestedOneWithoutCartasVanInput
    status?: CartaStatusCreateNestedManyWithoutCartaInput
  }

  export type CartaVanUncheckedCreateWithoutBancoInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    tipoCnabId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    status?: CartaStatusUncheckedCreateNestedManyWithoutCartaInput
  }

  export type CartaVanCreateOrConnectWithoutBancoInput = {
    where: CartaVanWhereUniqueInput
    create: XOR<CartaVanCreateWithoutBancoInput, CartaVanUncheckedCreateWithoutBancoInput>
  }

  export type CartaVanCreateManyBancoInputEnvelope = {
    data: CartaVanCreateManyBancoInput | CartaVanCreateManyBancoInput[]
    skipDuplicates?: boolean
  }

  export type BancosPadroesVanUpsertWithWhereUniqueWithoutBancoInput = {
    where: BancosPadroesVanWhereUniqueInput
    update: XOR<BancosPadroesVanUpdateWithoutBancoInput, BancosPadroesVanUncheckedUpdateWithoutBancoInput>
    create: XOR<BancosPadroesVanCreateWithoutBancoInput, BancosPadroesVanUncheckedCreateWithoutBancoInput>
  }

  export type BancosPadroesVanUpdateWithWhereUniqueWithoutBancoInput = {
    where: BancosPadroesVanWhereUniqueInput
    data: XOR<BancosPadroesVanUpdateWithoutBancoInput, BancosPadroesVanUncheckedUpdateWithoutBancoInput>
  }

  export type BancosPadroesVanUpdateManyWithWhereWithoutBancoInput = {
    where: BancosPadroesVanScalarWhereInput
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyWithoutBancoInput>
  }

  export type BancosPadroesVanScalarWhereInput = {
    AND?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
    OR?: BancosPadroesVanScalarWhereInput[]
    NOT?: BancosPadroesVanScalarWhereInput | BancosPadroesVanScalarWhereInput[]
    id?: IntFilter<"BancosPadroesVan"> | number
    bancoId?: IntFilter<"BancosPadroesVan"> | number
    padraoVanId?: IntFilter<"BancosPadroesVan"> | number
  }

  export type BancosCnabsUpsertWithWhereUniqueWithoutBancoInput = {
    where: BancosCnabsWhereUniqueInput
    update: XOR<BancosCnabsUpdateWithoutBancoInput, BancosCnabsUncheckedUpdateWithoutBancoInput>
    create: XOR<BancosCnabsCreateWithoutBancoInput, BancosCnabsUncheckedCreateWithoutBancoInput>
  }

  export type BancosCnabsUpdateWithWhereUniqueWithoutBancoInput = {
    where: BancosCnabsWhereUniqueInput
    data: XOR<BancosCnabsUpdateWithoutBancoInput, BancosCnabsUncheckedUpdateWithoutBancoInput>
  }

  export type BancosCnabsUpdateManyWithWhereWithoutBancoInput = {
    where: BancosCnabsScalarWhereInput
    data: XOR<BancosCnabsUpdateManyMutationInput, BancosCnabsUncheckedUpdateManyWithoutBancoInput>
  }

  export type BancosCnabsScalarWhereInput = {
    AND?: BancosCnabsScalarWhereInput | BancosCnabsScalarWhereInput[]
    OR?: BancosCnabsScalarWhereInput[]
    NOT?: BancosCnabsScalarWhereInput | BancosCnabsScalarWhereInput[]
    id?: IntFilter<"BancosCnabs"> | number
    bancoId?: IntFilter<"BancosCnabs"> | number
    cnabId?: IntFilter<"BancosCnabs"> | number
  }

  export type BancosProdutosUpsertWithWhereUniqueWithoutBancoInput = {
    where: BancosProdutosWhereUniqueInput
    update: XOR<BancosProdutosUpdateWithoutBancoInput, BancosProdutosUncheckedUpdateWithoutBancoInput>
    create: XOR<BancosProdutosCreateWithoutBancoInput, BancosProdutosUncheckedCreateWithoutBancoInput>
  }

  export type BancosProdutosUpdateWithWhereUniqueWithoutBancoInput = {
    where: BancosProdutosWhereUniqueInput
    data: XOR<BancosProdutosUpdateWithoutBancoInput, BancosProdutosUncheckedUpdateWithoutBancoInput>
  }

  export type BancosProdutosUpdateManyWithWhereWithoutBancoInput = {
    where: BancosProdutosScalarWhereInput
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyWithoutBancoInput>
  }

  export type BancosProdutosScalarWhereInput = {
    AND?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
    OR?: BancosProdutosScalarWhereInput[]
    NOT?: BancosProdutosScalarWhereInput | BancosProdutosScalarWhereInput[]
    id?: IntFilter<"BancosProdutos"> | number
    bancoId?: IntFilter<"BancosProdutos"> | number
    produtoId?: IntFilter<"BancosProdutos"> | number
  }

  export type CartaVanUpsertWithWhereUniqueWithoutBancoInput = {
    where: CartaVanWhereUniqueInput
    update: XOR<CartaVanUpdateWithoutBancoInput, CartaVanUncheckedUpdateWithoutBancoInput>
    create: XOR<CartaVanCreateWithoutBancoInput, CartaVanUncheckedCreateWithoutBancoInput>
  }

  export type CartaVanUpdateWithWhereUniqueWithoutBancoInput = {
    where: CartaVanWhereUniqueInput
    data: XOR<CartaVanUpdateWithoutBancoInput, CartaVanUncheckedUpdateWithoutBancoInput>
  }

  export type CartaVanUpdateManyWithWhereWithoutBancoInput = {
    where: CartaVanScalarWhereInput
    data: XOR<CartaVanUpdateManyMutationInput, CartaVanUncheckedUpdateManyWithoutBancoInput>
  }

  export type CartaVanScalarWhereInput = {
    AND?: CartaVanScalarWhereInput | CartaVanScalarWhereInput[]
    OR?: CartaVanScalarWhereInput[]
    NOT?: CartaVanScalarWhereInput | CartaVanScalarWhereInput[]
    id?: IntFilter<"CartaVan"> | number
    cnpjEmitente?: StringFilter<"CartaVan"> | string
    razaoSocial?: StringFilter<"CartaVan"> | string
    nomeResponsavel?: StringFilter<"CartaVan"> | string
    cargoResponsavel?: StringFilter<"CartaVan"> | string
    telefone?: StringFilter<"CartaVan"> | string
    email?: StringFilter<"CartaVan"> | string
    bancoId?: IntFilter<"CartaVan"> | number
    tipoCnabId?: IntFilter<"CartaVan"> | number
    agencia?: StringFilter<"CartaVan"> | string
    agenciaDV?: StringNullableFilter<"CartaVan"> | string | null
    conta?: IntFilter<"CartaVan"> | number
    contaDV?: IntFilter<"CartaVan"> | number
    convenio?: StringFilter<"CartaVan"> | string
    nomeGerente?: StringFilter<"CartaVan"> | string
    telefoneGerente?: StringFilter<"CartaVan"> | string
    emailGerente?: StringFilter<"CartaVan"> | string
    createdAt?: DateTimeFilter<"CartaVan"> | Date | string
  }

  export type BancosPadroesVanCreateWithoutPadraoVanInput = {
    banco: BancoCreateNestedOneWithoutPadroesVanInput
  }

  export type BancosPadroesVanUncheckedCreateWithoutPadraoVanInput = {
    id?: number
    bancoId: number
  }

  export type BancosPadroesVanCreateOrConnectWithoutPadraoVanInput = {
    where: BancosPadroesVanWhereUniqueInput
    create: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput>
  }

  export type BancosPadroesVanCreateManyPadraoVanInputEnvelope = {
    data: BancosPadroesVanCreateManyPadraoVanInput | BancosPadroesVanCreateManyPadraoVanInput[]
    skipDuplicates?: boolean
  }

  export type BancosPadroesVanUpsertWithWhereUniqueWithoutPadraoVanInput = {
    where: BancosPadroesVanWhereUniqueInput
    update: XOR<BancosPadroesVanUpdateWithoutPadraoVanInput, BancosPadroesVanUncheckedUpdateWithoutPadraoVanInput>
    create: XOR<BancosPadroesVanCreateWithoutPadraoVanInput, BancosPadroesVanUncheckedCreateWithoutPadraoVanInput>
  }

  export type BancosPadroesVanUpdateWithWhereUniqueWithoutPadraoVanInput = {
    where: BancosPadroesVanWhereUniqueInput
    data: XOR<BancosPadroesVanUpdateWithoutPadraoVanInput, BancosPadroesVanUncheckedUpdateWithoutPadraoVanInput>
  }

  export type BancosPadroesVanUpdateManyWithWhereWithoutPadraoVanInput = {
    where: BancosPadroesVanScalarWhereInput
    data: XOR<BancosPadroesVanUpdateManyMutationInput, BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanInput>
  }

  export type BancoCreateWithoutPadroesVanInput = {
    nome: string
    cnabs?: BancosCnabsCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutPadroesVanInput = {
    id?: number
    nome: string
    cnabs?: BancosCnabsUncheckedCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutPadroesVanInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
  }

  export type PadraoVanCreateWithoutBancosInput = {
    descricao: string
  }

  export type PadraoVanUncheckedCreateWithoutBancosInput = {
    id?: number
    descricao: string
  }

  export type PadraoVanCreateOrConnectWithoutBancosInput = {
    where: PadraoVanWhereUniqueInput
    create: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
  }

  export type BancoUpsertWithoutPadroesVanInput = {
    update: XOR<BancoUpdateWithoutPadroesVanInput, BancoUncheckedUpdateWithoutPadroesVanInput>
    create: XOR<BancoCreateWithoutPadroesVanInput, BancoUncheckedCreateWithoutPadroesVanInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutPadroesVanInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutPadroesVanInput, BancoUncheckedUpdateWithoutPadroesVanInput>
  }

  export type BancoUpdateWithoutPadroesVanInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cnabs?: BancosCnabsUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutPadroesVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cnabs?: BancosCnabsUncheckedUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type PadraoVanUpsertWithoutBancosInput = {
    update: XOR<PadraoVanUpdateWithoutBancosInput, PadraoVanUncheckedUpdateWithoutBancosInput>
    create: XOR<PadraoVanCreateWithoutBancosInput, PadraoVanUncheckedCreateWithoutBancosInput>
    where?: PadraoVanWhereInput
  }

  export type PadraoVanUpdateToOneWithWhereWithoutBancosInput = {
    where?: PadraoVanWhereInput
    data: XOR<PadraoVanUpdateWithoutBancosInput, PadraoVanUncheckedUpdateWithoutBancosInput>
  }

  export type PadraoVanUpdateWithoutBancosInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type PadraoVanUncheckedUpdateWithoutBancosInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancosCnabsCreateWithoutTipoCnabInput = {
    banco: BancoCreateNestedOneWithoutCnabsInput
  }

  export type BancosCnabsUncheckedCreateWithoutTipoCnabInput = {
    id?: number
    bancoId: number
  }

  export type BancosCnabsCreateOrConnectWithoutTipoCnabInput = {
    where: BancosCnabsWhereUniqueInput
    create: XOR<BancosCnabsCreateWithoutTipoCnabInput, BancosCnabsUncheckedCreateWithoutTipoCnabInput>
  }

  export type BancosCnabsCreateManyTipoCnabInputEnvelope = {
    data: BancosCnabsCreateManyTipoCnabInput | BancosCnabsCreateManyTipoCnabInput[]
    skipDuplicates?: boolean
  }

  export type CartaVanCreateWithoutTipoCnabInput = {
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    banco: BancoCreateNestedOneWithoutCartasVanInput
    status?: CartaStatusCreateNestedManyWithoutCartaInput
  }

  export type CartaVanUncheckedCreateWithoutTipoCnabInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    bancoId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    status?: CartaStatusUncheckedCreateNestedManyWithoutCartaInput
  }

  export type CartaVanCreateOrConnectWithoutTipoCnabInput = {
    where: CartaVanWhereUniqueInput
    create: XOR<CartaVanCreateWithoutTipoCnabInput, CartaVanUncheckedCreateWithoutTipoCnabInput>
  }

  export type CartaVanCreateManyTipoCnabInputEnvelope = {
    data: CartaVanCreateManyTipoCnabInput | CartaVanCreateManyTipoCnabInput[]
    skipDuplicates?: boolean
  }

  export type BancosCnabsUpsertWithWhereUniqueWithoutTipoCnabInput = {
    where: BancosCnabsWhereUniqueInput
    update: XOR<BancosCnabsUpdateWithoutTipoCnabInput, BancosCnabsUncheckedUpdateWithoutTipoCnabInput>
    create: XOR<BancosCnabsCreateWithoutTipoCnabInput, BancosCnabsUncheckedCreateWithoutTipoCnabInput>
  }

  export type BancosCnabsUpdateWithWhereUniqueWithoutTipoCnabInput = {
    where: BancosCnabsWhereUniqueInput
    data: XOR<BancosCnabsUpdateWithoutTipoCnabInput, BancosCnabsUncheckedUpdateWithoutTipoCnabInput>
  }

  export type BancosCnabsUpdateManyWithWhereWithoutTipoCnabInput = {
    where: BancosCnabsScalarWhereInput
    data: XOR<BancosCnabsUpdateManyMutationInput, BancosCnabsUncheckedUpdateManyWithoutTipoCnabInput>
  }

  export type CartaVanUpsertWithWhereUniqueWithoutTipoCnabInput = {
    where: CartaVanWhereUniqueInput
    update: XOR<CartaVanUpdateWithoutTipoCnabInput, CartaVanUncheckedUpdateWithoutTipoCnabInput>
    create: XOR<CartaVanCreateWithoutTipoCnabInput, CartaVanUncheckedCreateWithoutTipoCnabInput>
  }

  export type CartaVanUpdateWithWhereUniqueWithoutTipoCnabInput = {
    where: CartaVanWhereUniqueInput
    data: XOR<CartaVanUpdateWithoutTipoCnabInput, CartaVanUncheckedUpdateWithoutTipoCnabInput>
  }

  export type CartaVanUpdateManyWithWhereWithoutTipoCnabInput = {
    where: CartaVanScalarWhereInput
    data: XOR<CartaVanUpdateManyMutationInput, CartaVanUncheckedUpdateManyWithoutTipoCnabInput>
  }

  export type BancoCreateWithoutCnabsInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutCnabsInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutCnabsInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
  }

  export type TipoCnabCreateWithoutBancosCnabsInput = {
    descricao: string
    cartasVan?: CartaVanCreateNestedManyWithoutTipoCnabInput
  }

  export type TipoCnabUncheckedCreateWithoutBancosCnabsInput = {
    id?: number
    descricao: string
    cartasVan?: CartaVanUncheckedCreateNestedManyWithoutTipoCnabInput
  }

  export type TipoCnabCreateOrConnectWithoutBancosCnabsInput = {
    where: TipoCnabWhereUniqueInput
    create: XOR<TipoCnabCreateWithoutBancosCnabsInput, TipoCnabUncheckedCreateWithoutBancosCnabsInput>
  }

  export type BancoUpsertWithoutCnabsInput = {
    update: XOR<BancoUpdateWithoutCnabsInput, BancoUncheckedUpdateWithoutCnabsInput>
    create: XOR<BancoCreateWithoutCnabsInput, BancoUncheckedCreateWithoutCnabsInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutCnabsInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutCnabsInput, BancoUncheckedUpdateWithoutCnabsInput>
  }

  export type BancoUpdateWithoutCnabsInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutCnabsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type TipoCnabUpsertWithoutBancosCnabsInput = {
    update: XOR<TipoCnabUpdateWithoutBancosCnabsInput, TipoCnabUncheckedUpdateWithoutBancosCnabsInput>
    create: XOR<TipoCnabCreateWithoutBancosCnabsInput, TipoCnabUncheckedCreateWithoutBancosCnabsInput>
    where?: TipoCnabWhereInput
  }

  export type TipoCnabUpdateToOneWithWhereWithoutBancosCnabsInput = {
    where?: TipoCnabWhereInput
    data: XOR<TipoCnabUpdateWithoutBancosCnabsInput, TipoCnabUncheckedUpdateWithoutBancosCnabsInput>
  }

  export type TipoCnabUpdateWithoutBancosCnabsInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    cartasVan?: CartaVanUpdateManyWithoutTipoCnabNestedInput
  }

  export type TipoCnabUncheckedUpdateWithoutBancosCnabsInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    cartasVan?: CartaVanUncheckedUpdateManyWithoutTipoCnabNestedInput
  }

  export type BancosProdutosCreateWithoutProdutoInput = {
    banco: BancoCreateNestedOneWithoutProdutosInput
  }

  export type BancosProdutosUncheckedCreateWithoutProdutoInput = {
    id?: number
    bancoId: number
  }

  export type BancosProdutosCreateOrConnectWithoutProdutoInput = {
    where: BancosProdutosWhereUniqueInput
    create: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput>
  }

  export type BancosProdutosCreateManyProdutoInputEnvelope = {
    data: BancosProdutosCreateManyProdutoInput | BancosProdutosCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type BancosProdutosUpsertWithWhereUniqueWithoutProdutoInput = {
    where: BancosProdutosWhereUniqueInput
    update: XOR<BancosProdutosUpdateWithoutProdutoInput, BancosProdutosUncheckedUpdateWithoutProdutoInput>
    create: XOR<BancosProdutosCreateWithoutProdutoInput, BancosProdutosUncheckedCreateWithoutProdutoInput>
  }

  export type BancosProdutosUpdateWithWhereUniqueWithoutProdutoInput = {
    where: BancosProdutosWhereUniqueInput
    data: XOR<BancosProdutosUpdateWithoutProdutoInput, BancosProdutosUncheckedUpdateWithoutProdutoInput>
  }

  export type BancosProdutosUpdateManyWithWhereWithoutProdutoInput = {
    where: BancosProdutosScalarWhereInput
    data: XOR<BancosProdutosUpdateManyMutationInput, BancosProdutosUncheckedUpdateManyWithoutProdutoInput>
  }

  export type BancoCreateWithoutProdutosInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    cnabs?: BancosCnabsCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutProdutosInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    cnabs?: BancosCnabsUncheckedCreateNestedManyWithoutBancoInput
    cartasVan?: CartaVanUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutProdutosInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoCreateWithoutBancosInput = {
    nome: string
    descricao: string
  }

  export type ProdutoUncheckedCreateWithoutBancosInput = {
    id?: number
    nome: string
    descricao: string
  }

  export type ProdutoCreateOrConnectWithoutBancosInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
  }

  export type BancoUpsertWithoutProdutosInput = {
    update: XOR<BancoUpdateWithoutProdutosInput, BancoUncheckedUpdateWithoutProdutosInput>
    create: XOR<BancoCreateWithoutProdutosInput, BancoUncheckedCreateWithoutProdutosInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutProdutosInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutProdutosInput, BancoUncheckedUpdateWithoutProdutosInput>
  }

  export type BancoUpdateWithoutProdutosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    cnabs?: BancosCnabsUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    cnabs?: BancosCnabsUncheckedUpdateManyWithoutBancoNestedInput
    cartasVan?: CartaVanUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type ProdutoUpsertWithoutBancosInput = {
    update: XOR<ProdutoUpdateWithoutBancosInput, ProdutoUncheckedUpdateWithoutBancosInput>
    create: XOR<ProdutoCreateWithoutBancosInput, ProdutoUncheckedCreateWithoutBancosInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutBancosInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutBancosInput, ProdutoUncheckedUpdateWithoutBancosInput>
  }

  export type ProdutoUpdateWithoutBancosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoUncheckedUpdateWithoutBancosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type BancoCreateWithoutCartasVanInput = {
    nome: string
    padroesVan?: BancosPadroesVanCreateNestedManyWithoutBancoInput
    cnabs?: BancosCnabsCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosCreateNestedManyWithoutBancoInput
  }

  export type BancoUncheckedCreateWithoutCartasVanInput = {
    id?: number
    nome: string
    padroesVan?: BancosPadroesVanUncheckedCreateNestedManyWithoutBancoInput
    cnabs?: BancosCnabsUncheckedCreateNestedManyWithoutBancoInput
    produtos?: BancosProdutosUncheckedCreateNestedManyWithoutBancoInput
  }

  export type BancoCreateOrConnectWithoutCartasVanInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutCartasVanInput, BancoUncheckedCreateWithoutCartasVanInput>
  }

  export type TipoCnabCreateWithoutCartasVanInput = {
    descricao: string
    bancosCnabs?: BancosCnabsCreateNestedManyWithoutTipoCnabInput
  }

  export type TipoCnabUncheckedCreateWithoutCartasVanInput = {
    id?: number
    descricao: string
    bancosCnabs?: BancosCnabsUncheckedCreateNestedManyWithoutTipoCnabInput
  }

  export type TipoCnabCreateOrConnectWithoutCartasVanInput = {
    where: TipoCnabWhereUniqueInput
    create: XOR<TipoCnabCreateWithoutCartasVanInput, TipoCnabUncheckedCreateWithoutCartasVanInput>
  }

  export type CartaStatusCreateWithoutCartaInput = {
    createdAt?: Date | string
    status: StatusCartaCreateNestedOneWithoutCartaStatusInput
  }

  export type CartaStatusUncheckedCreateWithoutCartaInput = {
    id?: number
    statusId: number
    createdAt?: Date | string
  }

  export type CartaStatusCreateOrConnectWithoutCartaInput = {
    where: CartaStatusWhereUniqueInput
    create: XOR<CartaStatusCreateWithoutCartaInput, CartaStatusUncheckedCreateWithoutCartaInput>
  }

  export type CartaStatusCreateManyCartaInputEnvelope = {
    data: CartaStatusCreateManyCartaInput | CartaStatusCreateManyCartaInput[]
    skipDuplicates?: boolean
  }

  export type BancoUpsertWithoutCartasVanInput = {
    update: XOR<BancoUpdateWithoutCartasVanInput, BancoUncheckedUpdateWithoutCartasVanInput>
    create: XOR<BancoCreateWithoutCartasVanInput, BancoUncheckedCreateWithoutCartasVanInput>
    where?: BancoWhereInput
  }

  export type BancoUpdateToOneWithWhereWithoutCartasVanInput = {
    where?: BancoWhereInput
    data: XOR<BancoUpdateWithoutCartasVanInput, BancoUncheckedUpdateWithoutCartasVanInput>
  }

  export type BancoUpdateWithoutCartasVanInput = {
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUpdateManyWithoutBancoNestedInput
    cnabs?: BancosCnabsUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUpdateManyWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateWithoutCartasVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    padroesVan?: BancosPadroesVanUncheckedUpdateManyWithoutBancoNestedInput
    cnabs?: BancosCnabsUncheckedUpdateManyWithoutBancoNestedInput
    produtos?: BancosProdutosUncheckedUpdateManyWithoutBancoNestedInput
  }

  export type TipoCnabUpsertWithoutCartasVanInput = {
    update: XOR<TipoCnabUpdateWithoutCartasVanInput, TipoCnabUncheckedUpdateWithoutCartasVanInput>
    create: XOR<TipoCnabCreateWithoutCartasVanInput, TipoCnabUncheckedCreateWithoutCartasVanInput>
    where?: TipoCnabWhereInput
  }

  export type TipoCnabUpdateToOneWithWhereWithoutCartasVanInput = {
    where?: TipoCnabWhereInput
    data: XOR<TipoCnabUpdateWithoutCartasVanInput, TipoCnabUncheckedUpdateWithoutCartasVanInput>
  }

  export type TipoCnabUpdateWithoutCartasVanInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    bancosCnabs?: BancosCnabsUpdateManyWithoutTipoCnabNestedInput
  }

  export type TipoCnabUncheckedUpdateWithoutCartasVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    bancosCnabs?: BancosCnabsUncheckedUpdateManyWithoutTipoCnabNestedInput
  }

  export type CartaStatusUpsertWithWhereUniqueWithoutCartaInput = {
    where: CartaStatusWhereUniqueInput
    update: XOR<CartaStatusUpdateWithoutCartaInput, CartaStatusUncheckedUpdateWithoutCartaInput>
    create: XOR<CartaStatusCreateWithoutCartaInput, CartaStatusUncheckedCreateWithoutCartaInput>
  }

  export type CartaStatusUpdateWithWhereUniqueWithoutCartaInput = {
    where: CartaStatusWhereUniqueInput
    data: XOR<CartaStatusUpdateWithoutCartaInput, CartaStatusUncheckedUpdateWithoutCartaInput>
  }

  export type CartaStatusUpdateManyWithWhereWithoutCartaInput = {
    where: CartaStatusScalarWhereInput
    data: XOR<CartaStatusUpdateManyMutationInput, CartaStatusUncheckedUpdateManyWithoutCartaInput>
  }

  export type CartaStatusScalarWhereInput = {
    AND?: CartaStatusScalarWhereInput | CartaStatusScalarWhereInput[]
    OR?: CartaStatusScalarWhereInput[]
    NOT?: CartaStatusScalarWhereInput | CartaStatusScalarWhereInput[]
    id?: IntFilter<"CartaStatus"> | number
    cartaId?: IntFilter<"CartaStatus"> | number
    statusId?: IntFilter<"CartaStatus"> | number
    createdAt?: DateTimeFilter<"CartaStatus"> | Date | string
  }

  export type CartaVanCreateWithoutStatusInput = {
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
    banco: BancoCreateNestedOneWithoutCartasVanInput
    tipoCnab: TipoCnabCreateNestedOneWithoutCartasVanInput
  }

  export type CartaVanUncheckedCreateWithoutStatusInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    bancoId: number
    tipoCnabId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
  }

  export type CartaVanCreateOrConnectWithoutStatusInput = {
    where: CartaVanWhereUniqueInput
    create: XOR<CartaVanCreateWithoutStatusInput, CartaVanUncheckedCreateWithoutStatusInput>
  }

  export type StatusCartaCreateWithoutCartaStatusInput = {
    descricao: string
  }

  export type StatusCartaUncheckedCreateWithoutCartaStatusInput = {
    id?: number
    descricao: string
  }

  export type StatusCartaCreateOrConnectWithoutCartaStatusInput = {
    where: StatusCartaWhereUniqueInput
    create: XOR<StatusCartaCreateWithoutCartaStatusInput, StatusCartaUncheckedCreateWithoutCartaStatusInput>
  }

  export type CartaVanUpsertWithoutStatusInput = {
    update: XOR<CartaVanUpdateWithoutStatusInput, CartaVanUncheckedUpdateWithoutStatusInput>
    create: XOR<CartaVanCreateWithoutStatusInput, CartaVanUncheckedCreateWithoutStatusInput>
    where?: CartaVanWhereInput
  }

  export type CartaVanUpdateToOneWithWhereWithoutStatusInput = {
    where?: CartaVanWhereInput
    data: XOR<CartaVanUpdateWithoutStatusInput, CartaVanUncheckedUpdateWithoutStatusInput>
  }

  export type CartaVanUpdateWithoutStatusInput = {
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banco?: BancoUpdateOneRequiredWithoutCartasVanNestedInput
    tipoCnab?: TipoCnabUpdateOneRequiredWithoutCartasVanNestedInput
  }

  export type CartaVanUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bancoId?: IntFieldUpdateOperationsInput | number
    tipoCnabId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCartaUpsertWithoutCartaStatusInput = {
    update: XOR<StatusCartaUpdateWithoutCartaStatusInput, StatusCartaUncheckedUpdateWithoutCartaStatusInput>
    create: XOR<StatusCartaCreateWithoutCartaStatusInput, StatusCartaUncheckedCreateWithoutCartaStatusInput>
    where?: StatusCartaWhereInput
  }

  export type StatusCartaUpdateToOneWithWhereWithoutCartaStatusInput = {
    where?: StatusCartaWhereInput
    data: XOR<StatusCartaUpdateWithoutCartaStatusInput, StatusCartaUncheckedUpdateWithoutCartaStatusInput>
  }

  export type StatusCartaUpdateWithoutCartaStatusInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCartaUncheckedUpdateWithoutCartaStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type CartaStatusCreateWithoutStatusInput = {
    createdAt?: Date | string
    carta: CartaVanCreateNestedOneWithoutStatusInput
  }

  export type CartaStatusUncheckedCreateWithoutStatusInput = {
    id?: number
    cartaId: number
    createdAt?: Date | string
  }

  export type CartaStatusCreateOrConnectWithoutStatusInput = {
    where: CartaStatusWhereUniqueInput
    create: XOR<CartaStatusCreateWithoutStatusInput, CartaStatusUncheckedCreateWithoutStatusInput>
  }

  export type CartaStatusCreateManyStatusInputEnvelope = {
    data: CartaStatusCreateManyStatusInput | CartaStatusCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type CartaStatusUpsertWithWhereUniqueWithoutStatusInput = {
    where: CartaStatusWhereUniqueInput
    update: XOR<CartaStatusUpdateWithoutStatusInput, CartaStatusUncheckedUpdateWithoutStatusInput>
    create: XOR<CartaStatusCreateWithoutStatusInput, CartaStatusUncheckedCreateWithoutStatusInput>
  }

  export type CartaStatusUpdateWithWhereUniqueWithoutStatusInput = {
    where: CartaStatusWhereUniqueInput
    data: XOR<CartaStatusUpdateWithoutStatusInput, CartaStatusUncheckedUpdateWithoutStatusInput>
  }

  export type CartaStatusUpdateManyWithWhereWithoutStatusInput = {
    where: CartaStatusScalarWhereInput
    data: XOR<CartaStatusUpdateManyMutationInput, CartaStatusUncheckedUpdateManyWithoutStatusInput>
  }

  export type BancosPadroesVanCreateManyBancoInput = {
    id?: number
    padraoVanId: number
  }

  export type BancosCnabsCreateManyBancoInput = {
    id?: number
    cnabId: number
  }

  export type BancosProdutosCreateManyBancoInput = {
    id?: number
    produtoId: number
  }

  export type CartaVanCreateManyBancoInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    tipoCnabId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
  }

  export type BancosPadroesVanUpdateWithoutBancoInput = {
    padraoVan?: PadraoVanUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosPadroesVanUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    padraoVanId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosCnabsUpdateWithoutBancoInput = {
    tipoCnab?: TipoCnabUpdateOneRequiredWithoutBancosCnabsNestedInput
  }

  export type BancosCnabsUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnabId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosCnabsUncheckedUpdateManyWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnabId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosUpdateWithoutBancoInput = {
    produto?: ProdutoUpdateOneRequiredWithoutBancosNestedInput
  }

  export type BancosProdutosUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosUncheckedUpdateManyWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type CartaVanUpdateWithoutBancoInput = {
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoCnab?: TipoCnabUpdateOneRequiredWithoutCartasVanNestedInput
    status?: CartaStatusUpdateManyWithoutCartaNestedInput
  }

  export type CartaVanUncheckedUpdateWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tipoCnabId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: CartaStatusUncheckedUpdateManyWithoutCartaNestedInput
  }

  export type CartaVanUncheckedUpdateManyWithoutBancoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tipoCnabId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BancosPadroesVanCreateManyPadraoVanInput = {
    id?: number
    bancoId: number
  }

  export type BancosPadroesVanUpdateWithoutPadraoVanInput = {
    banco?: BancoUpdateOneRequiredWithoutPadroesVanNestedInput
  }

  export type BancosPadroesVanUncheckedUpdateWithoutPadraoVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosPadroesVanUncheckedUpdateManyWithoutPadraoVanInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosCnabsCreateManyTipoCnabInput = {
    id?: number
    bancoId: number
  }

  export type CartaVanCreateManyTipoCnabInput = {
    id?: number
    cnpjEmitente: string
    razaoSocial: string
    nomeResponsavel: string
    cargoResponsavel: string
    telefone: string
    email: string
    bancoId: number
    agencia: string
    agenciaDV?: string | null
    conta: number
    contaDV: number
    convenio: string
    nomeGerente: string
    telefoneGerente: string
    emailGerente: string
    createdAt?: Date | string
  }

  export type BancosCnabsUpdateWithoutTipoCnabInput = {
    banco?: BancoUpdateOneRequiredWithoutCnabsNestedInput
  }

  export type BancosCnabsUncheckedUpdateWithoutTipoCnabInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosCnabsUncheckedUpdateManyWithoutTipoCnabInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type CartaVanUpdateWithoutTipoCnabInput = {
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banco?: BancoUpdateOneRequiredWithoutCartasVanNestedInput
    status?: CartaStatusUpdateManyWithoutCartaNestedInput
  }

  export type CartaVanUncheckedUpdateWithoutTipoCnabInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bancoId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: CartaStatusUncheckedUpdateManyWithoutCartaNestedInput
  }

  export type CartaVanUncheckedUpdateManyWithoutTipoCnabInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnpjEmitente?: StringFieldUpdateOperationsInput | string
    razaoSocial?: StringFieldUpdateOperationsInput | string
    nomeResponsavel?: StringFieldUpdateOperationsInput | string
    cargoResponsavel?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bancoId?: IntFieldUpdateOperationsInput | number
    agencia?: StringFieldUpdateOperationsInput | string
    agenciaDV?: NullableStringFieldUpdateOperationsInput | string | null
    conta?: IntFieldUpdateOperationsInput | number
    contaDV?: IntFieldUpdateOperationsInput | number
    convenio?: StringFieldUpdateOperationsInput | string
    nomeGerente?: StringFieldUpdateOperationsInput | string
    telefoneGerente?: StringFieldUpdateOperationsInput | string
    emailGerente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BancosProdutosCreateManyProdutoInput = {
    id?: number
    bancoId: number
  }

  export type BancosProdutosUpdateWithoutProdutoInput = {
    banco?: BancoUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type BancosProdutosUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type BancosProdutosUncheckedUpdateManyWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    bancoId?: IntFieldUpdateOperationsInput | number
  }

  export type CartaStatusCreateManyCartaInput = {
    id?: number
    statusId: number
    createdAt?: Date | string
  }

  export type CartaStatusUpdateWithoutCartaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusCartaUpdateOneRequiredWithoutCartaStatusNestedInput
  }

  export type CartaStatusUncheckedUpdateWithoutCartaInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaStatusUncheckedUpdateManyWithoutCartaInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaStatusCreateManyStatusInput = {
    id?: number
    cartaId: number
    createdAt?: Date | string
  }

  export type CartaStatusUpdateWithoutStatusInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carta?: CartaVanUpdateOneRequiredWithoutStatusNestedInput
  }

  export type CartaStatusUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaStatusUncheckedUpdateManyWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}